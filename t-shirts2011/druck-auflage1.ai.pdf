%!PS-Adobe-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: druck-auflage1.ai
%%Creator: Adobe Illustrator(R) 14.0
%%For: Hacksen & Hackers
%%CreationDate: 08.02.11
%%HiResBoundingBox: 0.0552 0.2251 841.9448 1190.7749
%%CropBox: 0.0552 0.2251 841.9448 1190.7749
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Special
%%TargetDevice: (HP Color LaserJet 8550) (3011.103) 1
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%ADOBeginClientInjection: DocumentHeader "AI11"
%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541
%ADOEndClientInjection: DocumentHeader "AI11"
%RBINumCopies: 1
%%Pages: (atend)
%%BoundingBox: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
[{
%%BeginFeature: *HPJobRetentionOption HPJobRetentionOff

	<< /CollateDetails
	<< /Type 8 /Hold 0 >> >> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPUserName FileSharingName

	<< /CollateDetails
		<< /Type 8
			/UserName /dscInfo where
				{ /dscInfo get dup /For known
					{/For get}
					{pop (No User Name)} ifelse}
				{(No User Name)}ifelse
			dup length 80 gt { 0 80 getinterval } if
			dup true exch { 32 eq not { false exch pop } if } forall
			{ pop (No User Name) } if
			0 1 2 index length 1 sub
			{ dup 2 index exch get dup 97 ge 1 index 122 le and
				{ 32 sub 2 index 3 1 roll put }
				{ pop pop } ifelse
			} for
		>>
	>> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPJobName DocName

	<< /CollateDetails
		<< /Type 8
			/JobMgrName /dscInfo where
				{ /dscInfo get dup /Title known
					{/Title get}
					{pop ()} ifelse}
				{()}ifelse
			/dscInfo where
				{ /dscInfo get dup /Creator known
					{
						/Creator get dup 0 exch
						{ dup 32 eq exch dup 64 gt exch 122 le and or { 1 add } { exit } ifelse } forall
						0 exch getinterval anchorsearch { pop } if
					}
					{pop} ifelse
				} if
			{ (:) search
				{ pop pop }
				{ exit }
				ifelse
			} loop
			dup 0 exch { false ( -) { 2 index eq or } forall exch pop { 1 add } { exit } ifelse } forall
			dup 0 eq { pop } { dup 2 index length exch sub getinterval } ifelse
			dup length 80 gt { 0 80 getinterval } if
			dup true exch { 32 eq not { false exch pop } if } forall
			{ pop () } if
			0 1 2 index length 1 sub
			{ dup 2 index exch get dup 97 ge 1 index 122 le and
				{ 32 sub 2 index 3 1 roll put }
				{ pop pop } ifelse
			} for
		>>
	>> setpagedevice
%%EndFeature
} stopped cleartomark
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
Adobe_AGM_Core/lw_save_restore_override gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
% Disable CTRL-D as an end-of-file marker...
userdict dup(\004)cvn{}put (\004\004)cvn{}put
[{
%%BeginFeature: *HPOption_Disk None
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPOption_Duplexer False
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPOption_Tray2 True
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPOption_Tray4 False
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *InstalledMemory 32MB
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPOption_MBM_Mixed Standard
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPClean False
<< /Cleaning false >> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *ColorModel CMYK
<</ProcessColorModel /DeviceCMYK>> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *Duplex None

	 <</Duplex false /Tumble false >> setpagedevice 
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPCMYKInks SWOP
<< /CMYKInkSet 1 >> setpagedevice 
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPCSGraphics VividDetail

globaldict /ColorSmartColorMatching known {
	true ColorSmartColorMatching
	Vivid ColorSmartGraphicsAdjustment
	Detail ColorSmartGraphicsHalftone
	true ColorSmartColorMatching
} if
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPCSImages VividSmooth

globaldict /ColorSmartColorMatching known {
	true ColorSmartColorMatching
	Vivid ColorSmartImageAdjustment
	Smooth ColorSmartImageHalftone
	true ColorSmartColorMatching
} if
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPCSText VividDetail

globaldict /ColorSmartColorMatching known {
	true ColorSmartColorMatching
	Vivid ColorSmartTextAdjustment
	Detail ColorSmartTextHalftone
	true ColorSmartColorMatching
} if
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *MediaType Plain

    <</MediaType (Plain)>> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *ManualFeed False
<</ManualFeed false>> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPColorSmart Automatic

<< /ProcessColorModel /DeviceCMYK >> setpagedevice
globaldict /ColorSmartColorMatching known {
	true ColorSmartColorMatching
	Vivid ColorSmartTextAdjustment
	Vivid ColorSmartGraphicsAdjustment
	Vivid ColorSmartImageAdjustment
	Detail ColorSmartTextHalftone
	Smooth ColorSmartGraphicsHalftone
	Smooth ColorSmartImageHalftone
	true ColorSmartColorMatching
} if
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPManualDuplex False
<< /PrintOnBackside false >> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *Collate True
<< /Collate true >> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPPantone True
<< /SpotColorMatching true >> setpagedevice
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *HPStaplerOptions PrintersDefault
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *PageSize A3

    << /PageSize [842 1191] /MediaType (null)
	/InputAttributes << 0 << /PageSize [842 1191] /MediaType (null) >> >> >> setpagedevice 
%%EndFeature
} stopped cleartomark
[{
%%BeginFeature: *OutputBin PrinterDefault
%%EndFeature
} stopped cleartomark
% x y w h ESPrc - Clip to a rectangle.
userdict/ESPrc/rectclip where{pop/rectclip load}
{{newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath clip newpath}bind}ifelse put
% x y w h ESPrf - Fill a rectangle.
userdict/ESPrf/rectfill where{pop/rectfill load}
{{gsave newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath fill grestore}bind}ifelse put
% x y w h ESPrs - Stroke a rectangle.
userdict/ESPrs/rectstroke where{pop/rectstroke load}
{{gsave newpath 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
neg 0 rlineto closepath stroke grestore}bind}ifelse put
userdict/ESPwl{}bind put
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *PageSize A3

    << /PageSize [842 1191] /MediaType (null)
	/InputAttributes << 0 << /PageSize [842 1191] /MediaType (null) >> >> >> setpagedevice 
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 842 1191
%%BeginPageSetup
%%EndPageSetup
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (1)]
[/TrimBox [0.05517578125 0.22509765625 841.94482421875 1190.7749023437]]
[/BleedBox [0.05517578125 0.22509765625 841.94482421875 1190.7749023437]]
]xpdfm
Adobe_AGM_Core/ps gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *PageSize A3

    << /PageSize [842 1191] /MediaType (null)
	/InputAttributes << 0 << /PageSize [842 1191] /MediaType (null) >> >> >> setpagedevice 
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_AGM_Core/driver_media_override gx
[1 0 0 -1 0 1191 ]ct
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%%EndPageSetup
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
.0551758 .225098 mo
.0551758 1190.77 li
841.945 1190.77 li
841.945 .225098 li
cp
clp
[1 0 0 1 0 0 ]ct
125.209 348.558 mo
119.36 348.558 li
119.36 342.71 li
125.209 342.71 li
125.209 348.558 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
1.65 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
125.209 348.558 mo
119.36 348.558 li
119.36 342.71 li
125.209 342.71 li
125.209 348.558 li
cp
0 0 0 0 cmyk
@
119.362 342.713 mo
113.512 342.713 li
113.512 336.863 li
119.362 336.863 li
119.362 342.713 li
cp
0 0 0 1 cmyk
f
119.362 342.713 mo
113.512 342.713 li
113.512 336.863 li
119.362 336.863 li
119.362 342.713 li
cp
0 0 0 0 cmyk
@
90.1235 336.867 mo
84.2739 336.867 li
84.2739 331.018 li
90.1235 331.018 li
90.1235 336.867 li
cp
0 0 0 1 cmyk
f
90.1235 336.867 mo
84.2739 336.867 li
84.2739 331.018 li
90.1235 331.018 li
90.1235 336.867 li
cp
0 0 0 0 cmyk
@
95.9712 336.867 mo
90.1216 336.867 li
90.1216 331.018 li
95.9712 331.018 li
95.9712 336.867 li
cp
0 0 0 1 cmyk
f
95.9712 336.867 mo
90.1216 336.867 li
90.1216 331.018 li
95.9712 331.018 li
95.9712 336.867 li
cp
0 0 0 0 cmyk
@
101.818 336.867 mo
95.9692 336.867 li
95.9692 331.018 li
101.818 331.018 li
101.818 336.867 li
cp
0 0 0 1 cmyk
f
101.818 336.867 mo
95.9692 336.867 li
95.9692 331.018 li
101.818 331.018 li
101.818 336.867 li
cp
0 0 0 0 cmyk
@
107.667 336.867 mo
101.817 336.867 li
101.817 331.018 li
107.667 331.018 li
107.667 336.867 li
cp
0 0 0 1 cmyk
f
107.667 336.867 mo
101.817 336.867 li
101.817 331.018 li
107.667 331.018 li
107.667 336.867 li
cp
0 0 0 0 cmyk
@
113.514 336.867 mo
107.665 336.867 li
107.665 331.018 li
113.514 331.018 li
113.514 336.867 li
cp
0 0 0 1 cmyk
f
113.514 336.867 mo
107.665 336.867 li
107.665 331.018 li
113.514 331.018 li
113.514 336.867 li
cp
0 0 0 0 cmyk
@
119.362 336.867 mo
113.512 336.867 li
113.512 331.018 li
119.362 331.018 li
119.362 336.867 li
cp
0 0 0 1 cmyk
f
119.362 336.867 mo
113.512 336.867 li
113.512 331.018 li
119.362 331.018 li
119.362 336.867 li
cp
0 0 0 0 cmyk
@
125.209 336.867 mo
119.36 336.867 li
119.36 331.018 li
125.209 331.018 li
125.209 336.867 li
cp
0 0 0 1 cmyk
f
125.209 336.867 mo
119.36 336.867 li
119.36 331.018 li
125.209 331.018 li
125.209 336.867 li
cp
0 0 0 0 cmyk
@
90.1235 331.021 mo
84.2739 331.021 li
84.2739 325.17 li
90.1235 325.17 li
90.1235 331.021 li
cp
0 0 0 1 cmyk
f
90.1235 331.021 mo
84.2739 331.021 li
84.2739 325.17 li
90.1235 325.17 li
90.1235 331.021 li
cp
0 0 0 0 cmyk
@
95.9712 331.021 mo
90.1216 331.021 li
90.1216 325.17 li
95.9712 325.17 li
95.9712 331.021 li
cp
0 0 0 1 cmyk
f
95.9712 331.021 mo
90.1216 331.021 li
90.1216 325.17 li
95.9712 325.17 li
95.9712 331.021 li
cp
0 0 0 0 cmyk
@
101.818 331.021 mo
95.9692 331.021 li
95.9692 325.17 li
101.818 325.17 li
101.818 331.021 li
cp
0 0 0 1 cmyk
f
101.818 331.021 mo
95.9692 331.021 li
95.9692 325.17 li
101.818 325.17 li
101.818 331.021 li
cp
0 0 0 0 cmyk
@
107.667 331.021 mo
101.817 331.021 li
101.817 325.17 li
107.667 325.17 li
107.667 331.021 li
cp
0 0 0 1 cmyk
f
107.667 331.021 mo
101.817 331.021 li
101.817 325.17 li
107.667 325.17 li
107.667 331.021 li
cp
0 0 0 0 cmyk
@
113.514 331.021 mo
107.665 331.021 li
107.665 325.17 li
113.514 325.17 li
113.514 331.021 li
cp
0 0 0 1 cmyk
f
113.514 331.021 mo
107.665 331.021 li
107.665 325.17 li
113.514 325.17 li
113.514 331.021 li
cp
0 0 0 0 cmyk
@
119.362 331.021 mo
113.512 331.021 li
113.512 325.17 li
119.362 325.17 li
119.362 331.021 li
cp
0 0 0 1 cmyk
f
119.362 331.021 mo
113.512 331.021 li
113.512 325.17 li
119.362 325.17 li
119.362 331.021 li
cp
0 0 0 0 cmyk
@
125.209 331.021 mo
119.36 331.021 li
119.36 325.17 li
125.209 325.17 li
125.209 331.021 li
cp
0 0 0 1 cmyk
f
125.209 331.021 mo
119.36 331.021 li
119.36 325.17 li
125.209 325.17 li
125.209 331.021 li
cp
0 0 0 0 cmyk
@
131.057 331.021 mo
125.208 331.021 li
125.208 325.17 li
131.057 325.17 li
131.057 331.021 li
cp
0 0 0 1 cmyk
f
131.057 331.021 mo
125.208 331.021 li
125.208 325.17 li
131.057 325.17 li
131.057 331.021 li
cp
0 0 0 0 cmyk
@
95.9712 325.173 mo
90.1216 325.173 li
90.1216 319.324 li
95.9712 319.324 li
95.9712 325.173 li
cp
0 0 0 1 cmyk
f
95.9712 325.173 mo
90.1216 325.173 li
90.1216 319.324 li
95.9712 319.324 li
95.9712 325.173 li
cp
0 0 0 0 cmyk
@
101.818 325.173 mo
95.9692 325.173 li
95.9692 319.324 li
101.818 319.324 li
101.818 325.173 li
cp
0 0 0 1 cmyk
f
101.818 325.173 mo
95.9692 325.173 li
95.9692 319.324 li
101.818 319.324 li
101.818 325.173 li
cp
0 0 0 0 cmyk
@
107.667 325.173 mo
101.817 325.173 li
101.817 319.324 li
107.667 319.324 li
107.667 325.173 li
cp
0 0 0 1 cmyk
f
107.667 325.173 mo
101.817 325.173 li
101.817 319.324 li
107.667 319.324 li
107.667 325.173 li
cp
0 0 0 0 cmyk
@
119.362 325.173 mo
113.512 325.173 li
113.512 319.324 li
119.362 319.324 li
119.362 325.173 li
cp
0 0 0 1 cmyk
f
119.362 325.173 mo
113.512 325.173 li
113.512 319.324 li
119.362 319.324 li
119.362 325.173 li
cp
0 0 0 0 cmyk
@
125.209 325.173 mo
119.36 325.173 li
119.36 319.324 li
125.209 319.324 li
125.209 325.173 li
cp
0 0 0 1 cmyk
f
125.209 325.173 mo
119.36 325.173 li
119.36 319.324 li
125.209 319.324 li
125.209 325.173 li
cp
0 0 0 0 cmyk
@
131.057 325.173 mo
125.208 325.173 li
125.208 319.324 li
131.057 319.324 li
131.057 325.173 li
cp
0 0 0 1 cmyk
f
131.057 325.173 mo
125.208 325.173 li
125.208 319.324 li
131.057 319.324 li
131.057 325.173 li
cp
0 0 0 0 cmyk
@
90.1235 319.326 mo
84.2739 319.326 li
84.2739 313.479 li
90.1235 313.479 li
90.1235 319.326 li
cp
0 0 0 1 cmyk
f
90.1235 319.326 mo
84.2739 319.326 li
84.2739 313.479 li
90.1235 313.479 li
90.1235 319.326 li
cp
0 0 0 0 cmyk
@
95.9712 319.326 mo
90.1216 319.326 li
90.1216 313.479 li
95.9712 313.479 li
95.9712 319.326 li
cp
0 0 0 1 cmyk
f
95.9712 319.326 mo
90.1216 319.326 li
90.1216 313.479 li
95.9712 313.479 li
95.9712 319.326 li
cp
0 0 0 0 cmyk
@
101.818 319.326 mo
95.9692 319.326 li
95.9692 313.479 li
101.818 313.479 li
101.818 319.326 li
cp
0 0 0 1 cmyk
f
101.818 319.326 mo
95.9692 319.326 li
95.9692 313.479 li
101.818 313.479 li
101.818 319.326 li
cp
0 0 0 0 cmyk
@
107.667 319.326 mo
101.817 319.326 li
101.817 313.479 li
107.667 313.479 li
107.667 319.326 li
cp
0 0 0 1 cmyk
f
107.667 319.326 mo
101.817 319.326 li
101.817 313.479 li
107.667 313.479 li
107.667 319.326 li
cp
0 0 0 0 cmyk
@
113.514 319.326 mo
107.665 319.326 li
107.665 313.479 li
113.514 313.479 li
113.514 319.326 li
cp
0 0 0 1 cmyk
f
113.514 319.326 mo
107.665 319.326 li
107.665 313.479 li
113.514 313.479 li
113.514 319.326 li
cp
0 0 0 0 cmyk
@
119.362 319.326 mo
113.512 319.326 li
113.512 313.479 li
119.362 313.479 li
119.362 319.326 li
cp
0 0 0 1 cmyk
f
119.362 319.326 mo
113.512 319.326 li
113.512 313.479 li
119.362 313.479 li
119.362 319.326 li
cp
0 0 0 0 cmyk
@
131.057 319.326 mo
125.208 319.326 li
125.208 313.479 li
131.057 313.479 li
131.057 319.326 li
cp
0 0 0 1 cmyk
f
131.057 319.326 mo
125.208 319.326 li
125.208 313.479 li
131.057 313.479 li
131.057 319.326 li
cp
0 0 0 0 cmyk
@
90.1235 313.482 mo
84.2739 313.482 li
84.2739 307.631 li
90.1235 307.631 li
90.1235 313.482 li
cp
0 0 0 1 cmyk
f
90.1235 313.482 mo
84.2739 313.482 li
84.2739 307.631 li
90.1235 307.631 li
90.1235 313.482 li
cp
0 0 0 0 cmyk
@
113.514 313.482 mo
107.665 313.482 li
107.665 307.631 li
113.514 307.631 li
113.514 313.482 li
cp
0 0 0 1 cmyk
f
113.514 313.482 mo
107.665 313.482 li
107.665 307.631 li
113.514 307.631 li
113.514 313.482 li
cp
0 0 0 0 cmyk
@
131.057 313.482 mo
125.208 313.482 li
125.208 307.631 li
131.057 307.631 li
131.057 313.482 li
cp
0 0 0 1 cmyk
f
131.057 313.482 mo
125.208 313.482 li
125.208 307.631 li
131.057 307.631 li
131.057 313.482 li
cp
0 0 0 0 cmyk
@
84.2749 342.713 mo
78.4263 342.713 li
78.4263 336.863 li
84.2749 336.863 li
84.2749 342.713 li
cp
0 0 0 1 cmyk
f
84.2749 342.713 mo
78.4263 342.713 li
78.4263 336.863 li
84.2749 336.863 li
84.2749 342.713 li
cp
0 0 0 0 cmyk
@
84.2749 336.867 mo
78.4263 336.867 li
78.4263 331.018 li
84.2749 331.018 li
84.2749 336.867 li
cp
0 0 0 1 cmyk
f
84.2749 336.867 mo
78.4263 336.867 li
78.4263 331.018 li
84.2749 331.018 li
84.2749 336.867 li
cp
0 0 0 0 cmyk
@
84.2749 331.021 mo
78.4263 331.021 li
78.4263 325.17 li
84.2749 325.17 li
84.2749 331.021 li
cp
0 0 0 1 cmyk
f
84.2749 331.021 mo
78.4263 331.021 li
78.4263 325.17 li
84.2749 325.17 li
84.2749 331.021 li
cp
0 0 0 0 cmyk
@
84.2749 325.173 mo
78.4263 325.173 li
78.4263 319.324 li
84.2749 319.324 li
84.2749 325.173 li
cp
0 0 0 1 cmyk
f
84.2749 325.173 mo
78.4263 325.173 li
78.4263 319.324 li
84.2749 319.324 li
84.2749 325.173 li
cp
0 0 0 0 cmyk
@
84.2749 319.326 mo
78.4263 319.326 li
78.4263 313.479 li
84.2749 313.479 li
84.2749 319.326 li
cp
0 0 0 1 cmyk
f
84.2749 319.326 mo
78.4263 319.326 li
78.4263 313.479 li
84.2749 313.479 li
84.2749 319.326 li
cp
0 0 0 0 cmyk
@
84.2749 307.636 mo
78.4263 307.636 li
78.4263 301.787 li
84.2749 301.787 li
84.2749 307.636 li
cp
0 0 0 1 cmyk
f
84.2749 307.636 mo
78.4263 307.636 li
78.4263 301.787 li
84.2749 301.787 li
84.2749 307.636 li
cp
0 0 0 0 cmyk
@
78.4282 348.558 mo
72.5786 348.558 li
72.5786 342.71 li
78.4282 342.71 li
78.4282 348.558 li
cp
0 0 0 1 cmyk
f
78.4282 348.558 mo
72.5786 348.558 li
72.5786 342.71 li
78.4282 342.71 li
78.4282 348.558 li
cp
0 0 0 0 cmyk
@
78.4282 336.867 mo
72.5786 336.867 li
72.5786 331.018 li
78.4282 331.018 li
78.4282 336.867 li
cp
0 0 0 1 cmyk
f
78.4282 336.867 mo
72.5786 336.867 li
72.5786 331.018 li
78.4282 331.018 li
78.4282 336.867 li
cp
0 0 0 0 cmyk
@
78.4282 331.021 mo
72.5786 331.021 li
72.5786 325.17 li
78.4282 325.17 li
78.4282 331.021 li
cp
0 0 0 1 cmyk
f
78.4282 331.021 mo
72.5786 331.021 li
72.5786 325.17 li
78.4282 325.17 li
78.4282 331.021 li
cp
0 0 0 0 cmyk
@
78.4282 325.173 mo
72.5786 325.173 li
72.5786 319.324 li
78.4282 319.324 li
78.4282 325.173 li
cp
0 0 0 1 cmyk
f
78.4282 325.173 mo
72.5786 325.173 li
72.5786 319.324 li
78.4282 319.324 li
78.4282 325.173 li
cp
0 0 0 0 cmyk
@
72.5806 331.021 mo
66.731 331.021 li
66.731 325.17 li
72.5806 325.17 li
72.5806 331.021 li
cp
0 0 0 1 cmyk
f
72.5806 331.021 mo
66.731 331.021 li
66.731 325.17 li
72.5806 325.17 li
72.5806 331.021 li
cp
0 0 0 0 cmyk
@
72.5806 325.173 mo
66.731 325.173 li
66.731 319.324 li
72.5806 319.324 li
72.5806 325.173 li
cp
0 0 0 1 cmyk
f
72.5806 325.173 mo
66.731 325.173 li
66.731 319.324 li
72.5806 319.324 li
72.5806 325.173 li
cp
0 0 0 0 cmyk
@
72.5806 319.326 mo
66.731 319.326 li
66.731 313.479 li
72.5806 313.479 li
72.5806 319.326 li
cp
0 0 0 1 cmyk
f
72.5806 319.326 mo
66.731 319.326 li
66.731 313.479 li
72.5806 313.479 li
72.5806 319.326 li
cp
0 0 0 0 cmyk
@
72.5806 313.482 mo
66.731 313.482 li
66.731 307.631 li
72.5806 307.631 li
72.5806 313.482 li
cp
0 0 0 1 cmyk
f
72.5806 313.482 mo
66.731 313.482 li
66.731 307.631 li
72.5806 307.631 li
72.5806 313.482 li
cp
0 0 0 0 cmyk
@
119.362 307.636 mo
113.512 307.636 li
113.512 301.787 li
119.362 301.787 li
119.362 307.636 li
cp
0 0 0 1 cmyk
f
119.362 307.636 mo
113.512 307.636 li
113.512 301.787 li
119.362 301.787 li
119.362 307.636 li
cp
0 0 0 0 cmyk
@
55.0391 195.898 mo
47.0625 195.898 li
47.0625 187.922 li
55.0391 187.922 li
55.0391 195.898 li
cp
0 0 0 1 cmyk
f
2.25 lw
55.0391 195.898 mo
47.0625 195.898 li
47.0625 187.922 li
55.0391 187.922 li
55.0391 195.898 li
cp
0 0 0 0 cmyk
@
63.0127 195.898 mo
55.0371 195.898 li
55.0371 187.922 li
63.0127 187.922 li
63.0127 195.898 li
cp
0 0 0 1 cmyk
f
63.0127 195.898 mo
55.0371 195.898 li
55.0371 187.922 li
63.0127 187.922 li
63.0127 195.898 li
cp
0 0 0 0 cmyk
@
70.9863 187.926 mo
63.0107 187.926 li
63.0107 179.951 li
70.9863 179.951 li
70.9863 187.926 li
cp
0 0 0 1 cmyk
f
70.9863 187.926 mo
63.0107 187.926 li
63.0107 179.951 li
70.9863 179.951 li
70.9863 187.926 li
cp
0 0 0 0 cmyk
@
78.96 187.926 mo
70.9854 187.926 li
70.9854 179.951 li
78.96 179.951 li
78.96 187.926 li
cp
0 0 0 1 cmyk
f
78.96 187.926 mo
70.9854 187.926 li
70.9854 179.951 li
78.96 179.951 li
78.96 187.926 li
cp
0 0 0 0 cmyk
@
94.9072 187.926 mo
86.9326 187.926 li
86.9326 179.951 li
94.9072 179.951 li
94.9072 187.926 li
cp
0 0 0 1 cmyk
f
94.9072 187.926 mo
86.9326 187.926 li
86.9326 179.951 li
94.9072 179.951 li
94.9072 187.926 li
cp
0 0 0 0 cmyk
@
102.882 187.926 mo
94.9063 187.926 li
94.9063 179.951 li
102.882 179.951 li
102.882 187.926 li
cp
0 0 0 1 cmyk
f
102.882 187.926 mo
94.9063 187.926 li
94.9063 179.951 li
102.882 179.951 li
102.882 187.926 li
cp
0 0 0 0 cmyk
@
78.96 179.954 mo
70.9854 179.954 li
70.9854 171.979 li
78.96 171.979 li
78.96 179.954 li
cp
0 0 0 1 cmyk
f
78.96 179.954 mo
70.9854 179.954 li
70.9854 171.979 li
78.96 171.979 li
78.96 179.954 li
cp
0 0 0 0 cmyk
@
86.9336 179.954 mo
78.958 179.954 li
78.958 171.979 li
86.9336 171.979 li
86.9336 179.954 li
cp
0 0 0 1 cmyk
f
86.9336 179.954 mo
78.958 179.954 li
78.958 171.979 li
86.9336 171.979 li
86.9336 179.954 li
cp
0 0 0 0 cmyk
@
110.856 179.954 mo
102.88 179.954 li
102.88 171.979 li
110.856 171.979 li
110.856 179.954 li
cp
0 0 0 1 cmyk
f
110.856 179.954 mo
102.88 179.954 li
102.88 171.979 li
110.856 171.979 li
110.856 179.954 li
cp
0 0 0 0 cmyk
@
55.0391 171.982 mo
47.0625 171.982 li
47.0625 164.006 li
55.0391 164.006 li
55.0391 171.982 li
cp
0 0 0 1 cmyk
f
55.0391 171.982 mo
47.0625 171.982 li
47.0625 164.006 li
55.0391 164.006 li
55.0391 171.982 li
cp
0 0 0 0 cmyk
@
63.0127 171.982 mo
55.0371 171.982 li
55.0371 164.006 li
63.0127 164.006 li
63.0127 171.982 li
cp
0 0 0 1 cmyk
f
63.0127 171.982 mo
55.0371 171.982 li
55.0371 164.006 li
63.0127 164.006 li
63.0127 171.982 li
cp
0 0 0 0 cmyk
@
70.9863 171.982 mo
63.0107 171.982 li
63.0107 164.006 li
70.9863 164.006 li
70.9863 171.982 li
cp
0 0 0 1 cmyk
f
70.9863 171.982 mo
63.0107 171.982 li
63.0107 164.006 li
70.9863 164.006 li
70.9863 171.982 li
cp
0 0 0 0 cmyk
@
78.96 171.982 mo
70.9854 171.982 li
70.9854 164.006 li
78.96 164.006 li
78.96 171.982 li
cp
0 0 0 1 cmyk
f
78.96 171.982 mo
70.9854 171.982 li
70.9854 164.006 li
78.96 164.006 li
78.96 171.982 li
cp
0 0 0 0 cmyk
@
86.9336 171.982 mo
78.958 171.982 li
78.958 164.006 li
86.9336 164.006 li
86.9336 171.982 li
cp
0 0 0 1 cmyk
f
86.9336 171.982 mo
78.958 171.982 li
78.958 164.006 li
86.9336 164.006 li
86.9336 171.982 li
cp
0 0 0 0 cmyk
@
94.9072 171.982 mo
86.9326 171.982 li
86.9326 164.006 li
94.9072 164.006 li
94.9072 171.982 li
cp
0 0 0 1 cmyk
f
94.9072 171.982 mo
86.9326 171.982 li
86.9326 164.006 li
94.9072 164.006 li
94.9072 171.982 li
cp
0 0 0 0 cmyk
@
102.882 171.982 mo
94.9063 171.982 li
94.9063 164.006 li
102.882 164.006 li
102.882 171.982 li
cp
0 0 0 1 cmyk
f
102.882 171.982 mo
94.9063 171.982 li
94.9063 164.006 li
102.882 164.006 li
102.882 171.982 li
cp
0 0 0 0 cmyk
@
110.856 171.982 mo
102.88 171.982 li
102.88 164.006 li
110.856 164.006 li
110.856 171.982 li
cp
0 0 0 1 cmyk
f
110.856 171.982 mo
102.88 171.982 li
102.88 164.006 li
110.856 164.006 li
110.856 171.982 li
cp
0 0 0 0 cmyk
@
55.0391 164.011 mo
47.0625 164.011 li
47.0625 156.035 li
55.0391 156.035 li
55.0391 164.011 li
cp
0 0 0 1 cmyk
f
55.0391 164.011 mo
47.0625 164.011 li
47.0625 156.035 li
55.0391 156.035 li
55.0391 164.011 li
cp
0 0 0 0 cmyk
@
63.0127 164.011 mo
55.0371 164.011 li
55.0371 156.035 li
63.0127 156.035 li
63.0127 164.011 li
cp
0 0 0 1 cmyk
f
63.0127 164.011 mo
55.0371 164.011 li
55.0371 156.035 li
63.0127 156.035 li
63.0127 164.011 li
cp
0 0 0 0 cmyk
@
70.9863 164.011 mo
63.0107 164.011 li
63.0107 156.035 li
70.9863 156.035 li
70.9863 164.011 li
cp
0 0 0 1 cmyk
f
70.9863 164.011 mo
63.0107 164.011 li
63.0107 156.035 li
70.9863 156.035 li
70.9863 164.011 li
cp
0 0 0 0 cmyk
@
94.9072 164.011 mo
86.9326 164.011 li
86.9326 156.035 li
94.9072 156.035 li
94.9072 164.011 li
cp
0 0 0 1 cmyk
f
94.9072 164.011 mo
86.9326 164.011 li
86.9326 156.035 li
94.9072 156.035 li
94.9072 164.011 li
cp
0 0 0 0 cmyk
@
102.882 164.011 mo
94.9063 164.011 li
94.9063 156.035 li
102.882 156.035 li
102.882 164.011 li
cp
0 0 0 1 cmyk
f
102.882 164.011 mo
94.9063 164.011 li
94.9063 156.035 li
102.882 156.035 li
102.882 164.011 li
cp
0 0 0 0 cmyk
@
55.0391 156.039 mo
47.0625 156.039 li
47.0625 148.063 li
55.0391 148.063 li
55.0391 156.039 li
cp
0 0 0 1 cmyk
f
55.0391 156.039 mo
47.0625 156.039 li
47.0625 148.063 li
55.0391 148.063 li
55.0391 156.039 li
cp
0 0 0 0 cmyk
@
63.0127 156.039 mo
55.0371 156.039 li
55.0371 148.063 li
63.0127 148.063 li
63.0127 156.039 li
cp
0 0 0 1 cmyk
f
63.0127 156.039 mo
55.0371 156.039 li
55.0371 148.063 li
63.0127 148.063 li
63.0127 156.039 li
cp
0 0 0 0 cmyk
@
70.9863 156.039 mo
63.0107 156.039 li
63.0107 148.063 li
70.9863 148.063 li
70.9863 156.039 li
cp
0 0 0 1 cmyk
f
70.9863 156.039 mo
63.0107 156.039 li
63.0107 148.063 li
70.9863 148.063 li
70.9863 156.039 li
cp
0 0 0 0 cmyk
@
78.96 156.039 mo
70.9854 156.039 li
70.9854 148.063 li
78.96 148.063 li
78.96 156.039 li
cp
0 0 0 1 cmyk
f
78.96 156.039 mo
70.9854 156.039 li
70.9854 148.063 li
78.96 148.063 li
78.96 156.039 li
cp
0 0 0 0 cmyk
@
86.9336 156.039 mo
78.958 156.039 li
78.958 148.063 li
86.9336 148.063 li
86.9336 156.039 li
cp
0 0 0 1 cmyk
f
86.9336 156.039 mo
78.958 156.039 li
78.958 148.063 li
86.9336 148.063 li
86.9336 156.039 li
cp
0 0 0 0 cmyk
@
94.9072 156.039 mo
86.9326 156.039 li
86.9326 148.063 li
94.9072 148.063 li
94.9072 156.039 li
cp
0 0 0 1 cmyk
f
94.9072 156.039 mo
86.9326 156.039 li
86.9326 148.063 li
94.9072 148.063 li
94.9072 156.039 li
cp
0 0 0 0 cmyk
@
102.882 156.039 mo
94.9063 156.039 li
94.9063 148.063 li
102.882 148.063 li
102.882 156.039 li
cp
0 0 0 1 cmyk
f
102.882 156.039 mo
94.9063 156.039 li
94.9063 148.063 li
102.882 148.063 li
102.882 156.039 li
cp
0 0 0 0 cmyk
@
110.856 156.039 mo
102.88 156.039 li
102.88 148.063 li
110.856 148.063 li
110.856 156.039 li
cp
0 0 0 1 cmyk
f
110.856 156.039 mo
102.88 156.039 li
102.88 148.063 li
110.856 148.063 li
110.856 156.039 li
cp
0 0 0 0 cmyk
@
63.0127 148.066 mo
55.0371 148.066 li
55.0371 140.092 li
63.0127 140.092 li
63.0127 148.066 li
cp
0 0 0 1 cmyk
f
63.0127 148.066 mo
55.0371 148.066 li
55.0371 140.092 li
63.0127 140.092 li
63.0127 148.066 li
cp
0 0 0 0 cmyk
@
70.9863 148.066 mo
63.0107 148.066 li
63.0107 140.092 li
70.9863 140.092 li
70.9863 148.066 li
cp
0 0 0 1 cmyk
f
70.9863 148.066 mo
63.0107 148.066 li
63.0107 140.092 li
70.9863 140.092 li
70.9863 148.066 li
cp
0 0 0 0 cmyk
@
78.96 148.066 mo
70.9854 148.066 li
70.9854 140.092 li
78.96 140.092 li
78.96 148.066 li
cp
0 0 0 1 cmyk
f
78.96 148.066 mo
70.9854 148.066 li
70.9854 140.092 li
78.96 140.092 li
78.96 148.066 li
cp
0 0 0 0 cmyk
@
86.9336 148.066 mo
78.958 148.066 li
78.958 140.092 li
86.9336 140.092 li
86.9336 148.066 li
cp
0 0 0 1 cmyk
f
86.9336 148.066 mo
78.958 148.066 li
78.958 140.092 li
86.9336 140.092 li
86.9336 148.066 li
cp
0 0 0 0 cmyk
@
94.9072 148.066 mo
86.9326 148.066 li
86.9326 140.092 li
94.9072 140.092 li
94.9072 148.066 li
cp
0 0 0 1 cmyk
f
94.9072 148.066 mo
86.9326 148.066 li
86.9326 140.092 li
94.9072 140.092 li
94.9072 148.066 li
cp
0 0 0 0 cmyk
@
102.882 148.066 mo
94.9063 148.066 li
94.9063 140.092 li
102.882 140.092 li
102.882 148.066 li
cp
0 0 0 1 cmyk
f
102.882 148.066 mo
94.9063 148.066 li
94.9063 140.092 li
102.882 140.092 li
102.882 148.066 li
cp
0 0 0 0 cmyk
@
110.856 148.066 mo
102.88 148.066 li
102.88 140.092 li
110.856 140.092 li
110.856 148.066 li
cp
0 0 0 1 cmyk
f
110.856 148.066 mo
102.88 148.066 li
102.88 140.092 li
110.856 140.092 li
110.856 148.066 li
cp
0 0 0 0 cmyk
@
86.9336 140.096 mo
78.958 140.096 li
78.958 132.119 li
86.9336 132.119 li
86.9336 140.096 li
cp
0 0 0 1 cmyk
f
86.9336 140.096 mo
78.958 140.096 li
78.958 132.119 li
86.9336 132.119 li
86.9336 140.096 li
cp
0 0 0 0 cmyk
@
94.9072 140.096 mo
86.9326 140.096 li
86.9326 132.119 li
94.9072 132.119 li
94.9072 140.096 li
cp
0 0 0 1 cmyk
f
94.9072 140.096 mo
86.9326 140.096 li
86.9326 132.119 li
94.9072 132.119 li
94.9072 140.096 li
cp
0 0 0 0 cmyk
@
102.882 140.096 mo
94.9063 140.096 li
94.9063 132.119 li
102.882 132.119 li
102.882 140.096 li
cp
0 0 0 1 cmyk
f
102.882 140.096 mo
94.9063 140.096 li
94.9063 132.119 li
102.882 132.119 li
102.882 140.096 li
cp
0 0 0 0 cmyk
@
110.856 140.096 mo
102.88 140.096 li
102.88 132.119 li
110.856 132.119 li
110.856 140.096 li
cp
0 0 0 1 cmyk
f
110.856 140.096 mo
102.88 140.096 li
102.88 132.119 li
110.856 132.119 li
110.856 140.096 li
cp
0 0 0 0 cmyk
@
118.829 187.926 mo
110.854 187.926 li
110.854 179.951 li
118.829 179.951 li
118.829 187.926 li
cp
0 0 0 1 cmyk
f
118.829 187.926 mo
110.854 187.926 li
110.854 179.951 li
118.829 179.951 li
118.829 187.926 li
cp
0 0 0 0 cmyk
@
118.829 179.954 mo
110.854 179.954 li
110.854 171.979 li
118.829 171.979 li
118.829 179.954 li
cp
0 0 0 1 cmyk
f
118.829 179.954 mo
110.854 179.954 li
110.854 171.979 li
118.829 171.979 li
118.829 179.954 li
cp
0 0 0 0 cmyk
@
118.829 171.982 mo
110.854 171.982 li
110.854 164.006 li
118.829 164.006 li
118.829 171.982 li
cp
0 0 0 1 cmyk
f
118.829 171.982 mo
110.854 171.982 li
110.854 164.006 li
118.829 164.006 li
118.829 171.982 li
cp
0 0 0 0 cmyk
@
118.829 156.039 mo
110.854 156.039 li
110.854 148.063 li
118.829 148.063 li
118.829 156.039 li
cp
0 0 0 1 cmyk
f
118.829 156.039 mo
110.854 156.039 li
110.854 148.063 li
118.829 148.063 li
118.829 156.039 li
cp
0 0 0 0 cmyk
@
118.829 148.066 mo
110.854 148.066 li
110.854 140.092 li
118.829 140.092 li
118.829 148.066 li
cp
0 0 0 1 cmyk
f
118.829 148.066 mo
110.854 148.066 li
110.854 140.092 li
118.829 140.092 li
118.829 148.066 li
cp
0 0 0 0 cmyk
@
126.803 187.926 mo
118.827 187.926 li
118.827 179.951 li
126.803 179.951 li
126.803 187.926 li
cp
0 0 0 1 cmyk
f
126.803 187.926 mo
118.827 187.926 li
118.827 179.951 li
126.803 179.951 li
126.803 187.926 li
cp
0 0 0 0 cmyk
@
126.803 171.982 mo
118.827 171.982 li
118.827 164.006 li
126.803 164.006 li
126.803 171.982 li
cp
0 0 0 1 cmyk
f
126.803 171.982 mo
118.827 171.982 li
118.827 164.006 li
126.803 164.006 li
126.803 171.982 li
cp
0 0 0 0 cmyk
@
126.803 164.011 mo
118.827 164.011 li
118.827 156.035 li
126.803 156.035 li
126.803 164.011 li
cp
0 0 0 1 cmyk
f
126.803 164.011 mo
118.827 164.011 li
118.827 156.035 li
126.803 156.035 li
126.803 164.011 li
cp
0 0 0 0 cmyk
@
126.803 156.039 mo
118.827 156.039 li
118.827 148.063 li
126.803 148.063 li
126.803 156.039 li
cp
0 0 0 1 cmyk
f
126.803 156.039 mo
118.827 156.039 li
118.827 148.063 li
126.803 148.063 li
126.803 156.039 li
cp
0 0 0 0 cmyk
@
126.803 148.066 mo
118.827 148.066 li
118.827 140.092 li
126.803 140.092 li
126.803 148.066 li
cp
0 0 0 1 cmyk
f
126.803 148.066 mo
118.827 148.066 li
118.827 140.092 li
126.803 140.092 li
126.803 148.066 li
cp
0 0 0 0 cmyk
@
134.777 195.898 mo
126.801 195.898 li
126.801 187.922 li
134.777 187.922 li
134.777 195.898 li
cp
0 0 0 1 cmyk
f
134.777 195.898 mo
126.801 195.898 li
126.801 187.922 li
134.777 187.922 li
134.777 195.898 li
cp
0 0 0 0 cmyk
@
134.777 171.982 mo
126.801 171.982 li
126.801 164.006 li
134.777 164.006 li
134.777 171.982 li
cp
0 0 0 1 cmyk
f
134.777 171.982 mo
126.801 171.982 li
126.801 164.006 li
134.777 164.006 li
134.777 171.982 li
cp
0 0 0 0 cmyk
@
134.777 164.011 mo
126.801 164.011 li
126.801 156.035 li
134.777 156.035 li
134.777 164.011 li
cp
0 0 0 1 cmyk
f
134.777 164.011 mo
126.801 164.011 li
126.801 156.035 li
134.777 156.035 li
134.777 164.011 li
cp
0 0 0 0 cmyk
@
134.777 156.039 mo
126.801 156.039 li
126.801 148.063 li
134.777 148.063 li
134.777 156.039 li
cp
0 0 0 1 cmyk
f
134.777 156.039 mo
126.801 156.039 li
126.801 148.063 li
134.777 148.063 li
134.777 156.039 li
cp
0 0 0 0 cmyk
@
134.777 148.066 mo
126.801 148.066 li
126.801 140.092 li
134.777 140.092 li
134.777 148.066 li
cp
0 0 0 1 cmyk
f
134.777 148.066 mo
126.801 148.066 li
126.801 140.092 li
134.777 140.092 li
134.777 148.066 li
cp
0 0 0 0 cmyk
@
142.751 195.898 mo
134.775 195.898 li
134.775 187.922 li
142.751 187.922 li
142.751 195.898 li
cp
0 0 0 1 cmyk
f
142.751 195.898 mo
134.775 195.898 li
134.775 187.922 li
142.751 187.922 li
142.751 195.898 li
cp
0 0 0 0 cmyk
@
142.751 171.982 mo
134.775 171.982 li
134.775 164.006 li
142.751 164.006 li
142.751 171.982 li
cp
0 0 0 1 cmyk
f
142.751 171.982 mo
134.775 171.982 li
134.775 164.006 li
142.751 164.006 li
142.751 171.982 li
cp
0 0 0 0 cmyk
@
142.751 164.011 mo
134.775 164.011 li
134.775 156.035 li
142.751 156.035 li
142.751 164.011 li
cp
0 0 0 1 cmyk
f
142.751 164.011 mo
134.775 164.011 li
134.775 156.035 li
142.751 156.035 li
142.751 164.011 li
cp
0 0 0 0 cmyk
@
142.751 156.039 mo
134.775 156.039 li
134.775 148.063 li
142.751 148.063 li
142.751 156.039 li
cp
0 0 0 1 cmyk
f
142.751 156.039 mo
134.775 156.039 li
134.775 148.063 li
142.751 148.063 li
142.751 156.039 li
cp
0 0 0 0 cmyk
@
263.997 129.023 mo
256.022 129.023 li
256.022 121.047 li
263.997 121.047 li
263.997 129.023 li
cp
0 0 0 1 cmyk
f
263.997 129.023 mo
256.022 129.023 li
256.022 121.047 li
263.997 121.047 li
263.997 129.023 li
cp
0 0 0 0 cmyk
@
279.94 129.023 mo
271.966 129.023 li
271.966 121.047 li
279.94 121.047 li
279.94 129.023 li
cp
0 0 0 1 cmyk
f
279.94 129.023 mo
271.966 129.023 li
271.966 121.047 li
279.94 121.047 li
279.94 129.023 li
cp
0 0 0 0 cmyk
@
303.858 129.023 mo
295.884 129.023 li
295.884 121.047 li
303.858 121.047 li
303.858 129.023 li
cp
0 0 0 1 cmyk
f
303.858 129.023 mo
295.884 129.023 li
295.884 121.047 li
303.858 121.047 li
303.858 129.023 li
cp
0 0 0 0 cmyk
@
319.803 129.023 mo
311.829 129.023 li
311.829 121.047 li
319.803 121.047 li
319.803 129.023 li
cp
0 0 0 1 cmyk
f
319.803 129.023 mo
311.829 129.023 li
311.829 121.047 li
319.803 121.047 li
319.803 129.023 li
cp
0 0 0 0 cmyk
@
271.97 121.05 mo
263.994 121.05 li
263.994 113.075 li
271.97 113.075 li
271.97 121.05 li
cp
0 0 0 1 cmyk
f
271.97 121.05 mo
263.994 121.05 li
263.994 113.075 li
271.97 113.075 li
271.97 121.05 li
cp
0 0 0 0 cmyk
@
287.914 121.05 mo
279.94 121.05 li
279.94 113.075 li
287.914 113.075 li
287.914 121.05 li
cp
0 0 0 1 cmyk
f
287.914 121.05 mo
279.94 121.05 li
279.94 113.075 li
287.914 113.075 li
287.914 121.05 li
cp
0 0 0 0 cmyk
@
295.886 121.05 mo
287.911 121.05 li
287.911 113.075 li
295.886 113.075 li
295.886 121.05 li
cp
0 0 0 1 cmyk
f
295.886 121.05 mo
287.911 121.05 li
287.911 113.075 li
295.886 113.075 li
295.886 121.05 li
cp
0 0 0 0 cmyk
@
311.83 121.05 mo
303.854 121.05 li
303.854 113.075 li
311.83 113.075 li
311.83 121.05 li
cp
0 0 0 1 cmyk
f
311.83 121.05 mo
303.854 121.05 li
303.854 113.075 li
311.83 113.075 li
311.83 121.05 li
cp
0 0 0 0 cmyk
@
279.94 113.078 mo
271.966 113.078 li
271.966 105.104 li
279.94 105.104 li
279.94 113.078 li
cp
0 0 0 1 cmyk
f
279.94 113.078 mo
271.966 113.078 li
271.966 105.104 li
279.94 105.104 li
279.94 113.078 li
cp
0 0 0 0 cmyk
@
303.858 113.078 mo
295.884 113.078 li
295.884 105.104 li
303.858 105.104 li
303.858 113.078 li
cp
0 0 0 1 cmyk
f
303.858 113.078 mo
295.884 113.078 li
295.884 105.104 li
303.858 105.104 li
303.858 113.078 li
cp
0 0 0 0 cmyk
@
263.997 105.107 mo
256.022 105.107 li
256.022 97.1309 li
263.997 97.1309 li
263.997 105.107 li
cp
0 0 0 1 cmyk
f
263.997 105.107 mo
256.022 105.107 li
256.022 97.1309 li
263.997 97.1309 li
263.997 105.107 li
cp
0 0 0 0 cmyk
@
271.97 105.107 mo
263.994 105.107 li
263.994 97.1309 li
271.97 97.1309 li
271.97 105.107 li
cp
0 0 0 1 cmyk
f
271.97 105.107 mo
263.994 105.107 li
263.994 97.1309 li
271.97 97.1309 li
271.97 105.107 li
cp
0 0 0 0 cmyk
@
279.94 105.107 mo
271.966 105.107 li
271.966 97.1309 li
279.94 97.1309 li
279.94 105.107 li
cp
0 0 0 1 cmyk
f
279.94 105.107 mo
271.966 105.107 li
271.966 97.1309 li
279.94 97.1309 li
279.94 105.107 li
cp
0 0 0 0 cmyk
@
287.914 105.107 mo
279.94 105.107 li
279.94 97.1309 li
287.914 97.1309 li
287.914 105.107 li
cp
0 0 0 1 cmyk
f
287.914 105.107 mo
279.94 105.107 li
279.94 97.1309 li
287.914 97.1309 li
287.914 105.107 li
cp
0 0 0 0 cmyk
@
295.886 105.107 mo
287.911 105.107 li
287.911 97.1309 li
295.886 97.1309 li
295.886 105.107 li
cp
0 0 0 1 cmyk
f
295.886 105.107 mo
287.911 105.107 li
287.911 97.1309 li
295.886 97.1309 li
295.886 105.107 li
cp
0 0 0 0 cmyk
@
303.858 105.107 mo
295.884 105.107 li
295.884 97.1309 li
303.858 97.1309 li
303.858 105.107 li
cp
0 0 0 1 cmyk
f
303.858 105.107 mo
295.884 105.107 li
295.884 97.1309 li
303.858 97.1309 li
303.858 105.107 li
cp
0 0 0 0 cmyk
@
311.83 105.107 mo
303.854 105.107 li
303.854 97.1309 li
311.83 97.1309 li
311.83 105.107 li
cp
0 0 0 1 cmyk
f
311.83 105.107 mo
303.854 105.107 li
303.854 97.1309 li
311.83 97.1309 li
311.83 105.107 li
cp
0 0 0 0 cmyk
@
319.803 105.107 mo
311.829 105.107 li
311.829 97.1309 li
319.803 97.1309 li
319.803 105.107 li
cp
0 0 0 1 cmyk
f
319.803 105.107 mo
311.829 105.107 li
311.829 97.1309 li
319.803 97.1309 li
319.803 105.107 li
cp
0 0 0 0 cmyk
@
263.997 97.1338 mo
256.022 97.1338 li
256.022 89.1582 li
263.997 89.1582 li
263.997 97.1338 li
cp
0 0 0 1 cmyk
f
263.997 97.1338 mo
256.022 97.1338 li
256.022 89.1582 li
263.997 89.1582 li
263.997 97.1338 li
cp
0 0 0 0 cmyk
@
271.97 97.1338 mo
263.994 97.1338 li
263.994 89.1582 li
271.97 89.1582 li
271.97 97.1338 li
cp
0 0 0 1 cmyk
f
271.97 97.1338 mo
263.994 97.1338 li
263.994 89.1582 li
271.97 89.1582 li
271.97 97.1338 li
cp
0 0 0 0 cmyk
@
287.914 97.1338 mo
279.94 97.1338 li
279.94 89.1582 li
287.914 89.1582 li
287.914 97.1338 li
cp
0 0 0 1 cmyk
f
287.914 97.1338 mo
279.94 97.1338 li
279.94 89.1582 li
287.914 89.1582 li
287.914 97.1338 li
cp
0 0 0 0 cmyk
@
295.886 97.1338 mo
287.911 97.1338 li
287.911 89.1582 li
295.886 89.1582 li
295.886 97.1338 li
cp
0 0 0 1 cmyk
f
295.886 97.1338 mo
287.911 97.1338 li
287.911 89.1582 li
295.886 89.1582 li
295.886 97.1338 li
cp
0 0 0 0 cmyk
@
311.83 97.1338 mo
303.854 97.1338 li
303.854 89.1582 li
311.83 89.1582 li
311.83 97.1338 li
cp
0 0 0 1 cmyk
f
311.83 97.1338 mo
303.854 97.1338 li
303.854 89.1582 li
311.83 89.1582 li
311.83 97.1338 li
cp
0 0 0 0 cmyk
@
319.803 97.1338 mo
311.829 97.1338 li
311.829 89.1582 li
319.803 89.1582 li
319.803 97.1338 li
cp
0 0 0 1 cmyk
f
319.803 97.1338 mo
311.829 97.1338 li
311.829 89.1582 li
319.803 89.1582 li
319.803 97.1338 li
cp
0 0 0 0 cmyk
@
271.97 89.1621 mo
263.994 89.1621 li
263.994 81.1875 li
271.97 81.1875 li
271.97 89.1621 li
cp
0 0 0 1 cmyk
f
271.97 89.1621 mo
263.994 89.1621 li
263.994 81.1875 li
271.97 81.1875 li
271.97 89.1621 li
cp
0 0 0 0 cmyk
@
279.94 89.1621 mo
271.966 89.1621 li
271.966 81.1875 li
279.94 81.1875 li
279.94 89.1621 li
cp
0 0 0 1 cmyk
f
279.94 89.1621 mo
271.966 89.1621 li
271.966 81.1875 li
279.94 81.1875 li
279.94 89.1621 li
cp
0 0 0 0 cmyk
@
287.914 89.1621 mo
279.94 89.1621 li
279.94 81.1875 li
287.914 81.1875 li
287.914 89.1621 li
cp
0 0 0 1 cmyk
f
287.914 89.1621 mo
279.94 89.1621 li
279.94 81.1875 li
287.914 81.1875 li
287.914 89.1621 li
cp
0 0 0 0 cmyk
@
295.886 89.1621 mo
287.911 89.1621 li
287.911 81.1875 li
295.886 81.1875 li
295.886 89.1621 li
cp
0 0 0 1 cmyk
f
295.886 89.1621 mo
287.911 89.1621 li
287.911 81.1875 li
295.886 81.1875 li
295.886 89.1621 li
cp
0 0 0 0 cmyk
@
303.858 89.1621 mo
295.884 89.1621 li
295.884 81.1875 li
303.858 81.1875 li
303.858 89.1621 li
cp
0 0 0 1 cmyk
f
303.858 89.1621 mo
295.884 89.1621 li
295.884 81.1875 li
303.858 81.1875 li
303.858 89.1621 li
cp
0 0 0 0 cmyk
@
311.83 89.1621 mo
303.854 89.1621 li
303.854 81.1875 li
311.83 81.1875 li
311.83 89.1621 li
cp
0 0 0 1 cmyk
f
311.83 89.1621 mo
303.854 89.1621 li
303.854 81.1875 li
311.83 81.1875 li
311.83 89.1621 li
cp
0 0 0 0 cmyk
@
279.94 81.1904 mo
271.966 81.1904 li
271.966 73.2148 li
279.94 73.2148 li
279.94 81.1904 li
cp
0 0 0 1 cmyk
f
279.94 81.1904 mo
271.966 81.1904 li
271.966 73.2148 li
279.94 73.2148 li
279.94 81.1904 li
cp
0 0 0 0 cmyk
@
287.914 81.1904 mo
279.94 81.1904 li
279.94 73.2148 li
287.914 73.2148 li
287.914 81.1904 li
cp
0 0 0 1 cmyk
f
287.914 81.1904 mo
279.94 81.1904 li
279.94 73.2148 li
287.914 73.2148 li
287.914 81.1904 li
cp
0 0 0 0 cmyk
@
295.886 81.1904 mo
287.911 81.1904 li
287.911 73.2148 li
295.886 73.2148 li
295.886 81.1904 li
cp
0 0 0 1 cmyk
f
295.886 81.1904 mo
287.911 81.1904 li
287.911 73.2148 li
295.886 73.2148 li
295.886 81.1904 li
cp
0 0 0 0 cmyk
@
303.858 81.1904 mo
295.884 81.1904 li
295.884 73.2148 li
303.858 73.2148 li
303.858 81.1904 li
cp
0 0 0 1 cmyk
f
303.858 81.1904 mo
295.884 81.1904 li
295.884 73.2148 li
303.858 73.2148 li
303.858 81.1904 li
cp
0 0 0 0 cmyk
@
287.914 73.2188 mo
279.94 73.2188 li
279.94 65.2432 li
287.914 65.2432 li
287.914 73.2188 li
cp
0 0 0 1 cmyk
f
287.914 73.2188 mo
279.94 73.2188 li
279.94 65.2432 li
287.914 65.2432 li
287.914 73.2188 li
cp
0 0 0 0 cmyk
@
295.886 73.2188 mo
287.911 73.2188 li
287.911 65.2432 li
295.886 65.2432 li
295.886 73.2188 li
cp
0 0 0 1 cmyk
f
295.886 73.2188 mo
287.911 73.2188 li
287.911 65.2432 li
295.886 65.2432 li
295.886 73.2188 li
cp
0 0 0 0 cmyk
@
463.989 161.709 mo
457.079 161.709 li
457.079 154.796 li
463.989 154.796 li
463.989 161.709 li
cp
0 0 0 1 cmyk
f
1.95 lw
463.989 161.709 mo
457.079 161.709 li
457.079 154.796 li
463.989 154.796 li
463.989 161.709 li
cp
0 0 0 0 cmyk
@
477.807 161.709 mo
470.897 161.709 li
470.897 154.796 li
477.807 154.796 li
477.807 161.709 li
cp
0 0 0 1 cmyk
f
477.807 161.709 mo
470.897 161.709 li
470.897 154.796 li
477.807 154.796 li
477.807 161.709 li
cp
0 0 0 0 cmyk
@
498.536 161.709 mo
491.624 161.709 li
491.624 154.796 li
498.536 154.796 li
498.536 161.709 li
cp
0 0 0 1 cmyk
f
498.536 161.709 mo
491.624 161.709 li
491.624 154.796 li
498.536 154.796 li
498.536 161.709 li
cp
0 0 0 0 cmyk
@
512.354 161.709 mo
505.444 161.709 li
505.444 154.796 li
512.354 154.796 li
512.354 161.709 li
cp
0 0 0 1 cmyk
f
512.354 161.709 mo
505.444 161.709 li
505.444 154.796 li
512.354 154.796 li
512.354 161.709 li
cp
0 0 0 0 cmyk
@
470.899 154.8 mo
463.987 154.8 li
463.987 147.888 li
470.899 147.888 li
470.899 154.8 li
cp
0 0 0 1 cmyk
f
470.899 154.8 mo
463.987 154.8 li
463.987 147.888 li
470.899 147.888 li
470.899 154.8 li
cp
0 0 0 0 cmyk
@
484.717 154.8 mo
477.807 154.8 li
477.807 147.888 li
484.717 147.888 li
484.717 154.8 li
cp
0 0 0 1 cmyk
f
484.717 154.8 mo
477.807 154.8 li
477.807 147.888 li
484.717 147.888 li
484.717 154.8 li
cp
0 0 0 0 cmyk
@
491.625 154.8 mo
484.715 154.8 li
484.715 147.888 li
491.625 147.888 li
491.625 154.8 li
cp
0 0 0 1 cmyk
f
491.625 154.8 mo
484.715 154.8 li
484.715 147.888 li
491.625 147.888 li
491.625 154.8 li
cp
0 0 0 0 cmyk
@
505.446 154.8 mo
498.534 154.8 li
498.534 147.888 li
505.446 147.888 li
505.446 154.8 li
cp
0 0 0 1 cmyk
f
505.446 154.8 mo
498.534 154.8 li
498.534 147.888 li
505.446 147.888 li
505.446 154.8 li
cp
0 0 0 0 cmyk
@
477.807 147.891 mo
470.897 147.891 li
470.897 140.979 li
477.807 140.979 li
477.807 147.891 li
cp
0 0 0 1 cmyk
f
477.807 147.891 mo
470.897 147.891 li
470.897 140.979 li
477.807 140.979 li
477.807 147.891 li
cp
0 0 0 0 cmyk
@
498.536 147.891 mo
491.624 147.891 li
491.624 140.979 li
498.536 140.979 li
498.536 147.891 li
cp
0 0 0 1 cmyk
f
498.536 147.891 mo
491.624 147.891 li
491.624 140.979 li
498.536 140.979 li
498.536 147.891 li
cp
0 0 0 0 cmyk
@
463.989 140.982 mo
457.079 140.982 li
457.079 134.069 li
463.989 134.069 li
463.989 140.982 li
cp
0 0 0 1 cmyk
f
463.989 140.982 mo
457.079 140.982 li
457.079 134.069 li
463.989 134.069 li
463.989 140.982 li
cp
0 0 0 0 cmyk
@
470.899 140.982 mo
463.987 140.982 li
463.987 134.069 li
470.899 134.069 li
470.899 140.982 li
cp
0 0 0 1 cmyk
f
470.899 140.982 mo
463.987 140.982 li
463.987 134.069 li
470.899 134.069 li
470.899 140.982 li
cp
0 0 0 0 cmyk
@
477.807 140.982 mo
470.897 140.982 li
470.897 134.069 li
477.807 134.069 li
477.807 140.982 li
cp
0 0 0 1 cmyk
f
477.807 140.982 mo
470.897 140.982 li
470.897 134.069 li
477.807 134.069 li
477.807 140.982 li
cp
0 0 0 0 cmyk
@
484.717 140.982 mo
477.807 140.982 li
477.807 134.069 li
484.717 134.069 li
484.717 140.982 li
cp
0 0 0 1 cmyk
f
484.717 140.982 mo
477.807 140.982 li
477.807 134.069 li
484.717 134.069 li
484.717 140.982 li
cp
0 0 0 0 cmyk
@
491.625 140.982 mo
484.715 140.982 li
484.715 134.069 li
491.625 134.069 li
491.625 140.982 li
cp
0 0 0 1 cmyk
f
491.625 140.982 mo
484.715 140.982 li
484.715 134.069 li
491.625 134.069 li
491.625 140.982 li
cp
0 0 0 0 cmyk
@
498.536 140.982 mo
491.624 140.982 li
491.624 134.069 li
498.536 134.069 li
498.536 140.982 li
cp
0 0 0 1 cmyk
f
498.536 140.982 mo
491.624 140.982 li
491.624 134.069 li
498.536 134.069 li
498.536 140.982 li
cp
0 0 0 0 cmyk
@
505.446 140.982 mo
498.534 140.982 li
498.534 134.069 li
505.446 134.069 li
505.446 140.982 li
cp
0 0 0 1 cmyk
f
505.446 140.982 mo
498.534 140.982 li
498.534 134.069 li
505.446 134.069 li
505.446 140.982 li
cp
0 0 0 0 cmyk
@
512.354 140.982 mo
505.444 140.982 li
505.444 134.069 li
512.354 134.069 li
512.354 140.982 li
cp
0 0 0 1 cmyk
f
512.354 140.982 mo
505.444 140.982 li
505.444 134.069 li
512.354 134.069 li
512.354 140.982 li
cp
0 0 0 0 cmyk
@
463.989 134.073 mo
457.079 134.073 li
457.079 127.16 li
463.989 127.16 li
463.989 134.073 li
cp
0 0 0 1 cmyk
f
463.989 134.073 mo
457.079 134.073 li
457.079 127.16 li
463.989 127.16 li
463.989 134.073 li
cp
0 0 0 0 cmyk
@
470.899 134.073 mo
463.987 134.073 li
463.987 127.16 li
470.899 127.16 li
470.899 134.073 li
cp
0 0 0 1 cmyk
f
470.899 134.073 mo
463.987 134.073 li
463.987 127.16 li
470.899 127.16 li
470.899 134.073 li
cp
0 0 0 0 cmyk
@
484.717 134.073 mo
477.807 134.073 li
477.807 127.16 li
484.717 127.16 li
484.717 134.073 li
cp
0 0 0 1 cmyk
f
484.717 134.073 mo
477.807 134.073 li
477.807 127.16 li
484.717 127.16 li
484.717 134.073 li
cp
0 0 0 0 cmyk
@
491.625 134.073 mo
484.715 134.073 li
484.715 127.16 li
491.625 127.16 li
491.625 134.073 li
cp
0 0 0 1 cmyk
f
491.625 134.073 mo
484.715 134.073 li
484.715 127.16 li
491.625 127.16 li
491.625 134.073 li
cp
0 0 0 0 cmyk
@
505.446 134.073 mo
498.534 134.073 li
498.534 127.16 li
505.446 127.16 li
505.446 134.073 li
cp
0 0 0 1 cmyk
f
505.446 134.073 mo
498.534 134.073 li
498.534 127.16 li
505.446 127.16 li
505.446 134.073 li
cp
0 0 0 0 cmyk
@
512.354 134.073 mo
505.444 134.073 li
505.444 127.16 li
512.354 127.16 li
512.354 134.073 li
cp
0 0 0 1 cmyk
f
512.354 134.073 mo
505.444 134.073 li
505.444 127.16 li
512.354 127.16 li
512.354 134.073 li
cp
0 0 0 0 cmyk
@
470.899 127.163 mo
463.987 127.163 li
463.987 120.252 li
470.899 120.252 li
470.899 127.163 li
cp
0 0 0 1 cmyk
f
470.899 127.163 mo
463.987 127.163 li
463.987 120.252 li
470.899 120.252 li
470.899 127.163 li
cp
0 0 0 0 cmyk
@
477.807 127.163 mo
470.897 127.163 li
470.897 120.252 li
477.807 120.252 li
477.807 127.163 li
cp
0 0 0 1 cmyk
f
477.807 127.163 mo
470.897 127.163 li
470.897 120.252 li
477.807 120.252 li
477.807 127.163 li
cp
0 0 0 0 cmyk
@
484.717 127.163 mo
477.807 127.163 li
477.807 120.252 li
484.717 120.252 li
484.717 127.163 li
cp
0 0 0 1 cmyk
f
484.717 127.163 mo
477.807 127.163 li
477.807 120.252 li
484.717 120.252 li
484.717 127.163 li
cp
0 0 0 0 cmyk
@
491.625 127.163 mo
484.715 127.163 li
484.715 120.252 li
491.625 120.252 li
491.625 127.163 li
cp
0 0 0 1 cmyk
f
491.625 127.163 mo
484.715 127.163 li
484.715 120.252 li
491.625 120.252 li
491.625 127.163 li
cp
0 0 0 0 cmyk
@
498.536 127.163 mo
491.624 127.163 li
491.624 120.252 li
498.536 120.252 li
498.536 127.163 li
cp
0 0 0 1 cmyk
f
498.536 127.163 mo
491.624 127.163 li
491.624 120.252 li
498.536 120.252 li
498.536 127.163 li
cp
0 0 0 0 cmyk
@
505.446 127.163 mo
498.534 127.163 li
498.534 120.252 li
505.446 120.252 li
505.446 127.163 li
cp
0 0 0 1 cmyk
f
505.446 127.163 mo
498.534 127.163 li
498.534 120.252 li
505.446 120.252 li
505.446 127.163 li
cp
0 0 0 0 cmyk
@
477.807 120.255 mo
470.897 120.255 li
470.897 113.344 li
477.807 113.344 li
477.807 120.255 li
cp
0 0 0 1 cmyk
f
477.807 120.255 mo
470.897 120.255 li
470.897 113.344 li
477.807 113.344 li
477.807 120.255 li
cp
0 0 0 0 cmyk
@
484.717 120.255 mo
477.807 120.255 li
477.807 113.344 li
484.717 113.344 li
484.717 120.255 li
cp
0 0 0 1 cmyk
f
484.717 120.255 mo
477.807 120.255 li
477.807 113.344 li
484.717 113.344 li
484.717 120.255 li
cp
0 0 0 0 cmyk
@
491.625 120.255 mo
484.715 120.255 li
484.715 113.344 li
491.625 113.344 li
491.625 120.255 li
cp
0 0 0 1 cmyk
f
491.625 120.255 mo
484.715 120.255 li
484.715 113.344 li
491.625 113.344 li
491.625 120.255 li
cp
0 0 0 0 cmyk
@
498.536 120.255 mo
491.624 120.255 li
491.624 113.344 li
498.536 113.344 li
498.536 120.255 li
cp
0 0 0 1 cmyk
f
498.536 120.255 mo
491.624 120.255 li
491.624 113.344 li
498.536 113.344 li
498.536 120.255 li
cp
0 0 0 0 cmyk
@
484.717 113.346 mo
477.807 113.346 li
477.807 106.434 li
484.717 106.434 li
484.717 113.346 li
cp
0 0 0 1 cmyk
f
484.717 113.346 mo
477.807 113.346 li
477.807 106.434 li
484.717 106.434 li
484.717 113.346 li
cp
0 0 0 0 cmyk
@
491.625 113.346 mo
484.715 113.346 li
484.715 106.434 li
491.625 106.434 li
491.625 113.346 li
cp
0 0 0 1 cmyk
f
491.625 113.346 mo
484.715 113.346 li
484.715 106.434 li
491.625 106.434 li
491.625 113.346 li
cp
0 0 0 0 cmyk
@
711.343 657.296 mo
706.025 657.296 li
706.025 651.979 li
711.343 651.979 li
711.343 657.296 li
cp
0 0 0 1 cmyk
f
1.5 lw
711.343 657.296 mo
706.025 657.296 li
706.025 651.979 li
711.343 651.979 li
711.343 657.296 li
cp
0 0 0 0 cmyk
@
716.658 657.296 mo
711.341 657.296 li
711.341 651.979 li
716.658 651.979 li
716.658 657.296 li
cp
0 0 0 1 cmyk
f
716.658 657.296 mo
711.341 657.296 li
711.341 651.979 li
716.658 651.979 li
716.658 657.296 li
cp
0 0 0 0 cmyk
@
721.972 651.982 mo
716.657 651.982 li
716.657 646.665 li
721.972 646.665 li
721.972 651.982 li
cp
0 0 0 1 cmyk
f
721.972 651.982 mo
716.657 651.982 li
716.657 646.665 li
721.972 646.665 li
721.972 651.982 li
cp
0 0 0 0 cmyk
@
727.287 651.982 mo
721.971 651.982 li
721.971 646.665 li
727.287 646.665 li
727.287 651.982 li
cp
0 0 0 1 cmyk
f
727.287 651.982 mo
721.971 651.982 li
721.971 646.665 li
727.287 646.665 li
727.287 651.982 li
cp
0 0 0 0 cmyk
@
737.916 651.982 mo
732.6 651.982 li
732.6 646.665 li
737.916 646.665 li
737.916 651.982 li
cp
0 0 0 1 cmyk
f
737.916 651.982 mo
732.6 651.982 li
732.6 646.665 li
737.916 646.665 li
737.916 651.982 li
cp
0 0 0 0 cmyk
@
743.231 651.982 mo
737.916 651.982 li
737.916 646.665 li
743.231 646.665 li
743.231 651.982 li
cp
0 0 0 1 cmyk
f
743.231 651.982 mo
737.916 651.982 li
737.916 646.665 li
743.231 646.665 li
743.231 651.982 li
cp
0 0 0 0 cmyk
@
727.287 646.667 mo
721.971 646.667 li
721.971 641.349 li
727.287 641.349 li
727.287 646.667 li
cp
0 0 0 1 cmyk
f
727.287 646.667 mo
721.971 646.667 li
721.971 641.349 li
727.287 641.349 li
727.287 646.667 li
cp
0 0 0 0 cmyk
@
732.601 646.667 mo
727.286 646.667 li
727.286 641.349 li
732.601 641.349 li
732.601 646.667 li
cp
0 0 0 1 cmyk
f
732.601 646.667 mo
727.286 646.667 li
727.286 641.349 li
732.601 641.349 li
732.601 646.667 li
cp
0 0 0 0 cmyk
@
748.545 646.667 mo
743.23 646.667 li
743.23 641.349 li
748.545 641.349 li
748.545 646.667 li
cp
0 0 0 1 cmyk
f
748.545 646.667 mo
743.23 646.667 li
743.23 641.349 li
748.545 641.349 li
748.545 646.667 li
cp
0 0 0 0 cmyk
@
711.343 641.352 mo
706.025 641.352 li
706.025 636.035 li
711.343 636.035 li
711.343 641.352 li
cp
0 0 0 1 cmyk
f
711.343 641.352 mo
706.025 641.352 li
706.025 636.035 li
711.343 636.035 li
711.343 641.352 li
cp
0 0 0 0 cmyk
@
716.658 641.352 mo
711.341 641.352 li
711.341 636.035 li
716.658 636.035 li
716.658 641.352 li
cp
0 0 0 1 cmyk
f
716.658 641.352 mo
711.341 641.352 li
711.341 636.035 li
716.658 636.035 li
716.658 641.352 li
cp
0 0 0 0 cmyk
@
721.972 641.352 mo
716.657 641.352 li
716.657 636.035 li
721.972 636.035 li
721.972 641.352 li
cp
0 0 0 1 cmyk
f
721.972 641.352 mo
716.657 641.352 li
716.657 636.035 li
721.972 636.035 li
721.972 641.352 li
cp
0 0 0 0 cmyk
@
727.287 641.352 mo
721.971 641.352 li
721.971 636.035 li
727.287 636.035 li
727.287 641.352 li
cp
0 0 0 1 cmyk
f
727.287 641.352 mo
721.971 641.352 li
721.971 636.035 li
727.287 636.035 li
727.287 641.352 li
cp
0 0 0 0 cmyk
@
732.601 641.352 mo
727.286 641.352 li
727.286 636.035 li
732.601 636.035 li
732.601 641.352 li
cp
0 0 0 1 cmyk
f
732.601 641.352 mo
727.286 641.352 li
727.286 636.035 li
732.601 636.035 li
732.601 641.352 li
cp
0 0 0 0 cmyk
@
737.916 641.352 mo
732.6 641.352 li
732.6 636.035 li
737.916 636.035 li
737.916 641.352 li
cp
0 0 0 1 cmyk
f
737.916 641.352 mo
732.6 641.352 li
732.6 636.035 li
737.916 636.035 li
737.916 641.352 li
cp
0 0 0 0 cmyk
@
743.231 641.352 mo
737.916 641.352 li
737.916 636.035 li
743.231 636.035 li
743.231 641.352 li
cp
0 0 0 1 cmyk
f
743.231 641.352 mo
737.916 641.352 li
737.916 636.035 li
743.231 636.035 li
743.231 641.352 li
cp
0 0 0 0 cmyk
@
748.545 641.352 mo
743.23 641.352 li
743.23 636.035 li
748.545 636.035 li
748.545 641.352 li
cp
0 0 0 1 cmyk
f
748.545 641.352 mo
743.23 641.352 li
743.23 636.035 li
748.545 636.035 li
748.545 641.352 li
cp
0 0 0 0 cmyk
@
711.343 636.037 mo
706.025 636.037 li
706.025 630.719 li
711.343 630.719 li
711.343 636.037 li
cp
0 0 0 1 cmyk
f
711.343 636.037 mo
706.025 636.037 li
706.025 630.719 li
711.343 630.719 li
711.343 636.037 li
cp
0 0 0 0 cmyk
@
716.658 636.037 mo
711.341 636.037 li
711.341 630.719 li
716.658 630.719 li
716.658 636.037 li
cp
0 0 0 1 cmyk
f
716.658 636.037 mo
711.341 636.037 li
711.341 630.719 li
716.658 630.719 li
716.658 636.037 li
cp
0 0 0 0 cmyk
@
721.972 636.037 mo
716.657 636.037 li
716.657 630.719 li
721.972 630.719 li
721.972 636.037 li
cp
0 0 0 1 cmyk
f
721.972 636.037 mo
716.657 636.037 li
716.657 630.719 li
721.972 630.719 li
721.972 636.037 li
cp
0 0 0 0 cmyk
@
737.916 636.037 mo
732.6 636.037 li
732.6 630.719 li
737.916 630.719 li
737.916 636.037 li
cp
0 0 0 1 cmyk
f
737.916 636.037 mo
732.6 636.037 li
732.6 630.719 li
737.916 630.719 li
737.916 636.037 li
cp
0 0 0 0 cmyk
@
743.231 636.037 mo
737.916 636.037 li
737.916 630.719 li
743.231 630.719 li
743.231 636.037 li
cp
0 0 0 1 cmyk
f
743.231 636.037 mo
737.916 636.037 li
737.916 630.719 li
743.231 630.719 li
743.231 636.037 li
cp
0 0 0 0 cmyk
@
711.343 630.722 mo
706.025 630.722 li
706.025 625.405 li
711.343 625.405 li
711.343 630.722 li
cp
0 0 0 1 cmyk
f
711.343 630.722 mo
706.025 630.722 li
706.025 625.405 li
711.343 625.405 li
711.343 630.722 li
cp
0 0 0 0 cmyk
@
716.658 630.722 mo
711.341 630.722 li
711.341 625.405 li
716.658 625.405 li
716.658 630.722 li
cp
0 0 0 1 cmyk
f
716.658 630.722 mo
711.341 630.722 li
711.341 625.405 li
716.658 625.405 li
716.658 630.722 li
cp
0 0 0 0 cmyk
@
721.972 630.722 mo
716.657 630.722 li
716.657 625.405 li
721.972 625.405 li
721.972 630.722 li
cp
0 0 0 1 cmyk
f
721.972 630.722 mo
716.657 630.722 li
716.657 625.405 li
721.972 625.405 li
721.972 630.722 li
cp
0 0 0 0 cmyk
@
727.287 630.722 mo
721.971 630.722 li
721.971 625.405 li
727.287 625.405 li
727.287 630.722 li
cp
0 0 0 1 cmyk
f
727.287 630.722 mo
721.971 630.722 li
721.971 625.405 li
727.287 625.405 li
727.287 630.722 li
cp
0 0 0 0 cmyk
@
732.601 630.722 mo
727.286 630.722 li
727.286 625.405 li
732.601 625.405 li
732.601 630.722 li
cp
0 0 0 1 cmyk
f
732.601 630.722 mo
727.286 630.722 li
727.286 625.405 li
732.601 625.405 li
732.601 630.722 li
cp
0 0 0 0 cmyk
@
737.916 630.722 mo
732.6 630.722 li
732.6 625.405 li
737.916 625.405 li
737.916 630.722 li
cp
0 0 0 1 cmyk
f
737.916 630.722 mo
732.6 630.722 li
732.6 625.405 li
737.916 625.405 li
737.916 630.722 li
cp
0 0 0 0 cmyk
@
743.231 630.722 mo
737.916 630.722 li
737.916 625.405 li
743.231 625.405 li
743.231 630.722 li
cp
0 0 0 1 cmyk
f
743.231 630.722 mo
737.916 630.722 li
737.916 625.405 li
743.231 625.405 li
743.231 630.722 li
cp
0 0 0 0 cmyk
@
748.545 630.722 mo
743.23 630.722 li
743.23 625.405 li
748.545 625.405 li
748.545 630.722 li
cp
0 0 0 1 cmyk
f
748.545 630.722 mo
743.23 630.722 li
743.23 625.405 li
748.545 625.405 li
748.545 630.722 li
cp
0 0 0 0 cmyk
@
716.658 625.408 mo
711.341 625.408 li
711.341 620.09 li
716.658 620.09 li
716.658 625.408 li
cp
0 0 0 1 cmyk
f
716.658 625.408 mo
711.341 625.408 li
711.341 620.09 li
716.658 620.09 li
716.658 625.408 li
cp
0 0 0 0 cmyk
@
721.972 625.408 mo
716.657 625.408 li
716.657 620.09 li
721.972 620.09 li
721.972 625.408 li
cp
0 0 0 1 cmyk
f
721.972 625.408 mo
716.657 625.408 li
716.657 620.09 li
721.972 620.09 li
721.972 625.408 li
cp
0 0 0 0 cmyk
@
727.287 625.408 mo
721.971 625.408 li
721.971 620.09 li
727.287 620.09 li
727.287 625.408 li
cp
0 0 0 1 cmyk
f
727.287 625.408 mo
721.971 625.408 li
721.971 620.09 li
727.287 620.09 li
727.287 625.408 li
cp
0 0 0 0 cmyk
@
732.601 625.408 mo
727.286 625.408 li
727.286 620.09 li
732.601 620.09 li
732.601 625.408 li
cp
0 0 0 1 cmyk
f
732.601 625.408 mo
727.286 625.408 li
727.286 620.09 li
732.601 620.09 li
732.601 625.408 li
cp
0 0 0 0 cmyk
@
737.916 625.408 mo
732.6 625.408 li
732.6 620.09 li
737.916 620.09 li
737.916 625.408 li
cp
0 0 0 1 cmyk
f
737.916 625.408 mo
732.6 625.408 li
732.6 620.09 li
737.916 620.09 li
737.916 625.408 li
cp
0 0 0 0 cmyk
@
743.231 625.408 mo
737.916 625.408 li
737.916 620.09 li
743.231 620.09 li
743.231 625.408 li
cp
0 0 0 1 cmyk
f
743.231 625.408 mo
737.916 625.408 li
737.916 620.09 li
743.231 620.09 li
743.231 625.408 li
cp
0 0 0 0 cmyk
@
748.545 625.408 mo
743.23 625.408 li
743.23 620.09 li
748.545 620.09 li
748.545 625.408 li
cp
0 0 0 1 cmyk
f
748.545 625.408 mo
743.23 625.408 li
743.23 620.09 li
748.545 620.09 li
748.545 625.408 li
cp
0 0 0 0 cmyk
@
732.601 620.093 mo
727.286 620.093 li
727.286 614.776 li
732.601 614.776 li
732.601 620.093 li
cp
0 0 0 1 cmyk
f
732.601 620.093 mo
727.286 620.093 li
727.286 614.776 li
732.601 614.776 li
732.601 620.093 li
cp
0 0 0 0 cmyk
@
737.916 620.093 mo
732.6 620.093 li
732.6 614.776 li
737.916 614.776 li
737.916 620.093 li
cp
0 0 0 1 cmyk
f
737.916 620.093 mo
732.6 620.093 li
732.6 614.776 li
737.916 614.776 li
737.916 620.093 li
cp
0 0 0 0 cmyk
@
743.231 620.093 mo
737.916 620.093 li
737.916 614.776 li
743.231 614.776 li
743.231 620.093 li
cp
0 0 0 1 cmyk
f
743.231 620.093 mo
737.916 620.093 li
737.916 614.776 li
743.231 614.776 li
743.231 620.093 li
cp
0 0 0 0 cmyk
@
748.545 620.093 mo
743.23 620.093 li
743.23 614.776 li
748.545 614.776 li
748.545 620.093 li
cp
0 0 0 1 cmyk
f
748.545 620.093 mo
743.23 620.093 li
743.23 614.776 li
748.545 614.776 li
748.545 620.093 li
cp
0 0 0 0 cmyk
@
753.86 651.982 mo
748.545 651.982 li
748.545 646.665 li
753.86 646.665 li
753.86 651.982 li
cp
0 0 0 1 cmyk
f
753.86 651.982 mo
748.545 651.982 li
748.545 646.665 li
753.86 646.665 li
753.86 651.982 li
cp
0 0 0 0 cmyk
@
753.86 646.667 mo
748.545 646.667 li
748.545 641.349 li
753.86 641.349 li
753.86 646.667 li
cp
0 0 0 1 cmyk
f
753.86 646.667 mo
748.545 646.667 li
748.545 641.349 li
753.86 641.349 li
753.86 646.667 li
cp
0 0 0 0 cmyk
@
753.86 641.352 mo
748.545 641.352 li
748.545 636.035 li
753.86 636.035 li
753.86 641.352 li
cp
0 0 0 1 cmyk
f
753.86 641.352 mo
748.545 641.352 li
748.545 636.035 li
753.86 636.035 li
753.86 641.352 li
cp
0 0 0 0 cmyk
@
753.86 630.722 mo
748.545 630.722 li
748.545 625.405 li
753.86 625.405 li
753.86 630.722 li
cp
0 0 0 1 cmyk
f
753.86 630.722 mo
748.545 630.722 li
748.545 625.405 li
753.86 625.405 li
753.86 630.722 li
cp
0 0 0 0 cmyk
@
753.86 625.408 mo
748.545 625.408 li
748.545 620.09 li
753.86 620.09 li
753.86 625.408 li
cp
0 0 0 1 cmyk
f
753.86 625.408 mo
748.545 625.408 li
748.545 620.09 li
753.86 620.09 li
753.86 625.408 li
cp
0 0 0 0 cmyk
@
759.174 651.982 mo
753.859 651.982 li
753.859 646.665 li
759.174 646.665 li
759.174 651.982 li
cp
0 0 0 1 cmyk
f
759.174 651.982 mo
753.859 651.982 li
753.859 646.665 li
759.174 646.665 li
759.174 651.982 li
cp
0 0 0 0 cmyk
@
759.174 641.352 mo
753.859 641.352 li
753.859 636.035 li
759.174 636.035 li
759.174 641.352 li
cp
0 0 0 1 cmyk
f
759.174 641.352 mo
753.859 641.352 li
753.859 636.035 li
759.174 636.035 li
759.174 641.352 li
cp
0 0 0 0 cmyk
@
759.174 636.037 mo
753.859 636.037 li
753.859 630.719 li
759.174 630.719 li
759.174 636.037 li
cp
0 0 0 1 cmyk
f
759.174 636.037 mo
753.859 636.037 li
753.859 630.719 li
759.174 630.719 li
759.174 636.037 li
cp
0 0 0 0 cmyk
@
759.174 630.722 mo
753.859 630.722 li
753.859 625.405 li
759.174 625.405 li
759.174 630.722 li
cp
0 0 0 1 cmyk
f
759.174 630.722 mo
753.859 630.722 li
753.859 625.405 li
759.174 625.405 li
759.174 630.722 li
cp
0 0 0 0 cmyk
@
759.174 625.408 mo
753.859 625.408 li
753.859 620.09 li
759.174 620.09 li
759.174 625.408 li
cp
0 0 0 1 cmyk
f
759.174 625.408 mo
753.859 625.408 li
753.859 620.09 li
759.174 620.09 li
759.174 625.408 li
cp
0 0 0 0 cmyk
@
764.49 657.296 mo
759.174 657.296 li
759.174 651.979 li
764.49 651.979 li
764.49 657.296 li
cp
0 0 0 1 cmyk
f
764.49 657.296 mo
759.174 657.296 li
759.174 651.979 li
764.49 651.979 li
764.49 657.296 li
cp
0 0 0 0 cmyk
@
764.49 641.352 mo
759.174 641.352 li
759.174 636.035 li
764.49 636.035 li
764.49 641.352 li
cp
0 0 0 1 cmyk
f
764.49 641.352 mo
759.174 641.352 li
759.174 636.035 li
764.49 636.035 li
764.49 641.352 li
cp
0 0 0 0 cmyk
@
764.49 636.037 mo
759.174 636.037 li
759.174 630.719 li
764.49 630.719 li
764.49 636.037 li
cp
0 0 0 1 cmyk
f
764.49 636.037 mo
759.174 636.037 li
759.174 630.719 li
764.49 630.719 li
764.49 636.037 li
cp
0 0 0 0 cmyk
@
764.49 630.722 mo
759.174 630.722 li
759.174 625.405 li
764.49 625.405 li
764.49 630.722 li
cp
0 0 0 1 cmyk
f
764.49 630.722 mo
759.174 630.722 li
759.174 625.405 li
764.49 625.405 li
764.49 630.722 li
cp
0 0 0 0 cmyk
@
764.49 625.408 mo
759.174 625.408 li
759.174 620.09 li
764.49 620.09 li
764.49 625.408 li
cp
0 0 0 1 cmyk
f
764.49 625.408 mo
759.174 625.408 li
759.174 620.09 li
764.49 620.09 li
764.49 625.408 li
cp
0 0 0 0 cmyk
@
769.805 657.296 mo
764.489 657.296 li
764.489 651.979 li
769.805 651.979 li
769.805 657.296 li
cp
0 0 0 1 cmyk
f
769.805 657.296 mo
764.489 657.296 li
764.489 651.979 li
769.805 651.979 li
769.805 657.296 li
cp
0 0 0 0 cmyk
@
769.805 641.352 mo
764.489 641.352 li
764.489 636.035 li
769.805 636.035 li
769.805 641.352 li
cp
0 0 0 1 cmyk
f
769.805 641.352 mo
764.489 641.352 li
764.489 636.035 li
769.805 636.035 li
769.805 641.352 li
cp
0 0 0 0 cmyk
@
769.805 636.037 mo
764.489 636.037 li
764.489 630.719 li
769.805 630.719 li
769.805 636.037 li
cp
0 0 0 1 cmyk
f
769.805 636.037 mo
764.489 636.037 li
764.489 630.719 li
769.805 630.719 li
769.805 636.037 li
cp
0 0 0 0 cmyk
@
769.805 630.722 mo
764.489 630.722 li
764.489 625.405 li
769.805 625.405 li
769.805 630.722 li
cp
0 0 0 1 cmyk
f
769.805 630.722 mo
764.489 630.722 li
764.489 625.405 li
769.805 625.405 li
769.805 630.722 li
cp
0 0 0 0 cmyk
@
421.991 296.849 mo
410.825 296.849 li
410.825 285.682 li
421.991 285.682 li
421.991 296.849 li
cp
0 0 0 1 cmyk
f
3.15 lw
421.991 296.849 mo
410.825 296.849 li
410.825 285.682 li
421.991 285.682 li
421.991 296.849 li
cp
0 0 0 0 cmyk
@
433.153 296.849 mo
421.991 296.849 li
421.991 285.682 li
433.153 285.682 li
433.153 296.849 li
cp
0 0 0 1 cmyk
f
433.153 296.849 mo
421.991 296.849 li
421.991 285.682 li
433.153 285.682 li
433.153 296.849 li
cp
0 0 0 0 cmyk
@
444.317 285.688 mo
433.153 285.688 li
433.153 274.521 li
444.317 274.521 li
444.317 285.688 li
cp
0 0 0 1 cmyk
f
444.317 285.688 mo
433.153 285.688 li
433.153 274.521 li
444.317 274.521 li
444.317 285.688 li
cp
0 0 0 0 cmyk
@
455.481 285.688 mo
444.317 285.688 li
444.317 274.521 li
455.481 274.521 li
455.481 285.688 li
cp
0 0 0 1 cmyk
f
455.481 285.688 mo
444.317 285.688 li
444.317 274.521 li
455.481 274.521 li
455.481 285.688 li
cp
0 0 0 0 cmyk
@
477.807 285.688 mo
466.641 285.688 li
466.641 274.521 li
477.807 274.521 li
477.807 285.688 li
cp
0 0 0 1 cmyk
f
477.807 285.688 mo
466.641 285.688 li
466.641 274.521 li
477.807 274.521 li
477.807 285.688 li
cp
0 0 0 0 cmyk
@
488.969 285.688 mo
477.807 285.688 li
477.807 274.521 li
488.969 274.521 li
488.969 285.688 li
cp
0 0 0 1 cmyk
f
488.969 285.688 mo
477.807 285.688 li
477.807 274.521 li
488.969 274.521 li
488.969 285.688 li
cp
0 0 0 0 cmyk
@
455.481 274.525 mo
444.317 274.525 li
444.317 263.361 li
455.481 263.361 li
455.481 274.525 li
cp
0 0 0 1 cmyk
f
455.481 274.525 mo
444.317 274.525 li
444.317 263.361 li
455.481 263.361 li
455.481 274.525 li
cp
0 0 0 0 cmyk
@
466.643 274.525 mo
455.477 274.525 li
455.477 263.361 li
466.643 263.361 li
466.643 274.525 li
cp
0 0 0 1 cmyk
f
466.643 274.525 mo
455.477 274.525 li
455.477 263.361 li
466.643 263.361 li
466.643 274.525 li
cp
0 0 0 0 cmyk
@
500.135 274.525 mo
488.969 274.525 li
488.969 263.361 li
500.135 263.361 li
500.135 274.525 li
cp
0 0 0 1 cmyk
f
500.135 274.525 mo
488.969 274.525 li
488.969 263.361 li
500.135 263.361 li
500.135 274.525 li
cp
0 0 0 0 cmyk
@
421.991 263.366 mo
410.825 263.366 li
410.825 252.201 li
421.991 252.201 li
421.991 263.366 li
cp
0 0 0 1 cmyk
f
421.991 263.366 mo
410.825 263.366 li
410.825 252.201 li
421.991 252.201 li
421.991 263.366 li
cp
0 0 0 0 cmyk
@
433.153 263.366 mo
421.991 263.366 li
421.991 252.201 li
433.153 252.201 li
433.153 263.366 li
cp
0 0 0 1 cmyk
f
433.153 263.366 mo
421.991 263.366 li
421.991 252.201 li
433.153 252.201 li
433.153 263.366 li
cp
0 0 0 0 cmyk
@
444.317 263.366 mo
433.153 263.366 li
433.153 252.201 li
444.317 252.201 li
444.317 263.366 li
cp
0 0 0 1 cmyk
f
444.317 263.366 mo
433.153 263.366 li
433.153 252.201 li
444.317 252.201 li
444.317 263.366 li
cp
0 0 0 0 cmyk
@
455.481 263.366 mo
444.317 263.366 li
444.317 252.201 li
455.481 252.201 li
455.481 263.366 li
cp
0 0 0 1 cmyk
f
455.481 263.366 mo
444.317 263.366 li
444.317 252.201 li
455.481 252.201 li
455.481 263.366 li
cp
0 0 0 0 cmyk
@
466.643 263.366 mo
455.477 263.366 li
455.477 252.201 li
466.643 252.201 li
466.643 263.366 li
cp
0 0 0 1 cmyk
f
466.643 263.366 mo
455.477 263.366 li
455.477 252.201 li
466.643 252.201 li
466.643 263.366 li
cp
0 0 0 0 cmyk
@
477.807 263.366 mo
466.641 263.366 li
466.641 252.201 li
477.807 252.201 li
477.807 263.366 li
cp
0 0 0 1 cmyk
f
477.807 263.366 mo
466.641 263.366 li
466.641 252.201 li
477.807 252.201 li
477.807 263.366 li
cp
0 0 0 0 cmyk
@
488.969 263.366 mo
477.807 263.366 li
477.807 252.201 li
488.969 252.201 li
488.969 263.366 li
cp
0 0 0 1 cmyk
f
488.969 263.366 mo
477.807 263.366 li
477.807 252.201 li
488.969 252.201 li
488.969 263.366 li
cp
0 0 0 0 cmyk
@
500.135 263.366 mo
488.969 263.366 li
488.969 252.201 li
500.135 252.201 li
500.135 263.366 li
cp
0 0 0 1 cmyk
f
500.135 263.366 mo
488.969 263.366 li
488.969 252.201 li
500.135 252.201 li
500.135 263.366 li
cp
0 0 0 0 cmyk
@
421.991 252.206 mo
410.825 252.206 li
410.825 241.04 li
421.991 241.04 li
421.991 252.206 li
cp
0 0 0 1 cmyk
f
421.991 252.206 mo
410.825 252.206 li
410.825 241.04 li
421.991 241.04 li
421.991 252.206 li
cp
0 0 0 0 cmyk
@
433.153 252.206 mo
421.991 252.206 li
421.991 241.04 li
433.153 241.04 li
433.153 252.206 li
cp
0 0 0 1 cmyk
f
433.153 252.206 mo
421.991 252.206 li
421.991 241.04 li
433.153 241.04 li
433.153 252.206 li
cp
0 0 0 0 cmyk
@
444.317 252.206 mo
433.153 252.206 li
433.153 241.04 li
444.317 241.04 li
444.317 252.206 li
cp
0 0 0 1 cmyk
f
444.317 252.206 mo
433.153 252.206 li
433.153 241.04 li
444.317 241.04 li
444.317 252.206 li
cp
0 0 0 0 cmyk
@
477.807 252.206 mo
466.641 252.206 li
466.641 241.04 li
477.807 241.04 li
477.807 252.206 li
cp
0 0 0 1 cmyk
f
477.807 252.206 mo
466.641 252.206 li
466.641 241.04 li
477.807 241.04 li
477.807 252.206 li
cp
0 0 0 0 cmyk
@
488.969 252.206 mo
477.807 252.206 li
477.807 241.04 li
488.969 241.04 li
488.969 252.206 li
cp
0 0 0 1 cmyk
f
488.969 252.206 mo
477.807 252.206 li
477.807 241.04 li
488.969 241.04 li
488.969 252.206 li
cp
0 0 0 0 cmyk
@
421.991 241.045 mo
410.825 241.045 li
410.825 229.88 li
421.991 229.88 li
421.991 241.045 li
cp
0 0 0 1 cmyk
f
421.991 241.045 mo
410.825 241.045 li
410.825 229.88 li
421.991 229.88 li
421.991 241.045 li
cp
0 0 0 0 cmyk
@
433.153 241.045 mo
421.991 241.045 li
421.991 229.88 li
433.153 229.88 li
433.153 241.045 li
cp
0 0 0 1 cmyk
f
433.153 241.045 mo
421.991 241.045 li
421.991 229.88 li
433.153 229.88 li
433.153 241.045 li
cp
0 0 0 0 cmyk
@
444.317 241.045 mo
433.153 241.045 li
433.153 229.88 li
444.317 229.88 li
444.317 241.045 li
cp
0 0 0 1 cmyk
f
444.317 241.045 mo
433.153 241.045 li
433.153 229.88 li
444.317 229.88 li
444.317 241.045 li
cp
0 0 0 0 cmyk
@
455.481 241.045 mo
444.317 241.045 li
444.317 229.88 li
455.481 229.88 li
455.481 241.045 li
cp
0 0 0 1 cmyk
f
455.481 241.045 mo
444.317 241.045 li
444.317 229.88 li
455.481 229.88 li
455.481 241.045 li
cp
0 0 0 0 cmyk
@
466.643 241.045 mo
455.477 241.045 li
455.477 229.88 li
466.643 229.88 li
466.643 241.045 li
cp
0 0 0 1 cmyk
f
466.643 241.045 mo
455.477 241.045 li
455.477 229.88 li
466.643 229.88 li
466.643 241.045 li
cp
0 0 0 0 cmyk
@
477.807 241.045 mo
466.641 241.045 li
466.641 229.88 li
477.807 229.88 li
477.807 241.045 li
cp
0 0 0 1 cmyk
f
477.807 241.045 mo
466.641 241.045 li
466.641 229.88 li
477.807 229.88 li
477.807 241.045 li
cp
0 0 0 0 cmyk
@
488.969 241.045 mo
477.807 241.045 li
477.807 229.88 li
488.969 229.88 li
488.969 241.045 li
cp
0 0 0 1 cmyk
f
488.969 241.045 mo
477.807 241.045 li
477.807 229.88 li
488.969 229.88 li
488.969 241.045 li
cp
0 0 0 0 cmyk
@
500.135 241.045 mo
488.969 241.045 li
488.969 229.88 li
500.135 229.88 li
500.135 241.045 li
cp
0 0 0 1 cmyk
f
500.135 241.045 mo
488.969 241.045 li
488.969 229.88 li
500.135 229.88 li
500.135 241.045 li
cp
0 0 0 0 cmyk
@
433.153 229.885 mo
421.991 229.885 li
421.991 218.719 li
433.153 218.719 li
433.153 229.885 li
cp
0 0 0 1 cmyk
f
433.153 229.885 mo
421.991 229.885 li
421.991 218.719 li
433.153 218.719 li
433.153 229.885 li
cp
0 0 0 0 cmyk
@
444.317 229.885 mo
433.153 229.885 li
433.153 218.719 li
444.317 218.719 li
444.317 229.885 li
cp
0 0 0 1 cmyk
f
444.317 229.885 mo
433.153 229.885 li
433.153 218.719 li
444.317 218.719 li
444.317 229.885 li
cp
0 0 0 0 cmyk
@
455.481 229.885 mo
444.317 229.885 li
444.317 218.719 li
455.481 218.719 li
455.481 229.885 li
cp
0 0 0 1 cmyk
f
455.481 229.885 mo
444.317 229.885 li
444.317 218.719 li
455.481 218.719 li
455.481 229.885 li
cp
0 0 0 0 cmyk
@
466.643 229.885 mo
455.477 229.885 li
455.477 218.719 li
466.643 218.719 li
466.643 229.885 li
cp
0 0 0 1 cmyk
f
466.643 229.885 mo
455.477 229.885 li
455.477 218.719 li
466.643 218.719 li
466.643 229.885 li
cp
0 0 0 0 cmyk
@
477.807 229.885 mo
466.641 229.885 li
466.641 218.719 li
477.807 218.719 li
477.807 229.885 li
cp
0 0 0 1 cmyk
f
477.807 229.885 mo
466.641 229.885 li
466.641 218.719 li
477.807 218.719 li
477.807 229.885 li
cp
0 0 0 0 cmyk
@
488.969 229.885 mo
477.807 229.885 li
477.807 218.719 li
488.969 218.719 li
488.969 229.885 li
cp
0 0 0 1 cmyk
f
488.969 229.885 mo
477.807 229.885 li
477.807 218.719 li
488.969 218.719 li
488.969 229.885 li
cp
0 0 0 0 cmyk
@
500.135 229.885 mo
488.969 229.885 li
488.969 218.719 li
500.135 218.719 li
500.135 229.885 li
cp
0 0 0 1 cmyk
f
500.135 229.885 mo
488.969 229.885 li
488.969 218.719 li
500.135 218.719 li
500.135 229.885 li
cp
0 0 0 0 cmyk
@
466.643 218.725 mo
455.477 218.725 li
455.477 207.558 li
466.643 207.558 li
466.643 218.725 li
cp
0 0 0 1 cmyk
f
466.643 218.725 mo
455.477 218.725 li
455.477 207.558 li
466.643 207.558 li
466.643 218.725 li
cp
0 0 0 0 cmyk
@
477.807 218.725 mo
466.641 218.725 li
466.641 207.558 li
477.807 207.558 li
477.807 218.725 li
cp
0 0 0 1 cmyk
f
477.807 218.725 mo
466.641 218.725 li
466.641 207.558 li
477.807 207.558 li
477.807 218.725 li
cp
0 0 0 0 cmyk
@
488.969 218.725 mo
477.807 218.725 li
477.807 207.558 li
488.969 207.558 li
488.969 218.725 li
cp
0 0 0 1 cmyk
f
488.969 218.725 mo
477.807 218.725 li
477.807 207.558 li
488.969 207.558 li
488.969 218.725 li
cp
0 0 0 0 cmyk
@
500.135 218.725 mo
488.969 218.725 li
488.969 207.558 li
500.135 207.558 li
500.135 218.725 li
cp
0 0 0 1 cmyk
f
500.135 218.725 mo
488.969 218.725 li
488.969 207.558 li
500.135 207.558 li
500.135 218.725 li
cp
0 0 0 0 cmyk
@
511.297 285.688 mo
500.131 285.688 li
500.131 274.521 li
511.297 274.521 li
511.297 285.688 li
cp
0 0 0 1 cmyk
f
511.297 285.688 mo
500.131 285.688 li
500.131 274.521 li
511.297 274.521 li
511.297 285.688 li
cp
0 0 0 0 cmyk
@
511.297 274.525 mo
500.131 274.525 li
500.131 263.361 li
511.297 263.361 li
511.297 274.525 li
cp
0 0 0 1 cmyk
f
511.297 274.525 mo
500.131 274.525 li
500.131 263.361 li
511.297 263.361 li
511.297 274.525 li
cp
0 0 0 0 cmyk
@
511.297 263.366 mo
500.131 263.366 li
500.131 252.201 li
511.297 252.201 li
511.297 263.366 li
cp
0 0 0 1 cmyk
f
511.297 263.366 mo
500.131 263.366 li
500.131 252.201 li
511.297 252.201 li
511.297 263.366 li
cp
0 0 0 0 cmyk
@
511.297 241.045 mo
500.131 241.045 li
500.131 229.88 li
511.297 229.88 li
511.297 241.045 li
cp
0 0 0 1 cmyk
f
511.297 241.045 mo
500.131 241.045 li
500.131 229.88 li
511.297 229.88 li
511.297 241.045 li
cp
0 0 0 0 cmyk
@
511.297 229.885 mo
500.131 229.885 li
500.131 218.719 li
511.297 218.719 li
511.297 229.885 li
cp
0 0 0 1 cmyk
f
511.297 229.885 mo
500.131 229.885 li
500.131 218.719 li
511.297 218.719 li
511.297 229.885 li
cp
0 0 0 0 cmyk
@
522.459 285.688 mo
511.293 285.688 li
511.293 274.521 li
522.459 274.521 li
522.459 285.688 li
cp
0 0 0 1 cmyk
f
522.459 285.688 mo
511.293 285.688 li
511.293 274.521 li
522.459 274.521 li
522.459 285.688 li
cp
0 0 0 0 cmyk
@
522.459 263.366 mo
511.293 263.366 li
511.293 252.201 li
522.459 252.201 li
522.459 263.366 li
cp
0 0 0 1 cmyk
f
522.459 263.366 mo
511.293 263.366 li
511.293 252.201 li
522.459 252.201 li
522.459 263.366 li
cp
0 0 0 0 cmyk
@
522.459 252.206 mo
511.293 252.206 li
511.293 241.04 li
522.459 241.04 li
522.459 252.206 li
cp
0 0 0 1 cmyk
f
522.459 252.206 mo
511.293 252.206 li
511.293 241.04 li
522.459 241.04 li
522.459 252.206 li
cp
0 0 0 0 cmyk
@
522.459 241.045 mo
511.293 241.045 li
511.293 229.88 li
522.459 229.88 li
522.459 241.045 li
cp
0 0 0 1 cmyk
f
522.459 241.045 mo
511.293 241.045 li
511.293 229.88 li
522.459 229.88 li
522.459 241.045 li
cp
0 0 0 0 cmyk
@
522.459 229.885 mo
511.293 229.885 li
511.293 218.719 li
522.459 218.719 li
522.459 229.885 li
cp
0 0 0 1 cmyk
f
522.459 229.885 mo
511.293 229.885 li
511.293 218.719 li
522.459 218.719 li
522.459 229.885 li
cp
0 0 0 0 cmyk
@
533.625 296.849 mo
522.459 296.849 li
522.459 285.682 li
533.625 285.682 li
533.625 296.849 li
cp
0 0 0 1 cmyk
f
533.625 296.849 mo
522.459 296.849 li
522.459 285.682 li
533.625 285.682 li
533.625 296.849 li
cp
0 0 0 0 cmyk
@
533.625 263.366 mo
522.459 263.366 li
522.459 252.201 li
533.625 252.201 li
533.625 263.366 li
cp
0 0 0 1 cmyk
f
533.625 263.366 mo
522.459 263.366 li
522.459 252.201 li
533.625 252.201 li
533.625 263.366 li
cp
0 0 0 0 cmyk
@
533.625 252.206 mo
522.459 252.206 li
522.459 241.04 li
533.625 241.04 li
533.625 252.206 li
cp
0 0 0 1 cmyk
f
533.625 252.206 mo
522.459 252.206 li
522.459 241.04 li
533.625 241.04 li
533.625 252.206 li
cp
0 0 0 0 cmyk
@
533.625 241.045 mo
522.459 241.045 li
522.459 229.88 li
533.625 229.88 li
533.625 241.045 li
cp
0 0 0 1 cmyk
f
533.625 241.045 mo
522.459 241.045 li
522.459 229.88 li
533.625 229.88 li
533.625 241.045 li
cp
0 0 0 0 cmyk
@
533.625 229.885 mo
522.459 229.885 li
522.459 218.719 li
533.625 218.719 li
533.625 229.885 li
cp
0 0 0 1 cmyk
f
533.625 229.885 mo
522.459 229.885 li
522.459 218.719 li
533.625 218.719 li
533.625 229.885 li
cp
0 0 0 0 cmyk
@
544.788 296.849 mo
533.624 296.849 li
533.624 285.682 li
544.788 285.682 li
544.788 296.849 li
cp
0 0 0 1 cmyk
f
544.788 296.849 mo
533.624 296.849 li
533.624 285.682 li
544.788 285.682 li
544.788 296.849 li
cp
0 0 0 0 cmyk
@
544.788 263.366 mo
533.624 263.366 li
533.624 252.201 li
544.788 252.201 li
544.788 263.366 li
cp
0 0 0 1 cmyk
f
544.788 263.366 mo
533.624 263.366 li
533.624 252.201 li
544.788 252.201 li
544.788 263.366 li
cp
0 0 0 0 cmyk
@
544.788 252.206 mo
533.624 252.206 li
533.624 241.04 li
544.788 241.04 li
544.788 252.206 li
cp
0 0 0 1 cmyk
f
544.788 252.206 mo
533.624 252.206 li
533.624 241.04 li
544.788 241.04 li
544.788 252.206 li
cp
0 0 0 0 cmyk
@
544.788 241.045 mo
533.624 241.045 li
533.624 229.88 li
544.788 229.88 li
544.788 241.045 li
cp
0 0 0 1 cmyk
f
544.788 241.045 mo
533.624 241.045 li
533.624 229.88 li
544.788 229.88 li
544.788 241.045 li
cp
0 0 0 0 cmyk
@
625.956 108.859 mo
617.979 108.859 li
617.979 100.883 li
625.956 100.883 li
625.956 108.859 li
cp
0 0 0 1 cmyk
f
2.25 lw
625.956 108.859 mo
617.979 108.859 li
617.979 100.883 li
625.956 100.883 li
625.956 108.859 li
cp
0 0 0 0 cmyk
@
633.928 108.859 mo
625.956 108.859 li
625.956 100.883 li
633.928 100.883 li
633.928 108.859 li
cp
0 0 0 1 cmyk
f
633.928 108.859 mo
625.956 108.859 li
625.956 100.883 li
633.928 100.883 li
633.928 108.859 li
cp
0 0 0 0 cmyk
@
641.903 100.887 mo
633.926 100.887 li
633.926 92.9121 li
641.903 92.9121 li
641.903 100.887 li
cp
0 0 0 1 cmyk
f
641.903 100.887 mo
633.926 100.887 li
633.926 92.9121 li
641.903 92.9121 li
641.903 100.887 li
cp
0 0 0 0 cmyk
@
649.877 100.887 mo
641.901 100.887 li
641.901 92.9121 li
649.877 92.9121 li
649.877 100.887 li
cp
0 0 0 1 cmyk
f
649.877 100.887 mo
641.901 100.887 li
641.901 92.9121 li
649.877 92.9121 li
649.877 100.887 li
cp
0 0 0 0 cmyk
@
665.823 100.887 mo
657.848 100.887 li
657.848 92.9121 li
665.823 92.9121 li
665.823 100.887 li
cp
0 0 0 1 cmyk
f
665.823 100.887 mo
657.848 100.887 li
657.848 92.9121 li
665.823 92.9121 li
665.823 100.887 li
cp
0 0 0 0 cmyk
@
673.797 100.887 mo
665.823 100.887 li
665.823 92.9121 li
673.797 92.9121 li
673.797 100.887 li
cp
0 0 0 1 cmyk
f
673.797 100.887 mo
665.823 100.887 li
665.823 92.9121 li
673.797 92.9121 li
673.797 100.887 li
cp
0 0 0 0 cmyk
@
649.877 92.9141 mo
641.901 92.9141 li
641.901 84.9395 li
649.877 84.9395 li
649.877 92.9141 li
cp
0 0 0 1 cmyk
f
649.877 92.9141 mo
641.901 92.9141 li
641.901 84.9395 li
649.877 84.9395 li
649.877 92.9141 li
cp
0 0 0 0 cmyk
@
657.848 92.9141 mo
649.875 92.9141 li
649.875 84.9395 li
657.848 84.9395 li
657.848 92.9141 li
cp
0 0 0 1 cmyk
f
657.848 92.9141 mo
649.875 92.9141 li
649.875 84.9395 li
657.848 84.9395 li
657.848 92.9141 li
cp
0 0 0 0 cmyk
@
681.772 92.9141 mo
673.797 92.9141 li
673.797 84.9395 li
681.772 84.9395 li
681.772 92.9141 li
cp
0 0 0 1 cmyk
f
681.772 92.9141 mo
673.797 92.9141 li
673.797 84.9395 li
681.772 84.9395 li
681.772 92.9141 li
cp
0 0 0 0 cmyk
@
625.956 84.9434 mo
617.979 84.9434 li
617.979 76.9678 li
625.956 76.9678 li
625.956 84.9434 li
cp
0 0 0 1 cmyk
f
625.956 84.9434 mo
617.979 84.9434 li
617.979 76.9678 li
625.956 76.9678 li
625.956 84.9434 li
cp
0 0 0 0 cmyk
@
633.928 84.9434 mo
625.956 84.9434 li
625.956 76.9678 li
633.928 76.9678 li
633.928 84.9434 li
cp
0 0 0 1 cmyk
f
633.928 84.9434 mo
625.956 84.9434 li
625.956 76.9678 li
633.928 76.9678 li
633.928 84.9434 li
cp
0 0 0 0 cmyk
@
641.903 84.9434 mo
633.926 84.9434 li
633.926 76.9678 li
641.903 76.9678 li
641.903 84.9434 li
cp
0 0 0 1 cmyk
f
641.903 84.9434 mo
633.926 84.9434 li
633.926 76.9678 li
641.903 76.9678 li
641.903 84.9434 li
cp
0 0 0 0 cmyk
@
649.877 84.9434 mo
641.901 84.9434 li
641.901 76.9678 li
649.877 76.9678 li
649.877 84.9434 li
cp
0 0 0 1 cmyk
f
649.877 84.9434 mo
641.901 84.9434 li
641.901 76.9678 li
649.877 76.9678 li
649.877 84.9434 li
cp
0 0 0 0 cmyk
@
657.848 84.9434 mo
649.875 84.9434 li
649.875 76.9678 li
657.848 76.9678 li
657.848 84.9434 li
cp
0 0 0 1 cmyk
f
657.848 84.9434 mo
649.875 84.9434 li
649.875 76.9678 li
657.848 76.9678 li
657.848 84.9434 li
cp
0 0 0 0 cmyk
@
665.823 84.9434 mo
657.848 84.9434 li
657.848 76.9678 li
665.823 76.9678 li
665.823 84.9434 li
cp
0 0 0 1 cmyk
f
665.823 84.9434 mo
657.848 84.9434 li
657.848 76.9678 li
665.823 76.9678 li
665.823 84.9434 li
cp
0 0 0 0 cmyk
@
673.797 84.9434 mo
665.823 84.9434 li
665.823 76.9678 li
673.797 76.9678 li
673.797 84.9434 li
cp
0 0 0 1 cmyk
f
673.797 84.9434 mo
665.823 84.9434 li
665.823 76.9678 li
673.797 76.9678 li
673.797 84.9434 li
cp
0 0 0 0 cmyk
@
681.772 84.9434 mo
673.797 84.9434 li
673.797 76.9678 li
681.772 76.9678 li
681.772 84.9434 li
cp
0 0 0 1 cmyk
f
681.772 84.9434 mo
673.797 84.9434 li
673.797 76.9678 li
681.772 76.9678 li
681.772 84.9434 li
cp
0 0 0 0 cmyk
@
625.956 76.9707 mo
617.979 76.9707 li
617.979 68.9961 li
625.956 68.9961 li
625.956 76.9707 li
cp
0 0 0 1 cmyk
f
625.956 76.9707 mo
617.979 76.9707 li
617.979 68.9961 li
625.956 68.9961 li
625.956 76.9707 li
cp
0 0 0 0 cmyk
@
633.928 76.9707 mo
625.956 76.9707 li
625.956 68.9961 li
633.928 68.9961 li
633.928 76.9707 li
cp
0 0 0 1 cmyk
f
633.928 76.9707 mo
625.956 76.9707 li
625.956 68.9961 li
633.928 68.9961 li
633.928 76.9707 li
cp
0 0 0 0 cmyk
@
641.903 76.9707 mo
633.926 76.9707 li
633.926 68.9961 li
641.903 68.9961 li
641.903 76.9707 li
cp
0 0 0 1 cmyk
f
641.903 76.9707 mo
633.926 76.9707 li
633.926 68.9961 li
641.903 68.9961 li
641.903 76.9707 li
cp
0 0 0 0 cmyk
@
665.823 76.9707 mo
657.848 76.9707 li
657.848 68.9961 li
665.823 68.9961 li
665.823 76.9707 li
cp
0 0 0 1 cmyk
f
665.823 76.9707 mo
657.848 76.9707 li
657.848 68.9961 li
665.823 68.9961 li
665.823 76.9707 li
cp
0 0 0 0 cmyk
@
673.797 76.9707 mo
665.823 76.9707 li
665.823 68.9961 li
673.797 68.9961 li
673.797 76.9707 li
cp
0 0 0 1 cmyk
f
673.797 76.9707 mo
665.823 76.9707 li
665.823 68.9961 li
673.797 68.9961 li
673.797 76.9707 li
cp
0 0 0 0 cmyk
@
625.956 69 mo
617.979 69 li
617.979 61.0244 li
625.956 61.0244 li
625.956 69 li
cp
0 0 0 1 cmyk
f
625.956 69 mo
617.979 69 li
617.979 61.0244 li
625.956 61.0244 li
625.956 69 li
cp
0 0 0 0 cmyk
@
633.928 69 mo
625.956 69 li
625.956 61.0244 li
633.928 61.0244 li
633.928 69 li
cp
0 0 0 1 cmyk
f
633.928 69 mo
625.956 69 li
625.956 61.0244 li
633.928 61.0244 li
633.928 69 li
cp
0 0 0 0 cmyk
@
641.903 69 mo
633.926 69 li
633.926 61.0244 li
641.903 61.0244 li
641.903 69 li
cp
0 0 0 1 cmyk
f
641.903 69 mo
633.926 69 li
633.926 61.0244 li
641.903 61.0244 li
641.903 69 li
cp
0 0 0 0 cmyk
@
649.877 69 mo
641.901 69 li
641.901 61.0244 li
649.877 61.0244 li
649.877 69 li
cp
0 0 0 1 cmyk
f
649.877 69 mo
641.901 69 li
641.901 61.0244 li
649.877 61.0244 li
649.877 69 li
cp
0 0 0 0 cmyk
@
657.848 69 mo
649.875 69 li
649.875 61.0244 li
657.848 61.0244 li
657.848 69 li
cp
0 0 0 1 cmyk
f
657.848 69 mo
649.875 69 li
649.875 61.0244 li
657.848 61.0244 li
657.848 69 li
cp
0 0 0 0 cmyk
@
665.823 69 mo
657.848 69 li
657.848 61.0244 li
665.823 61.0244 li
665.823 69 li
cp
0 0 0 1 cmyk
f
665.823 69 mo
657.848 69 li
657.848 61.0244 li
665.823 61.0244 li
665.823 69 li
cp
0 0 0 0 cmyk
@
673.797 69 mo
665.823 69 li
665.823 61.0244 li
673.797 61.0244 li
673.797 69 li
cp
0 0 0 1 cmyk
f
673.797 69 mo
665.823 69 li
665.823 61.0244 li
673.797 61.0244 li
673.797 69 li
cp
0 0 0 0 cmyk
@
681.772 69 mo
673.797 69 li
673.797 61.0244 li
681.772 61.0244 li
681.772 69 li
cp
0 0 0 1 cmyk
f
681.772 69 mo
673.797 69 li
673.797 61.0244 li
681.772 61.0244 li
681.772 69 li
cp
0 0 0 0 cmyk
@
633.928 61.0273 mo
625.956 61.0273 li
625.956 53.0527 li
633.928 53.0527 li
633.928 61.0273 li
cp
0 0 0 1 cmyk
f
633.928 61.0273 mo
625.956 61.0273 li
625.956 53.0527 li
633.928 53.0527 li
633.928 61.0273 li
cp
0 0 0 0 cmyk
@
641.903 61.0273 mo
633.926 61.0273 li
633.926 53.0527 li
641.903 53.0527 li
641.903 61.0273 li
cp
0 0 0 1 cmyk
f
641.903 61.0273 mo
633.926 61.0273 li
633.926 53.0527 li
641.903 53.0527 li
641.903 61.0273 li
cp
0 0 0 0 cmyk
@
649.877 61.0273 mo
641.901 61.0273 li
641.901 53.0527 li
649.877 53.0527 li
649.877 61.0273 li
cp
0 0 0 1 cmyk
f
649.877 61.0273 mo
641.901 61.0273 li
641.901 53.0527 li
649.877 53.0527 li
649.877 61.0273 li
cp
0 0 0 0 cmyk
@
657.848 61.0273 mo
649.875 61.0273 li
649.875 53.0527 li
657.848 53.0527 li
657.848 61.0273 li
cp
0 0 0 1 cmyk
f
657.848 61.0273 mo
649.875 61.0273 li
649.875 53.0527 li
657.848 53.0527 li
657.848 61.0273 li
cp
0 0 0 0 cmyk
@
665.823 61.0273 mo
657.848 61.0273 li
657.848 53.0527 li
665.823 53.0527 li
665.823 61.0273 li
cp
0 0 0 1 cmyk
f
665.823 61.0273 mo
657.848 61.0273 li
657.848 53.0527 li
665.823 53.0527 li
665.823 61.0273 li
cp
0 0 0 0 cmyk
@
673.797 61.0273 mo
665.823 61.0273 li
665.823 53.0527 li
673.797 53.0527 li
673.797 61.0273 li
cp
0 0 0 1 cmyk
f
673.797 61.0273 mo
665.823 61.0273 li
665.823 53.0527 li
673.797 53.0527 li
673.797 61.0273 li
cp
0 0 0 0 cmyk
@
681.772 61.0273 mo
673.797 61.0273 li
673.797 53.0527 li
681.772 53.0527 li
681.772 61.0273 li
cp
0 0 0 1 cmyk
f
681.772 61.0273 mo
673.797 61.0273 li
673.797 53.0527 li
681.772 53.0527 li
681.772 61.0273 li
cp
0 0 0 0 cmyk
@
657.848 53.0557 mo
649.875 53.0557 li
649.875 45.0791 li
657.848 45.0791 li
657.848 53.0557 li
cp
0 0 0 1 cmyk
f
657.848 53.0557 mo
649.875 53.0557 li
649.875 45.0791 li
657.848 45.0791 li
657.848 53.0557 li
cp
0 0 0 0 cmyk
@
665.823 53.0557 mo
657.848 53.0557 li
657.848 45.0791 li
665.823 45.0791 li
665.823 53.0557 li
cp
0 0 0 1 cmyk
f
665.823 53.0557 mo
657.848 53.0557 li
657.848 45.0791 li
665.823 45.0791 li
665.823 53.0557 li
cp
0 0 0 0 cmyk
@
673.797 53.0557 mo
665.823 53.0557 li
665.823 45.0791 li
673.797 45.0791 li
673.797 53.0557 li
cp
0 0 0 1 cmyk
f
673.797 53.0557 mo
665.823 53.0557 li
665.823 45.0791 li
673.797 45.0791 li
673.797 53.0557 li
cp
0 0 0 0 cmyk
@
681.772 53.0557 mo
673.797 53.0557 li
673.797 45.0791 li
681.772 45.0791 li
681.772 53.0557 li
cp
0 0 0 1 cmyk
f
681.772 53.0557 mo
673.797 53.0557 li
673.797 45.0791 li
681.772 45.0791 li
681.772 53.0557 li
cp
0 0 0 0 cmyk
@
689.745 100.887 mo
681.77 100.887 li
681.77 92.9121 li
689.745 92.9121 li
689.745 100.887 li
cp
0 0 0 1 cmyk
f
689.745 100.887 mo
681.77 100.887 li
681.77 92.9121 li
689.745 92.9121 li
689.745 100.887 li
cp
0 0 0 0 cmyk
@
689.745 92.9141 mo
681.77 92.9141 li
681.77 84.9395 li
689.745 84.9395 li
689.745 92.9141 li
cp
0 0 0 1 cmyk
f
689.745 92.9141 mo
681.77 92.9141 li
681.77 84.9395 li
689.745 84.9395 li
689.745 92.9141 li
cp
0 0 0 0 cmyk
@
689.745 84.9434 mo
681.77 84.9434 li
681.77 76.9678 li
689.745 76.9678 li
689.745 84.9434 li
cp
0 0 0 1 cmyk
f
689.745 84.9434 mo
681.77 84.9434 li
681.77 76.9678 li
689.745 76.9678 li
689.745 84.9434 li
cp
0 0 0 0 cmyk
@
689.745 69 mo
681.77 69 li
681.77 61.0244 li
689.745 61.0244 li
689.745 69 li
cp
0 0 0 1 cmyk
f
689.745 69 mo
681.77 69 li
681.77 61.0244 li
689.745 61.0244 li
689.745 69 li
cp
0 0 0 0 cmyk
@
689.745 61.0273 mo
681.77 61.0273 li
681.77 53.0527 li
689.745 53.0527 li
689.745 61.0273 li
cp
0 0 0 1 cmyk
f
689.745 61.0273 mo
681.77 61.0273 li
681.77 53.0527 li
689.745 53.0527 li
689.745 61.0273 li
cp
0 0 0 0 cmyk
@
697.719 100.887 mo
689.745 100.887 li
689.745 92.9121 li
697.719 92.9121 li
697.719 100.887 li
cp
0 0 0 1 cmyk
f
697.719 100.887 mo
689.745 100.887 li
689.745 92.9121 li
697.719 92.9121 li
697.719 100.887 li
cp
0 0 0 0 cmyk
@
697.719 84.9434 mo
689.745 84.9434 li
689.745 76.9678 li
697.719 76.9678 li
697.719 84.9434 li
cp
0 0 0 1 cmyk
f
697.719 84.9434 mo
689.745 84.9434 li
689.745 76.9678 li
697.719 76.9678 li
697.719 84.9434 li
cp
0 0 0 0 cmyk
@
697.719 76.9707 mo
689.745 76.9707 li
689.745 68.9961 li
697.719 68.9961 li
697.719 76.9707 li
cp
0 0 0 1 cmyk
f
697.719 76.9707 mo
689.745 76.9707 li
689.745 68.9961 li
697.719 68.9961 li
697.719 76.9707 li
cp
0 0 0 0 cmyk
@
697.719 69 mo
689.745 69 li
689.745 61.0244 li
697.719 61.0244 li
697.719 69 li
cp
0 0 0 1 cmyk
f
697.719 69 mo
689.745 69 li
689.745 61.0244 li
697.719 61.0244 li
697.719 69 li
cp
0 0 0 0 cmyk
@
697.719 61.0273 mo
689.745 61.0273 li
689.745 53.0527 li
697.719 53.0527 li
697.719 61.0273 li
cp
0 0 0 1 cmyk
f
697.719 61.0273 mo
689.745 61.0273 li
689.745 53.0527 li
697.719 53.0527 li
697.719 61.0273 li
cp
0 0 0 0 cmyk
@
705.696 108.859 mo
697.719 108.859 li
697.719 100.883 li
705.696 100.883 li
705.696 108.859 li
cp
0 0 0 1 cmyk
f
705.696 108.859 mo
697.719 108.859 li
697.719 100.883 li
705.696 100.883 li
705.696 108.859 li
cp
0 0 0 0 cmyk
@
705.696 84.9434 mo
697.719 84.9434 li
697.719 76.9678 li
705.696 76.9678 li
705.696 84.9434 li
cp
0 0 0 1 cmyk
f
705.696 84.9434 mo
697.719 84.9434 li
697.719 76.9678 li
705.696 76.9678 li
705.696 84.9434 li
cp
0 0 0 0 cmyk
@
705.696 76.9707 mo
697.719 76.9707 li
697.719 68.9961 li
705.696 68.9961 li
705.696 76.9707 li
cp
0 0 0 1 cmyk
f
705.696 76.9707 mo
697.719 76.9707 li
697.719 68.9961 li
705.696 68.9961 li
705.696 76.9707 li
cp
0 0 0 0 cmyk
@
705.696 69 mo
697.719 69 li
697.719 61.0244 li
705.696 61.0244 li
705.696 69 li
cp
0 0 0 1 cmyk
f
705.696 69 mo
697.719 69 li
697.719 61.0244 li
705.696 61.0244 li
705.696 69 li
cp
0 0 0 0 cmyk
@
705.696 61.0273 mo
697.719 61.0273 li
697.719 53.0527 li
705.696 53.0527 li
705.696 61.0273 li
cp
0 0 0 1 cmyk
f
705.696 61.0273 mo
697.719 61.0273 li
697.719 53.0527 li
705.696 53.0527 li
705.696 61.0273 li
cp
0 0 0 0 cmyk
@
713.667 108.859 mo
705.69 108.859 li
705.69 100.883 li
713.667 100.883 li
713.667 108.859 li
cp
0 0 0 1 cmyk
f
713.667 108.859 mo
705.69 108.859 li
705.69 100.883 li
713.667 100.883 li
713.667 108.859 li
cp
0 0 0 0 cmyk
@
713.667 84.9434 mo
705.69 84.9434 li
705.69 76.9678 li
713.667 76.9678 li
713.667 84.9434 li
cp
0 0 0 1 cmyk
f
713.667 84.9434 mo
705.69 84.9434 li
705.69 76.9678 li
713.667 76.9678 li
713.667 84.9434 li
cp
0 0 0 0 cmyk
@
713.667 76.9707 mo
705.69 76.9707 li
705.69 68.9961 li
713.667 68.9961 li
713.667 76.9707 li
cp
0 0 0 1 cmyk
f
713.667 76.9707 mo
705.69 76.9707 li
705.69 68.9961 li
713.667 68.9961 li
713.667 76.9707 li
cp
0 0 0 0 cmyk
@
713.667 69 mo
705.69 69 li
705.69 61.0244 li
713.667 61.0244 li
713.667 69 li
cp
0 0 0 1 cmyk
f
713.667 69 mo
705.69 69 li
705.69 61.0244 li
713.667 61.0244 li
713.667 69 li
cp
0 0 0 0 cmyk
@
206.525 494.526 mo
195.891 494.526 li
195.891 483.893 li
206.525 483.893 li
206.525 494.526 li
cp
0 0 0 1 cmyk
f
3 lw
206.525 494.526 mo
195.891 494.526 li
195.891 483.893 li
206.525 483.893 li
206.525 494.526 li
cp
0 0 0 0 cmyk
@
195.894 483.897 mo
185.259 483.897 li
185.259 473.264 li
195.894 473.264 li
195.894 483.897 li
cp
0 0 0 1 cmyk
f
195.894 483.897 mo
185.259 483.897 li
185.259 473.264 li
195.894 473.264 li
195.894 483.897 li
cp
0 0 0 0 cmyk
@
142.733 473.269 mo
132.099 473.269 li
132.099 462.635 li
142.733 462.635 li
142.733 473.269 li
cp
0 0 0 1 cmyk
f
142.733 473.269 mo
132.099 473.269 li
132.099 462.635 li
142.733 462.635 li
142.733 473.269 li
cp
0 0 0 0 cmyk
@
153.366 473.269 mo
142.73 473.269 li
142.73 462.635 li
153.366 462.635 li
153.366 473.269 li
cp
0 0 0 1 cmyk
f
153.366 473.269 mo
142.73 473.269 li
142.73 462.635 li
153.366 462.635 li
153.366 473.269 li
cp
0 0 0 0 cmyk
@
163.998 473.269 mo
153.362 473.269 li
153.362 462.635 li
163.998 462.635 li
163.998 473.269 li
cp
0 0 0 1 cmyk
f
163.998 473.269 mo
153.362 473.269 li
153.362 462.635 li
163.998 462.635 li
163.998 473.269 li
cp
0 0 0 0 cmyk
@
174.63 473.269 mo
163.995 473.269 li
163.995 462.635 li
174.63 462.635 li
174.63 473.269 li
cp
0 0 0 1 cmyk
f
174.63 473.269 mo
163.995 473.269 li
163.995 462.635 li
174.63 462.635 li
174.63 473.269 li
cp
0 0 0 0 cmyk
@
185.261 473.269 mo
174.626 473.269 li
174.626 462.635 li
185.261 462.635 li
185.261 473.269 li
cp
0 0 0 1 cmyk
f
185.261 473.269 mo
174.626 473.269 li
174.626 462.635 li
185.261 462.635 li
185.261 473.269 li
cp
0 0 0 0 cmyk
@
195.894 473.269 mo
185.259 473.269 li
185.259 462.635 li
195.894 462.635 li
195.894 473.269 li
cp
0 0 0 1 cmyk
f
195.894 473.269 mo
185.259 473.269 li
185.259 462.635 li
195.894 462.635 li
195.894 473.269 li
cp
0 0 0 0 cmyk
@
206.525 473.269 mo
195.891 473.269 li
195.891 462.635 li
206.525 462.635 li
206.525 473.269 li
cp
0 0 0 1 cmyk
f
206.525 473.269 mo
195.891 473.269 li
195.891 462.635 li
206.525 462.635 li
206.525 473.269 li
cp
0 0 0 0 cmyk
@
142.733 462.639 mo
132.099 462.639 li
132.099 452.005 li
142.733 452.005 li
142.733 462.639 li
cp
0 0 0 1 cmyk
f
142.733 462.639 mo
132.099 462.639 li
132.099 452.005 li
142.733 452.005 li
142.733 462.639 li
cp
0 0 0 0 cmyk
@
153.366 462.639 mo
142.73 462.639 li
142.73 452.005 li
153.366 452.005 li
153.366 462.639 li
cp
0 0 0 1 cmyk
f
153.366 462.639 mo
142.73 462.639 li
142.73 452.005 li
153.366 452.005 li
153.366 462.639 li
cp
0 0 0 0 cmyk
@
163.998 462.639 mo
153.362 462.639 li
153.362 452.005 li
163.998 452.005 li
163.998 462.639 li
cp
0 0 0 1 cmyk
f
163.998 462.639 mo
153.362 462.639 li
153.362 452.005 li
163.998 452.005 li
163.998 462.639 li
cp
0 0 0 0 cmyk
@
174.63 462.639 mo
163.995 462.639 li
163.995 452.005 li
174.63 452.005 li
174.63 462.639 li
cp
0 0 0 1 cmyk
f
174.63 462.639 mo
163.995 462.639 li
163.995 452.005 li
174.63 452.005 li
174.63 462.639 li
cp
0 0 0 0 cmyk
@
185.261 462.639 mo
174.626 462.639 li
174.626 452.005 li
185.261 452.005 li
185.261 462.639 li
cp
0 0 0 1 cmyk
f
185.261 462.639 mo
174.626 462.639 li
174.626 452.005 li
185.261 452.005 li
185.261 462.639 li
cp
0 0 0 0 cmyk
@
195.894 462.639 mo
185.259 462.639 li
185.259 452.005 li
195.894 452.005 li
195.894 462.639 li
cp
0 0 0 1 cmyk
f
195.894 462.639 mo
185.259 462.639 li
185.259 452.005 li
195.894 452.005 li
195.894 462.639 li
cp
0 0 0 0 cmyk
@
206.525 462.639 mo
195.891 462.639 li
195.891 452.005 li
206.525 452.005 li
206.525 462.639 li
cp
0 0 0 1 cmyk
f
206.525 462.639 mo
195.891 462.639 li
195.891 452.005 li
206.525 452.005 li
206.525 462.639 li
cp
0 0 0 0 cmyk
@
217.157 462.639 mo
206.522 462.639 li
206.522 452.005 li
217.157 452.005 li
217.157 462.639 li
cp
0 0 0 1 cmyk
f
217.157 462.639 mo
206.522 462.639 li
206.522 452.005 li
217.157 452.005 li
217.157 462.639 li
cp
0 0 0 0 cmyk
@
153.366 452.01 mo
142.73 452.01 li
142.73 441.373 li
153.366 441.373 li
153.366 452.01 li
cp
0 0 0 1 cmyk
f
153.366 452.01 mo
142.73 452.01 li
142.73 441.373 li
153.366 441.373 li
153.366 452.01 li
cp
0 0 0 0 cmyk
@
163.998 452.01 mo
153.362 452.01 li
153.362 441.373 li
163.998 441.373 li
163.998 452.01 li
cp
0 0 0 1 cmyk
f
163.998 452.01 mo
153.362 452.01 li
153.362 441.373 li
163.998 441.373 li
163.998 452.01 li
cp
0 0 0 0 cmyk
@
174.63 452.01 mo
163.995 452.01 li
163.995 441.373 li
174.63 441.373 li
174.63 452.01 li
cp
0 0 0 1 cmyk
f
174.63 452.01 mo
163.995 452.01 li
163.995 441.373 li
174.63 441.373 li
174.63 452.01 li
cp
0 0 0 0 cmyk
@
195.894 452.01 mo
185.259 452.01 li
185.259 441.373 li
195.894 441.373 li
195.894 452.01 li
cp
0 0 0 1 cmyk
f
195.894 452.01 mo
185.259 452.01 li
185.259 441.373 li
195.894 441.373 li
195.894 452.01 li
cp
0 0 0 0 cmyk
@
206.525 452.01 mo
195.891 452.01 li
195.891 441.373 li
206.525 441.373 li
206.525 452.01 li
cp
0 0 0 1 cmyk
f
206.525 452.01 mo
195.891 452.01 li
195.891 441.373 li
206.525 441.373 li
206.525 452.01 li
cp
0 0 0 0 cmyk
@
217.157 452.01 mo
206.522 452.01 li
206.522 441.373 li
217.157 441.373 li
217.157 452.01 li
cp
0 0 0 1 cmyk
f
217.157 452.01 mo
206.522 452.01 li
206.522 441.373 li
217.157 441.373 li
217.157 452.01 li
cp
0 0 0 0 cmyk
@
142.733 441.379 mo
132.099 441.379 li
132.099 430.746 li
142.733 430.746 li
142.733 441.379 li
cp
0 0 0 1 cmyk
f
142.733 441.379 mo
132.099 441.379 li
132.099 430.746 li
142.733 430.746 li
142.733 441.379 li
cp
0 0 0 0 cmyk
@
153.366 441.379 mo
142.73 441.379 li
142.73 430.746 li
153.366 430.746 li
153.366 441.379 li
cp
0 0 0 1 cmyk
f
153.366 441.379 mo
142.73 441.379 li
142.73 430.746 li
153.366 430.746 li
153.366 441.379 li
cp
0 0 0 0 cmyk
@
163.998 441.379 mo
153.362 441.379 li
153.362 430.746 li
163.998 430.746 li
163.998 441.379 li
cp
0 0 0 1 cmyk
f
163.998 441.379 mo
153.362 441.379 li
153.362 430.746 li
163.998 430.746 li
163.998 441.379 li
cp
0 0 0 0 cmyk
@
174.63 441.379 mo
163.995 441.379 li
163.995 430.746 li
174.63 430.746 li
174.63 441.379 li
cp
0 0 0 1 cmyk
f
174.63 441.379 mo
163.995 441.379 li
163.995 430.746 li
174.63 430.746 li
174.63 441.379 li
cp
0 0 0 0 cmyk
@
185.261 441.379 mo
174.626 441.379 li
174.626 430.746 li
185.261 430.746 li
185.261 441.379 li
cp
0 0 0 1 cmyk
f
185.261 441.379 mo
174.626 441.379 li
174.626 430.746 li
185.261 430.746 li
185.261 441.379 li
cp
0 0 0 0 cmyk
@
195.894 441.379 mo
185.259 441.379 li
185.259 430.746 li
195.894 430.746 li
195.894 441.379 li
cp
0 0 0 1 cmyk
f
195.894 441.379 mo
185.259 441.379 li
185.259 430.746 li
195.894 430.746 li
195.894 441.379 li
cp
0 0 0 0 cmyk
@
217.157 441.379 mo
206.522 441.379 li
206.522 430.746 li
217.157 430.746 li
217.157 441.379 li
cp
0 0 0 1 cmyk
f
217.157 441.379 mo
206.522 441.379 li
206.522 430.746 li
217.157 430.746 li
217.157 441.379 li
cp
0 0 0 0 cmyk
@
142.733 430.75 mo
132.099 430.75 li
132.099 420.117 li
142.733 420.117 li
142.733 430.75 li
cp
0 0 0 1 cmyk
f
142.733 430.75 mo
132.099 430.75 li
132.099 420.117 li
142.733 420.117 li
142.733 430.75 li
cp
0 0 0 0 cmyk
@
185.261 430.75 mo
174.626 430.75 li
174.626 420.117 li
185.261 420.117 li
185.261 430.75 li
cp
0 0 0 1 cmyk
f
185.261 430.75 mo
174.626 430.75 li
174.626 420.117 li
185.261 420.117 li
185.261 430.75 li
cp
0 0 0 0 cmyk
@
217.157 430.75 mo
206.522 430.75 li
206.522 420.117 li
217.157 420.117 li
217.157 430.75 li
cp
0 0 0 1 cmyk
f
217.157 430.75 mo
206.522 430.75 li
206.522 420.117 li
217.157 420.117 li
217.157 430.75 li
cp
0 0 0 0 cmyk
@
132.103 483.897 mo
121.467 483.897 li
121.467 473.264 li
132.103 473.264 li
132.103 483.897 li
cp
0 0 0 1 cmyk
f
132.103 483.897 mo
121.467 483.897 li
121.467 473.264 li
132.103 473.264 li
132.103 483.897 li
cp
0 0 0 0 cmyk
@
132.103 473.269 mo
121.467 473.269 li
121.467 462.635 li
132.103 462.635 li
132.103 473.269 li
cp
0 0 0 1 cmyk
f
132.103 473.269 mo
121.467 473.269 li
121.467 462.635 li
132.103 462.635 li
132.103 473.269 li
cp
0 0 0 0 cmyk
@
132.103 462.639 mo
121.467 462.639 li
121.467 452.005 li
132.103 452.005 li
132.103 462.639 li
cp
0 0 0 1 cmyk
f
132.103 462.639 mo
121.467 462.639 li
121.467 452.005 li
132.103 452.005 li
132.103 462.639 li
cp
0 0 0 0 cmyk
@
132.103 452.01 mo
121.467 452.01 li
121.467 441.373 li
132.103 441.373 li
132.103 452.01 li
cp
0 0 0 1 cmyk
f
132.103 452.01 mo
121.467 452.01 li
121.467 441.373 li
132.103 441.373 li
132.103 452.01 li
cp
0 0 0 0 cmyk
@
132.103 441.379 mo
121.467 441.379 li
121.467 430.746 li
132.103 430.746 li
132.103 441.379 li
cp
0 0 0 1 cmyk
f
132.103 441.379 mo
121.467 441.379 li
121.467 430.746 li
132.103 430.746 li
132.103 441.379 li
cp
0 0 0 0 cmyk
@
132.103 420.123 mo
121.467 420.123 li
121.467 409.488 li
132.103 409.488 li
132.103 420.123 li
cp
0 0 0 1 cmyk
f
132.103 420.123 mo
121.467 420.123 li
121.467 409.488 li
132.103 409.488 li
132.103 420.123 li
cp
0 0 0 0 cmyk
@
121.47 494.526 mo
110.835 494.526 li
110.835 483.893 li
121.47 483.893 li
121.47 494.526 li
cp
0 0 0 1 cmyk
f
121.47 494.526 mo
110.835 494.526 li
110.835 483.893 li
121.47 483.893 li
121.47 494.526 li
cp
0 0 0 0 cmyk
@
121.47 473.269 mo
110.835 473.269 li
110.835 462.635 li
121.47 462.635 li
121.47 473.269 li
cp
0 0 0 1 cmyk
f
121.47 473.269 mo
110.835 473.269 li
110.835 462.635 li
121.47 462.635 li
121.47 473.269 li
cp
0 0 0 0 cmyk
@
121.47 462.639 mo
110.835 462.639 li
110.835 452.005 li
121.47 452.005 li
121.47 462.639 li
cp
0 0 0 1 cmyk
f
121.47 462.639 mo
110.835 462.639 li
110.835 452.005 li
121.47 452.005 li
121.47 462.639 li
cp
0 0 0 0 cmyk
@
121.47 452.01 mo
110.835 452.01 li
110.835 441.373 li
121.47 441.373 li
121.47 452.01 li
cp
0 0 0 1 cmyk
f
121.47 452.01 mo
110.835 452.01 li
110.835 441.373 li
121.47 441.373 li
121.47 452.01 li
cp
0 0 0 0 cmyk
@
110.839 462.639 mo
100.204 462.639 li
100.204 452.005 li
110.839 452.005 li
110.839 462.639 li
cp
0 0 0 1 cmyk
f
110.839 462.639 mo
100.204 462.639 li
100.204 452.005 li
110.839 452.005 li
110.839 462.639 li
cp
0 0 0 0 cmyk
@
110.839 452.01 mo
100.204 452.01 li
100.204 441.373 li
110.839 441.373 li
110.839 452.01 li
cp
0 0 0 1 cmyk
f
110.839 452.01 mo
100.204 452.01 li
100.204 441.373 li
110.839 441.373 li
110.839 452.01 li
cp
0 0 0 0 cmyk
@
110.839 441.379 mo
100.204 441.379 li
100.204 430.746 li
110.839 430.746 li
110.839 441.379 li
cp
0 0 0 1 cmyk
f
110.839 441.379 mo
100.204 441.379 li
100.204 430.746 li
110.839 430.746 li
110.839 441.379 li
cp
0 0 0 0 cmyk
@
110.839 430.75 mo
100.204 430.75 li
100.204 420.117 li
110.839 420.117 li
110.839 430.75 li
cp
0 0 0 1 cmyk
f
110.839 430.75 mo
100.204 430.75 li
100.204 420.117 li
110.839 420.117 li
110.839 430.75 li
cp
0 0 0 0 cmyk
@
195.894 420.123 mo
185.259 420.123 li
185.259 409.488 li
195.894 409.488 li
195.894 420.123 li
cp
0 0 0 1 cmyk
f
195.894 420.123 mo
185.259 420.123 li
185.259 409.488 li
195.894 409.488 li
195.894 420.123 li
cp
0 0 0 0 cmyk
@
766.926 229.771 mo
760.012 229.771 li
760.012 222.858 li
766.926 222.858 li
766.926 229.771 li
cp
0 0 0 1 cmyk
f
1.95 lw
766.926 229.771 mo
760.012 229.771 li
760.012 222.858 li
766.926 222.858 li
766.926 229.771 li
cp
0 0 0 0 cmyk
@
760.016 222.861 mo
753.104 222.861 li
753.104 215.949 li
760.016 215.949 li
760.016 222.861 li
cp
0 0 0 1 cmyk
f
760.016 222.861 mo
753.104 222.861 li
753.104 215.949 li
760.016 215.949 li
760.016 222.861 li
cp
0 0 0 0 cmyk
@
725.459 215.953 mo
718.547 215.953 li
718.547 209.04 li
725.459 209.04 li
725.459 215.953 li
cp
0 0 0 1 cmyk
f
725.459 215.953 mo
718.547 215.953 li
718.547 209.04 li
725.459 209.04 li
725.459 215.953 li
cp
0 0 0 0 cmyk
@
732.372 215.953 mo
725.459 215.953 li
725.459 209.04 li
732.372 209.04 li
732.372 215.953 li
cp
0 0 0 1 cmyk
f
732.372 215.953 mo
725.459 215.953 li
725.459 209.04 li
732.372 209.04 li
732.372 215.953 li
cp
0 0 0 0 cmyk
@
739.282 215.953 mo
732.37 215.953 li
732.37 209.04 li
739.282 209.04 li
739.282 215.953 li
cp
0 0 0 1 cmyk
f
739.282 215.953 mo
732.37 215.953 li
732.37 209.04 li
739.282 209.04 li
739.282 215.953 li
cp
0 0 0 0 cmyk
@
746.194 215.953 mo
739.282 215.953 li
739.282 209.04 li
746.194 209.04 li
746.194 215.953 li
cp
0 0 0 1 cmyk
f
746.194 215.953 mo
739.282 215.953 li
739.282 209.04 li
746.194 209.04 li
746.194 215.953 li
cp
0 0 0 0 cmyk
@
753.104 215.953 mo
746.192 215.953 li
746.192 209.04 li
753.104 209.04 li
753.104 215.953 li
cp
0 0 0 1 cmyk
f
753.104 215.953 mo
746.192 215.953 li
746.192 209.04 li
753.104 209.04 li
753.104 215.953 li
cp
0 0 0 0 cmyk
@
760.016 215.953 mo
753.104 215.953 li
753.104 209.04 li
760.016 209.04 li
760.016 215.953 li
cp
0 0 0 1 cmyk
f
760.016 215.953 mo
753.104 215.953 li
753.104 209.04 li
760.016 209.04 li
760.016 215.953 li
cp
0 0 0 0 cmyk
@
766.926 215.953 mo
760.012 215.953 li
760.012 209.04 li
766.926 209.04 li
766.926 215.953 li
cp
0 0 0 1 cmyk
f
766.926 215.953 mo
760.012 215.953 li
760.012 209.04 li
766.926 209.04 li
766.926 215.953 li
cp
0 0 0 0 cmyk
@
725.459 209.043 mo
718.547 209.043 li
718.547 202.131 li
725.459 202.131 li
725.459 209.043 li
cp
0 0 0 1 cmyk
f
725.459 209.043 mo
718.547 209.043 li
718.547 202.131 li
725.459 202.131 li
725.459 209.043 li
cp
0 0 0 0 cmyk
@
732.372 209.043 mo
725.459 209.043 li
725.459 202.131 li
732.372 202.131 li
732.372 209.043 li
cp
0 0 0 1 cmyk
f
732.372 209.043 mo
725.459 209.043 li
725.459 202.131 li
732.372 202.131 li
732.372 209.043 li
cp
0 0 0 0 cmyk
@
739.282 209.043 mo
732.37 209.043 li
732.37 202.131 li
739.282 202.131 li
739.282 209.043 li
cp
0 0 0 1 cmyk
f
739.282 209.043 mo
732.37 209.043 li
732.37 202.131 li
739.282 202.131 li
739.282 209.043 li
cp
0 0 0 0 cmyk
@
746.194 209.043 mo
739.282 209.043 li
739.282 202.131 li
746.194 202.131 li
746.194 209.043 li
cp
0 0 0 1 cmyk
f
746.194 209.043 mo
739.282 209.043 li
739.282 202.131 li
746.194 202.131 li
746.194 209.043 li
cp
0 0 0 0 cmyk
@
753.104 209.043 mo
746.192 209.043 li
746.192 202.131 li
753.104 202.131 li
753.104 209.043 li
cp
0 0 0 1 cmyk
f
753.104 209.043 mo
746.192 209.043 li
746.192 202.131 li
753.104 202.131 li
753.104 209.043 li
cp
0 0 0 0 cmyk
@
760.016 209.043 mo
753.104 209.043 li
753.104 202.131 li
760.016 202.131 li
760.016 209.043 li
cp
0 0 0 1 cmyk
f
760.016 209.043 mo
753.104 209.043 li
753.104 202.131 li
760.016 202.131 li
760.016 209.043 li
cp
0 0 0 0 cmyk
@
766.926 209.043 mo
760.012 209.043 li
760.012 202.131 li
766.926 202.131 li
766.926 209.043 li
cp
0 0 0 1 cmyk
f
766.926 209.043 mo
760.012 209.043 li
760.012 202.131 li
766.926 202.131 li
766.926 209.043 li
cp
0 0 0 0 cmyk
@
773.836 209.043 mo
766.924 209.043 li
766.924 202.131 li
773.836 202.131 li
773.836 209.043 li
cp
0 0 0 1 cmyk
f
773.836 209.043 mo
766.924 209.043 li
766.924 202.131 li
773.836 202.131 li
773.836 209.043 li
cp
0 0 0 0 cmyk
@
732.372 202.134 mo
725.459 202.134 li
725.459 195.222 li
732.372 195.222 li
732.372 202.134 li
cp
0 0 0 1 cmyk
f
732.372 202.134 mo
725.459 202.134 li
725.459 195.222 li
732.372 195.222 li
732.372 202.134 li
cp
0 0 0 0 cmyk
@
739.282 202.134 mo
732.37 202.134 li
732.37 195.222 li
739.282 195.222 li
739.282 202.134 li
cp
0 0 0 1 cmyk
f
739.282 202.134 mo
732.37 202.134 li
732.37 195.222 li
739.282 195.222 li
739.282 202.134 li
cp
0 0 0 0 cmyk
@
746.194 202.134 mo
739.282 202.134 li
739.282 195.222 li
746.194 195.222 li
746.194 202.134 li
cp
0 0 0 1 cmyk
f
746.194 202.134 mo
739.282 202.134 li
739.282 195.222 li
746.194 195.222 li
746.194 202.134 li
cp
0 0 0 0 cmyk
@
760.016 202.134 mo
753.104 202.134 li
753.104 195.222 li
760.016 195.222 li
760.016 202.134 li
cp
0 0 0 1 cmyk
f
760.016 202.134 mo
753.104 202.134 li
753.104 195.222 li
760.016 195.222 li
760.016 202.134 li
cp
0 0 0 0 cmyk
@
766.926 202.134 mo
760.012 202.134 li
760.012 195.222 li
766.926 195.222 li
766.926 202.134 li
cp
0 0 0 1 cmyk
f
766.926 202.134 mo
760.012 202.134 li
760.012 195.222 li
766.926 195.222 li
766.926 202.134 li
cp
0 0 0 0 cmyk
@
773.836 202.134 mo
766.924 202.134 li
766.924 195.222 li
773.836 195.222 li
773.836 202.134 li
cp
0 0 0 1 cmyk
f
773.836 202.134 mo
766.924 202.134 li
766.924 195.222 li
773.836 195.222 li
773.836 202.134 li
cp
0 0 0 0 cmyk
@
725.459 195.225 mo
718.547 195.225 li
718.547 188.313 li
725.459 188.313 li
725.459 195.225 li
cp
0 0 0 1 cmyk
f
725.459 195.225 mo
718.547 195.225 li
718.547 188.313 li
725.459 188.313 li
725.459 195.225 li
cp
0 0 0 0 cmyk
@
732.372 195.225 mo
725.459 195.225 li
725.459 188.313 li
732.372 188.313 li
732.372 195.225 li
cp
0 0 0 1 cmyk
f
732.372 195.225 mo
725.459 195.225 li
725.459 188.313 li
732.372 188.313 li
732.372 195.225 li
cp
0 0 0 0 cmyk
@
739.282 195.225 mo
732.37 195.225 li
732.37 188.313 li
739.282 188.313 li
739.282 195.225 li
cp
0 0 0 1 cmyk
f
739.282 195.225 mo
732.37 195.225 li
732.37 188.313 li
739.282 188.313 li
739.282 195.225 li
cp
0 0 0 0 cmyk
@
746.194 195.225 mo
739.282 195.225 li
739.282 188.313 li
746.194 188.313 li
746.194 195.225 li
cp
0 0 0 1 cmyk
f
746.194 195.225 mo
739.282 195.225 li
739.282 188.313 li
746.194 188.313 li
746.194 195.225 li
cp
0 0 0 0 cmyk
@
753.104 195.225 mo
746.192 195.225 li
746.192 188.313 li
753.104 188.313 li
753.104 195.225 li
cp
0 0 0 1 cmyk
f
753.104 195.225 mo
746.192 195.225 li
746.192 188.313 li
753.104 188.313 li
753.104 195.225 li
cp
0 0 0 0 cmyk
@
760.016 195.225 mo
753.104 195.225 li
753.104 188.313 li
760.016 188.313 li
760.016 195.225 li
cp
0 0 0 1 cmyk
f
760.016 195.225 mo
753.104 195.225 li
753.104 188.313 li
760.016 188.313 li
760.016 195.225 li
cp
0 0 0 0 cmyk
@
773.836 195.225 mo
766.924 195.225 li
766.924 188.313 li
773.836 188.313 li
773.836 195.225 li
cp
0 0 0 1 cmyk
f
773.836 195.225 mo
766.924 195.225 li
766.924 188.313 li
773.836 188.313 li
773.836 195.225 li
cp
0 0 0 0 cmyk
@
725.459 188.316 mo
718.547 188.316 li
718.547 181.403 li
725.459 181.403 li
725.459 188.316 li
cp
0 0 0 1 cmyk
f
725.459 188.316 mo
718.547 188.316 li
718.547 181.403 li
725.459 181.403 li
725.459 188.316 li
cp
0 0 0 0 cmyk
@
753.104 188.316 mo
746.192 188.316 li
746.192 181.403 li
753.104 181.403 li
753.104 188.316 li
cp
0 0 0 1 cmyk
f
753.104 188.316 mo
746.192 188.316 li
746.192 181.403 li
753.104 181.403 li
753.104 188.316 li
cp
0 0 0 0 cmyk
@
773.836 188.316 mo
766.924 188.316 li
766.924 181.403 li
773.836 181.403 li
773.836 188.316 li
cp
0 0 0 1 cmyk
f
773.836 188.316 mo
766.924 188.316 li
766.924 181.403 li
773.836 181.403 li
773.836 188.316 li
cp
0 0 0 0 cmyk
@
718.549 222.861 mo
711.637 222.861 li
711.637 215.949 li
718.549 215.949 li
718.549 222.861 li
cp
0 0 0 1 cmyk
f
718.549 222.861 mo
711.637 222.861 li
711.637 215.949 li
718.549 215.949 li
718.549 222.861 li
cp
0 0 0 0 cmyk
@
718.549 215.953 mo
711.637 215.953 li
711.637 209.04 li
718.549 209.04 li
718.549 215.953 li
cp
0 0 0 1 cmyk
f
718.549 215.953 mo
711.637 215.953 li
711.637 209.04 li
718.549 209.04 li
718.549 215.953 li
cp
0 0 0 0 cmyk
@
718.549 209.043 mo
711.637 209.043 li
711.637 202.131 li
718.549 202.131 li
718.549 209.043 li
cp
0 0 0 1 cmyk
f
718.549 209.043 mo
711.637 209.043 li
711.637 202.131 li
718.549 202.131 li
718.549 209.043 li
cp
0 0 0 0 cmyk
@
718.549 202.134 mo
711.637 202.134 li
711.637 195.222 li
718.549 195.222 li
718.549 202.134 li
cp
0 0 0 1 cmyk
f
718.549 202.134 mo
711.637 202.134 li
711.637 195.222 li
718.549 195.222 li
718.549 202.134 li
cp
0 0 0 0 cmyk
@
718.549 195.225 mo
711.637 195.225 li
711.637 188.313 li
718.549 188.313 li
718.549 195.225 li
cp
0 0 0 1 cmyk
f
718.549 195.225 mo
711.637 195.225 li
711.637 188.313 li
718.549 188.313 li
718.549 195.225 li
cp
0 0 0 0 cmyk
@
718.549 181.408 mo
711.637 181.408 li
711.637 174.495 li
718.549 174.495 li
718.549 181.408 li
cp
0 0 0 1 cmyk
f
718.549 181.408 mo
711.637 181.408 li
711.637 174.495 li
718.549 174.495 li
718.549 181.408 li
cp
0 0 0 0 cmyk
@
711.639 229.771 mo
704.727 229.771 li
704.727 222.858 li
711.639 222.858 li
711.639 229.771 li
cp
0 0 0 1 cmyk
f
711.639 229.771 mo
704.727 229.771 li
704.727 222.858 li
711.639 222.858 li
711.639 229.771 li
cp
0 0 0 0 cmyk
@
711.639 215.953 mo
704.727 215.953 li
704.727 209.04 li
711.639 209.04 li
711.639 215.953 li
cp
0 0 0 1 cmyk
f
711.639 215.953 mo
704.727 215.953 li
704.727 209.04 li
711.639 209.04 li
711.639 215.953 li
cp
0 0 0 0 cmyk
@
711.639 209.043 mo
704.727 209.043 li
704.727 202.131 li
711.639 202.131 li
711.639 209.043 li
cp
0 0 0 1 cmyk
f
711.639 209.043 mo
704.727 209.043 li
704.727 202.131 li
711.639 202.131 li
711.639 209.043 li
cp
0 0 0 0 cmyk
@
711.639 202.134 mo
704.727 202.134 li
704.727 195.222 li
711.639 195.222 li
711.639 202.134 li
cp
0 0 0 1 cmyk
f
711.639 202.134 mo
704.727 202.134 li
704.727 195.222 li
711.639 195.222 li
711.639 202.134 li
cp
0 0 0 0 cmyk
@
704.729 209.043 mo
697.815 209.043 li
697.815 202.131 li
704.729 202.131 li
704.729 209.043 li
cp
0 0 0 1 cmyk
f
704.729 209.043 mo
697.815 209.043 li
697.815 202.131 li
704.729 202.131 li
704.729 209.043 li
cp
0 0 0 0 cmyk
@
704.729 202.134 mo
697.815 202.134 li
697.815 195.222 li
704.729 195.222 li
704.729 202.134 li
cp
0 0 0 1 cmyk
f
704.729 202.134 mo
697.815 202.134 li
697.815 195.222 li
704.729 195.222 li
704.729 202.134 li
cp
0 0 0 0 cmyk
@
704.729 195.225 mo
697.815 195.225 li
697.815 188.313 li
704.729 188.313 li
704.729 195.225 li
cp
0 0 0 1 cmyk
f
704.729 195.225 mo
697.815 195.225 li
697.815 188.313 li
704.729 188.313 li
704.729 195.225 li
cp
0 0 0 0 cmyk
@
704.729 188.316 mo
697.815 188.316 li
697.815 181.403 li
704.729 181.403 li
704.729 188.316 li
cp
0 0 0 1 cmyk
f
704.729 188.316 mo
697.815 188.316 li
697.815 181.403 li
704.729 181.403 li
704.729 188.316 li
cp
0 0 0 0 cmyk
@
760.016 181.408 mo
753.104 181.408 li
753.104 174.495 li
760.016 174.495 li
760.016 181.408 li
cp
0 0 0 1 cmyk
f
760.016 181.408 mo
753.104 181.408 li
753.104 174.495 li
760.016 174.495 li
760.016 181.408 li
cp
0 0 0 0 cmyk
@
717.649 499.01 mo
711.799 499.01 li
711.799 493.162 li
717.649 493.162 li
717.649 499.01 li
cp
0 0 0 1 cmyk
f
1.65 lw
717.649 499.01 mo
711.799 499.01 li
711.799 493.162 li
717.649 493.162 li
717.649 499.01 li
cp
0 0 0 0 cmyk
@
711.801 493.164 mo
705.95 493.164 li
705.95 487.314 li
711.801 487.314 li
711.801 493.164 li
cp
0 0 0 1 cmyk
f
711.801 493.164 mo
705.95 493.164 li
705.95 487.314 li
711.801 487.314 li
711.801 493.164 li
cp
0 0 0 0 cmyk
@
682.563 487.318 mo
676.713 487.318 li
676.713 481.469 li
682.563 481.469 li
682.563 487.318 li
cp
0 0 0 1 cmyk
f
682.563 487.318 mo
676.713 487.318 li
676.713 481.469 li
682.563 481.469 li
682.563 487.318 li
cp
0 0 0 0 cmyk
@
688.411 487.318 mo
682.561 487.318 li
682.561 481.469 li
688.411 481.469 li
688.411 487.318 li
cp
0 0 0 1 cmyk
f
688.411 487.318 mo
682.561 487.318 li
682.561 481.469 li
688.411 481.469 li
688.411 487.318 li
cp
0 0 0 0 cmyk
@
694.258 487.318 mo
688.409 487.318 li
688.409 481.469 li
694.258 481.469 li
694.258 487.318 li
cp
0 0 0 1 cmyk
f
694.258 487.318 mo
688.409 487.318 li
688.409 481.469 li
694.258 481.469 li
694.258 487.318 li
cp
0 0 0 0 cmyk
@
700.106 487.318 mo
694.256 487.318 li
694.256 481.469 li
700.106 481.469 li
700.106 487.318 li
cp
0 0 0 1 cmyk
f
700.106 487.318 mo
694.256 487.318 li
694.256 481.469 li
700.106 481.469 li
700.106 487.318 li
cp
0 0 0 0 cmyk
@
705.954 487.318 mo
700.104 487.318 li
700.104 481.469 li
705.954 481.469 li
705.954 487.318 li
cp
0 0 0 1 cmyk
f
705.954 487.318 mo
700.104 487.318 li
700.104 481.469 li
705.954 481.469 li
705.954 487.318 li
cp
0 0 0 0 cmyk
@
711.801 487.318 mo
705.95 487.318 li
705.95 481.469 li
711.801 481.469 li
711.801 487.318 li
cp
0 0 0 1 cmyk
f
711.801 487.318 mo
705.95 487.318 li
705.95 481.469 li
711.801 481.469 li
711.801 487.318 li
cp
0 0 0 0 cmyk
@
717.649 487.318 mo
711.799 487.318 li
711.799 481.469 li
717.649 481.469 li
717.649 487.318 li
cp
0 0 0 1 cmyk
f
717.649 487.318 mo
711.799 487.318 li
711.799 481.469 li
717.649 481.469 li
717.649 487.318 li
cp
0 0 0 0 cmyk
@
682.563 481.473 mo
676.713 481.473 li
676.713 475.623 li
682.563 475.623 li
682.563 481.473 li
cp
0 0 0 1 cmyk
f
682.563 481.473 mo
676.713 481.473 li
676.713 475.623 li
682.563 475.623 li
682.563 481.473 li
cp
0 0 0 0 cmyk
@
688.411 481.473 mo
682.561 481.473 li
682.561 475.623 li
688.411 475.623 li
688.411 481.473 li
cp
0 0 0 1 cmyk
f
688.411 481.473 mo
682.561 481.473 li
682.561 475.623 li
688.411 475.623 li
688.411 481.473 li
cp
0 0 0 0 cmyk
@
694.258 481.473 mo
688.409 481.473 li
688.409 475.623 li
694.258 475.623 li
694.258 481.473 li
cp
0 0 0 1 cmyk
f
694.258 481.473 mo
688.409 481.473 li
688.409 475.623 li
694.258 475.623 li
694.258 481.473 li
cp
0 0 0 0 cmyk
@
700.106 481.473 mo
694.256 481.473 li
694.256 475.623 li
700.106 475.623 li
700.106 481.473 li
cp
0 0 0 1 cmyk
f
700.106 481.473 mo
694.256 481.473 li
694.256 475.623 li
700.106 475.623 li
700.106 481.473 li
cp
0 0 0 0 cmyk
@
705.954 481.473 mo
700.104 481.473 li
700.104 475.623 li
705.954 475.623 li
705.954 481.473 li
cp
0 0 0 1 cmyk
f
705.954 481.473 mo
700.104 481.473 li
700.104 475.623 li
705.954 475.623 li
705.954 481.473 li
cp
0 0 0 0 cmyk
@
711.801 481.473 mo
705.95 481.473 li
705.95 475.623 li
711.801 475.623 li
711.801 481.473 li
cp
0 0 0 1 cmyk
f
711.801 481.473 mo
705.95 481.473 li
705.95 475.623 li
711.801 475.623 li
711.801 481.473 li
cp
0 0 0 0 cmyk
@
717.649 481.473 mo
711.799 481.473 li
711.799 475.623 li
717.649 475.623 li
717.649 481.473 li
cp
0 0 0 1 cmyk
f
717.649 481.473 mo
711.799 481.473 li
711.799 475.623 li
717.649 475.623 li
717.649 481.473 li
cp
0 0 0 0 cmyk
@
723.497 481.473 mo
717.647 481.473 li
717.647 475.623 li
723.497 475.623 li
723.497 481.473 li
cp
0 0 0 1 cmyk
f
723.497 481.473 mo
717.647 481.473 li
717.647 475.623 li
723.497 475.623 li
723.497 481.473 li
cp
0 0 0 0 cmyk
@
688.411 475.625 mo
682.561 475.625 li
682.561 469.776 li
688.411 469.776 li
688.411 475.625 li
cp
0 0 0 1 cmyk
f
688.411 475.625 mo
682.561 475.625 li
682.561 469.776 li
688.411 469.776 li
688.411 475.625 li
cp
0 0 0 0 cmyk
@
694.258 475.625 mo
688.409 475.625 li
688.409 469.776 li
694.258 469.776 li
694.258 475.625 li
cp
0 0 0 1 cmyk
f
694.258 475.625 mo
688.409 475.625 li
688.409 469.776 li
694.258 469.776 li
694.258 475.625 li
cp
0 0 0 0 cmyk
@
700.106 475.625 mo
694.256 475.625 li
694.256 469.776 li
700.106 469.776 li
700.106 475.625 li
cp
0 0 0 1 cmyk
f
700.106 475.625 mo
694.256 475.625 li
694.256 469.776 li
700.106 469.776 li
700.106 475.625 li
cp
0 0 0 0 cmyk
@
711.801 475.625 mo
705.95 475.625 li
705.95 469.776 li
711.801 469.776 li
711.801 475.625 li
cp
0 0 0 1 cmyk
f
711.801 475.625 mo
705.95 475.625 li
705.95 469.776 li
711.801 469.776 li
711.801 475.625 li
cp
0 0 0 0 cmyk
@
717.649 475.625 mo
711.799 475.625 li
711.799 469.776 li
717.649 469.776 li
717.649 475.625 li
cp
0 0 0 1 cmyk
f
717.649 475.625 mo
711.799 475.625 li
711.799 469.776 li
717.649 469.776 li
717.649 475.625 li
cp
0 0 0 0 cmyk
@
723.497 475.625 mo
717.647 475.625 li
717.647 469.776 li
723.497 469.776 li
723.497 475.625 li
cp
0 0 0 1 cmyk
f
723.497 475.625 mo
717.647 475.625 li
717.647 469.776 li
723.497 469.776 li
723.497 475.625 li
cp
0 0 0 0 cmyk
@
682.563 469.777 mo
676.713 469.777 li
676.713 463.93 li
682.563 463.93 li
682.563 469.777 li
cp
0 0 0 1 cmyk
f
682.563 469.777 mo
676.713 469.777 li
676.713 463.93 li
682.563 463.93 li
682.563 469.777 li
cp
0 0 0 0 cmyk
@
688.411 469.777 mo
682.561 469.777 li
682.561 463.93 li
688.411 463.93 li
688.411 469.777 li
cp
0 0 0 1 cmyk
f
688.411 469.777 mo
682.561 469.777 li
682.561 463.93 li
688.411 463.93 li
688.411 469.777 li
cp
0 0 0 0 cmyk
@
694.258 469.777 mo
688.409 469.777 li
688.409 463.93 li
694.258 463.93 li
694.258 469.777 li
cp
0 0 0 1 cmyk
f
694.258 469.777 mo
688.409 469.777 li
688.409 463.93 li
694.258 463.93 li
694.258 469.777 li
cp
0 0 0 0 cmyk
@
700.106 469.777 mo
694.256 469.777 li
694.256 463.93 li
700.106 463.93 li
700.106 469.777 li
cp
0 0 0 1 cmyk
f
700.106 469.777 mo
694.256 469.777 li
694.256 463.93 li
700.106 463.93 li
700.106 469.777 li
cp
0 0 0 0 cmyk
@
705.954 469.777 mo
700.104 469.777 li
700.104 463.93 li
705.954 463.93 li
705.954 469.777 li
cp
0 0 0 1 cmyk
f
705.954 469.777 mo
700.104 469.777 li
700.104 463.93 li
705.954 463.93 li
705.954 469.777 li
cp
0 0 0 0 cmyk
@
711.801 469.777 mo
705.95 469.777 li
705.95 463.93 li
711.801 463.93 li
711.801 469.777 li
cp
0 0 0 1 cmyk
f
711.801 469.777 mo
705.95 469.777 li
705.95 463.93 li
711.801 463.93 li
711.801 469.777 li
cp
0 0 0 0 cmyk
@
723.497 469.777 mo
717.647 469.777 li
717.647 463.93 li
723.497 463.93 li
723.497 469.777 li
cp
0 0 0 1 cmyk
f
723.497 469.777 mo
717.647 469.777 li
717.647 463.93 li
723.497 463.93 li
723.497 469.777 li
cp
0 0 0 0 cmyk
@
682.563 463.935 mo
676.713 463.935 li
676.713 458.084 li
682.563 458.084 li
682.563 463.935 li
cp
0 0 0 1 cmyk
f
682.563 463.935 mo
676.713 463.935 li
676.713 458.084 li
682.563 458.084 li
682.563 463.935 li
cp
0 0 0 0 cmyk
@
705.954 463.935 mo
700.104 463.935 li
700.104 458.084 li
705.954 458.084 li
705.954 463.935 li
cp
0 0 0 1 cmyk
f
705.954 463.935 mo
700.104 463.935 li
700.104 458.084 li
705.954 458.084 li
705.954 463.935 li
cp
0 0 0 0 cmyk
@
723.497 463.935 mo
717.647 463.935 li
717.647 458.084 li
723.497 458.084 li
723.497 463.935 li
cp
0 0 0 1 cmyk
f
723.497 463.935 mo
717.647 463.935 li
717.647 458.084 li
723.497 458.084 li
723.497 463.935 li
cp
0 0 0 0 cmyk
@
676.715 493.164 mo
670.866 493.164 li
670.866 487.314 li
676.715 487.314 li
676.715 493.164 li
cp
0 0 0 1 cmyk
f
676.715 493.164 mo
670.866 493.164 li
670.866 487.314 li
676.715 487.314 li
676.715 493.164 li
cp
0 0 0 0 cmyk
@
676.715 487.318 mo
670.866 487.318 li
670.866 481.469 li
676.715 481.469 li
676.715 487.318 li
cp
0 0 0 1 cmyk
f
676.715 487.318 mo
670.866 487.318 li
670.866 481.469 li
676.715 481.469 li
676.715 487.318 li
cp
0 0 0 0 cmyk
@
676.715 481.473 mo
670.866 481.473 li
670.866 475.623 li
676.715 475.623 li
676.715 481.473 li
cp
0 0 0 1 cmyk
f
676.715 481.473 mo
670.866 481.473 li
670.866 475.623 li
676.715 475.623 li
676.715 481.473 li
cp
0 0 0 0 cmyk
@
676.715 475.625 mo
670.866 475.625 li
670.866 469.776 li
676.715 469.776 li
676.715 475.625 li
cp
0 0 0 1 cmyk
f
676.715 475.625 mo
670.866 475.625 li
670.866 469.776 li
676.715 469.776 li
676.715 475.625 li
cp
0 0 0 0 cmyk
@
676.715 469.777 mo
670.866 469.777 li
670.866 463.93 li
676.715 463.93 li
676.715 469.777 li
cp
0 0 0 1 cmyk
f
676.715 469.777 mo
670.866 469.777 li
670.866 463.93 li
676.715 463.93 li
676.715 469.777 li
cp
0 0 0 0 cmyk
@
676.715 458.087 mo
670.866 458.087 li
670.866 452.239 li
676.715 452.239 li
676.715 458.087 li
cp
0 0 0 1 cmyk
f
676.715 458.087 mo
670.866 458.087 li
670.866 452.239 li
676.715 452.239 li
676.715 458.087 li
cp
0 0 0 0 cmyk
@
670.868 499.01 mo
665.02 499.01 li
665.02 493.162 li
670.868 493.162 li
670.868 499.01 li
cp
0 0 0 1 cmyk
f
670.868 499.01 mo
665.02 499.01 li
665.02 493.162 li
670.868 493.162 li
670.868 499.01 li
cp
0 0 0 0 cmyk
@
670.868 487.318 mo
665.02 487.318 li
665.02 481.469 li
670.868 481.469 li
670.868 487.318 li
cp
0 0 0 1 cmyk
f
670.868 487.318 mo
665.02 487.318 li
665.02 481.469 li
670.868 481.469 li
670.868 487.318 li
cp
0 0 0 0 cmyk
@
670.868 481.473 mo
665.02 481.473 li
665.02 475.623 li
670.868 475.623 li
670.868 481.473 li
cp
0 0 0 1 cmyk
f
670.868 481.473 mo
665.02 481.473 li
665.02 475.623 li
670.868 475.623 li
670.868 481.473 li
cp
0 0 0 0 cmyk
@
670.868 475.625 mo
665.02 475.625 li
665.02 469.776 li
670.868 469.776 li
670.868 475.625 li
cp
0 0 0 1 cmyk
f
670.868 475.625 mo
665.02 475.625 li
665.02 469.776 li
670.868 469.776 li
670.868 475.625 li
cp
0 0 0 0 cmyk
@
665.02 481.473 mo
659.17 481.473 li
659.17 475.623 li
665.02 475.623 li
665.02 481.473 li
cp
0 0 0 1 cmyk
f
665.02 481.473 mo
659.17 481.473 li
659.17 475.623 li
665.02 475.623 li
665.02 481.473 li
cp
0 0 0 0 cmyk
@
665.02 475.625 mo
659.17 475.625 li
659.17 469.776 li
665.02 469.776 li
665.02 475.625 li
cp
0 0 0 1 cmyk
f
665.02 475.625 mo
659.17 475.625 li
659.17 469.776 li
665.02 469.776 li
665.02 475.625 li
cp
0 0 0 0 cmyk
@
665.02 469.777 mo
659.17 469.777 li
659.17 463.93 li
665.02 463.93 li
665.02 469.777 li
cp
0 0 0 1 cmyk
f
665.02 469.777 mo
659.17 469.777 li
659.17 463.93 li
665.02 463.93 li
665.02 469.777 li
cp
0 0 0 0 cmyk
@
665.02 463.935 mo
659.17 463.935 li
659.17 458.084 li
665.02 458.084 li
665.02 463.935 li
cp
0 0 0 1 cmyk
f
665.02 463.935 mo
659.17 463.935 li
659.17 458.084 li
665.02 458.084 li
665.02 463.935 li
cp
0 0 0 0 cmyk
@
711.801 458.087 mo
705.95 458.087 li
705.95 452.239 li
711.801 452.239 li
711.801 458.087 li
cp
0 0 0 1 cmyk
f
711.801 458.087 mo
705.95 458.087 li
705.95 452.239 li
711.801 452.239 li
711.801 458.087 li
cp
0 0 0 0 cmyk
@
485.782 459.98 mo
477.807 459.98 li
477.807 452.006 li
485.782 452.006 li
485.782 459.98 li
cp
0 0 0 1 cmyk
f
2.25 lw
485.782 459.98 mo
477.807 459.98 li
477.807 452.006 li
485.782 452.006 li
485.782 459.98 li
cp
0 0 0 0 cmyk
@
477.807 452.011 mo
469.833 452.011 li
469.833 444.033 li
477.807 444.033 li
477.807 452.011 li
cp
0 0 0 1 cmyk
f
477.807 452.011 mo
469.833 452.011 li
469.833 444.033 li
477.807 444.033 li
477.807 452.011 li
cp
0 0 0 0 cmyk
@
437.938 444.037 mo
429.961 444.037 li
429.961 436.062 li
437.938 436.062 li
437.938 444.037 li
cp
0 0 0 1 cmyk
f
437.938 444.037 mo
429.961 444.037 li
429.961 436.062 li
437.938 436.062 li
437.938 444.037 li
cp
0 0 0 0 cmyk
@
445.913 444.037 mo
437.934 444.037 li
437.934 436.062 li
445.913 436.062 li
445.913 444.037 li
cp
0 0 0 1 cmyk
f
445.913 444.037 mo
437.934 444.037 li
437.934 436.062 li
445.913 436.062 li
445.913 444.037 li
cp
0 0 0 0 cmyk
@
453.887 444.037 mo
445.909 444.037 li
445.909 436.062 li
453.887 436.062 li
453.887 444.037 li
cp
0 0 0 1 cmyk
f
453.887 444.037 mo
445.909 444.037 li
445.909 436.062 li
453.887 436.062 li
453.887 444.037 li
cp
0 0 0 0 cmyk
@
461.862 444.037 mo
453.883 444.037 li
453.883 436.062 li
461.862 436.062 li
461.862 444.037 li
cp
0 0 0 1 cmyk
f
461.862 444.037 mo
453.883 444.037 li
453.883 436.062 li
461.862 436.062 li
461.862 444.037 li
cp
0 0 0 0 cmyk
@
469.834 444.037 mo
461.858 444.037 li
461.858 436.062 li
469.834 436.062 li
469.834 444.037 li
cp
0 0 0 1 cmyk
f
469.834 444.037 mo
461.858 444.037 li
461.858 436.062 li
469.834 436.062 li
469.834 444.037 li
cp
0 0 0 0 cmyk
@
477.807 444.037 mo
469.833 444.037 li
469.833 436.062 li
477.807 436.062 li
477.807 444.037 li
cp
0 0 0 1 cmyk
f
477.807 444.037 mo
469.833 444.037 li
469.833 436.062 li
477.807 436.062 li
477.807 444.037 li
cp
0 0 0 0 cmyk
@
485.782 444.037 mo
477.807 444.037 li
477.807 436.062 li
485.782 436.062 li
485.782 444.037 li
cp
0 0 0 1 cmyk
f
485.782 444.037 mo
477.807 444.037 li
477.807 436.062 li
485.782 436.062 li
485.782 444.037 li
cp
0 0 0 0 cmyk
@
437.938 436.064 mo
429.961 436.064 li
429.961 428.09 li
437.938 428.09 li
437.938 436.064 li
cp
0 0 0 1 cmyk
f
437.938 436.064 mo
429.961 436.064 li
429.961 428.09 li
437.938 428.09 li
437.938 436.064 li
cp
0 0 0 0 cmyk
@
445.913 436.064 mo
437.934 436.064 li
437.934 428.09 li
445.913 428.09 li
445.913 436.064 li
cp
0 0 0 1 cmyk
f
445.913 436.064 mo
437.934 436.064 li
437.934 428.09 li
445.913 428.09 li
445.913 436.064 li
cp
0 0 0 0 cmyk
@
453.887 436.064 mo
445.909 436.064 li
445.909 428.09 li
453.887 428.09 li
453.887 436.064 li
cp
0 0 0 1 cmyk
f
453.887 436.064 mo
445.909 436.064 li
445.909 428.09 li
453.887 428.09 li
453.887 436.064 li
cp
0 0 0 0 cmyk
@
461.862 436.064 mo
453.883 436.064 li
453.883 428.09 li
461.862 428.09 li
461.862 436.064 li
cp
0 0 0 1 cmyk
f
461.862 436.064 mo
453.883 436.064 li
453.883 428.09 li
461.862 428.09 li
461.862 436.064 li
cp
0 0 0 0 cmyk
@
469.834 436.064 mo
461.858 436.064 li
461.858 428.09 li
469.834 428.09 li
469.834 436.064 li
cp
0 0 0 1 cmyk
f
469.834 436.064 mo
461.858 436.064 li
461.858 428.09 li
469.834 428.09 li
469.834 436.064 li
cp
0 0 0 0 cmyk
@
477.807 436.064 mo
469.833 436.064 li
469.833 428.09 li
477.807 428.09 li
477.807 436.064 li
cp
0 0 0 1 cmyk
f
477.807 436.064 mo
469.833 436.064 li
469.833 428.09 li
477.807 428.09 li
477.807 436.064 li
cp
0 0 0 0 cmyk
@
485.782 436.064 mo
477.807 436.064 li
477.807 428.09 li
485.782 428.09 li
485.782 436.064 li
cp
0 0 0 1 cmyk
f
485.782 436.064 mo
477.807 436.064 li
477.807 428.09 li
485.782 428.09 li
485.782 436.064 li
cp
0 0 0 0 cmyk
@
493.756 436.064 mo
485.782 436.064 li
485.782 428.09 li
493.756 428.09 li
493.756 436.064 li
cp
0 0 0 1 cmyk
f
493.756 436.064 mo
485.782 436.064 li
485.782 428.09 li
493.756 428.09 li
493.756 436.064 li
cp
0 0 0 0 cmyk
@
445.913 428.093 mo
437.934 428.093 li
437.934 420.117 li
445.913 420.117 li
445.913 428.093 li
cp
0 0 0 1 cmyk
f
445.913 428.093 mo
437.934 428.093 li
437.934 420.117 li
445.913 420.117 li
445.913 428.093 li
cp
0 0 0 0 cmyk
@
453.887 428.093 mo
445.909 428.093 li
445.909 420.117 li
453.887 420.117 li
453.887 428.093 li
cp
0 0 0 1 cmyk
f
453.887 428.093 mo
445.909 428.093 li
445.909 420.117 li
453.887 420.117 li
453.887 428.093 li
cp
0 0 0 0 cmyk
@
461.862 428.093 mo
453.883 428.093 li
453.883 420.117 li
461.862 420.117 li
461.862 428.093 li
cp
0 0 0 1 cmyk
f
461.862 428.093 mo
453.883 428.093 li
453.883 420.117 li
461.862 420.117 li
461.862 428.093 li
cp
0 0 0 0 cmyk
@
477.807 428.093 mo
469.833 428.093 li
469.833 420.117 li
477.807 420.117 li
477.807 428.093 li
cp
0 0 0 1 cmyk
f
477.807 428.093 mo
469.833 428.093 li
469.833 420.117 li
477.807 420.117 li
477.807 428.093 li
cp
0 0 0 0 cmyk
@
485.782 428.093 mo
477.807 428.093 li
477.807 420.117 li
485.782 420.117 li
485.782 428.093 li
cp
0 0 0 1 cmyk
f
485.782 428.093 mo
477.807 428.093 li
477.807 420.117 li
485.782 420.117 li
485.782 428.093 li
cp
0 0 0 0 cmyk
@
493.756 428.093 mo
485.782 428.093 li
485.782 420.117 li
493.756 420.117 li
493.756 428.093 li
cp
0 0 0 1 cmyk
f
493.756 428.093 mo
485.782 428.093 li
485.782 420.117 li
493.756 420.117 li
493.756 428.093 li
cp
0 0 0 0 cmyk
@
437.938 420.121 mo
429.961 420.121 li
429.961 412.145 li
437.938 412.145 li
437.938 420.121 li
cp
0 0 0 1 cmyk
f
437.938 420.121 mo
429.961 420.121 li
429.961 412.145 li
437.938 412.145 li
437.938 420.121 li
cp
0 0 0 0 cmyk
@
445.913 420.121 mo
437.934 420.121 li
437.934 412.145 li
445.913 412.145 li
445.913 420.121 li
cp
0 0 0 1 cmyk
f
445.913 420.121 mo
437.934 420.121 li
437.934 412.145 li
445.913 412.145 li
445.913 420.121 li
cp
0 0 0 0 cmyk
@
453.887 420.121 mo
445.909 420.121 li
445.909 412.145 li
453.887 412.145 li
453.887 420.121 li
cp
0 0 0 1 cmyk
f
453.887 420.121 mo
445.909 420.121 li
445.909 412.145 li
453.887 412.145 li
453.887 420.121 li
cp
0 0 0 0 cmyk
@
461.862 420.121 mo
453.883 420.121 li
453.883 412.145 li
461.862 412.145 li
461.862 420.121 li
cp
0 0 0 1 cmyk
f
461.862 420.121 mo
453.883 420.121 li
453.883 412.145 li
461.862 412.145 li
461.862 420.121 li
cp
0 0 0 0 cmyk
@
469.834 420.121 mo
461.858 420.121 li
461.858 412.145 li
469.834 412.145 li
469.834 420.121 li
cp
0 0 0 1 cmyk
f
469.834 420.121 mo
461.858 420.121 li
461.858 412.145 li
469.834 412.145 li
469.834 420.121 li
cp
0 0 0 0 cmyk
@
477.807 420.121 mo
469.833 420.121 li
469.833 412.145 li
477.807 412.145 li
477.807 420.121 li
cp
0 0 0 1 cmyk
f
477.807 420.121 mo
469.833 420.121 li
469.833 412.145 li
477.807 412.145 li
477.807 420.121 li
cp
0 0 0 0 cmyk
@
493.756 420.121 mo
485.782 420.121 li
485.782 412.145 li
493.756 412.145 li
493.756 420.121 li
cp
0 0 0 1 cmyk
f
493.756 420.121 mo
485.782 420.121 li
485.782 412.145 li
493.756 412.145 li
493.756 420.121 li
cp
0 0 0 0 cmyk
@
437.938 412.149 mo
429.961 412.149 li
429.961 404.174 li
437.938 404.174 li
437.938 412.149 li
cp
0 0 0 1 cmyk
f
437.938 412.149 mo
429.961 412.149 li
429.961 404.174 li
437.938 404.174 li
437.938 412.149 li
cp
0 0 0 0 cmyk
@
469.834 412.149 mo
461.858 412.149 li
461.858 404.174 li
469.834 404.174 li
469.834 412.149 li
cp
0 0 0 1 cmyk
f
469.834 412.149 mo
461.858 412.149 li
461.858 404.174 li
469.834 404.174 li
469.834 412.149 li
cp
0 0 0 0 cmyk
@
493.756 412.149 mo
485.782 412.149 li
485.782 404.174 li
493.756 404.174 li
493.756 412.149 li
cp
0 0 0 1 cmyk
f
493.756 412.149 mo
485.782 412.149 li
485.782 404.174 li
493.756 404.174 li
493.756 412.149 li
cp
0 0 0 0 cmyk
@
429.965 452.011 mo
421.989 452.011 li
421.989 444.033 li
429.965 444.033 li
429.965 452.011 li
cp
0 0 0 1 cmyk
f
429.965 452.011 mo
421.989 452.011 li
421.989 444.033 li
429.965 444.033 li
429.965 452.011 li
cp
0 0 0 0 cmyk
@
429.965 444.037 mo
421.989 444.037 li
421.989 436.062 li
429.965 436.062 li
429.965 444.037 li
cp
0 0 0 1 cmyk
f
429.965 444.037 mo
421.989 444.037 li
421.989 436.062 li
429.965 436.062 li
429.965 444.037 li
cp
0 0 0 0 cmyk
@
429.965 436.064 mo
421.989 436.064 li
421.989 428.09 li
429.965 428.09 li
429.965 436.064 li
cp
0 0 0 1 cmyk
f
429.965 436.064 mo
421.989 436.064 li
421.989 428.09 li
429.965 428.09 li
429.965 436.064 li
cp
0 0 0 0 cmyk
@
429.965 428.093 mo
421.989 428.093 li
421.989 420.117 li
429.965 420.117 li
429.965 428.093 li
cp
0 0 0 1 cmyk
f
429.965 428.093 mo
421.989 428.093 li
421.989 420.117 li
429.965 420.117 li
429.965 428.093 li
cp
0 0 0 0 cmyk
@
429.965 420.121 mo
421.989 420.121 li
421.989 412.145 li
429.965 412.145 li
429.965 420.121 li
cp
0 0 0 1 cmyk
f
429.965 420.121 mo
421.989 420.121 li
421.989 412.145 li
429.965 412.145 li
429.965 420.121 li
cp
0 0 0 0 cmyk
@
429.965 404.178 mo
421.989 404.178 li
421.989 396.201 li
429.965 396.201 li
429.965 404.178 li
cp
0 0 0 1 cmyk
f
429.965 404.178 mo
421.989 404.178 li
421.989 396.201 li
429.965 396.201 li
429.965 404.178 li
cp
0 0 0 0 cmyk
@
421.989 459.98 mo
414.014 459.98 li
414.014 452.006 li
421.989 452.006 li
421.989 459.98 li
cp
0 0 0 1 cmyk
f
421.989 459.98 mo
414.014 459.98 li
414.014 452.006 li
421.989 452.006 li
421.989 459.98 li
cp
0 0 0 0 cmyk
@
421.989 444.037 mo
414.014 444.037 li
414.014 436.062 li
421.989 436.062 li
421.989 444.037 li
cp
0 0 0 1 cmyk
f
421.989 444.037 mo
414.014 444.037 li
414.014 436.062 li
421.989 436.062 li
421.989 444.037 li
cp
0 0 0 0 cmyk
@
421.989 436.064 mo
414.014 436.064 li
414.014 428.09 li
421.989 428.09 li
421.989 436.064 li
cp
0 0 0 1 cmyk
f
421.989 436.064 mo
414.014 436.064 li
414.014 428.09 li
421.989 428.09 li
421.989 436.064 li
cp
0 0 0 0 cmyk
@
421.989 428.093 mo
414.014 428.093 li
414.014 420.117 li
421.989 420.117 li
421.989 428.093 li
cp
0 0 0 1 cmyk
f
421.989 428.093 mo
414.014 428.093 li
414.014 420.117 li
421.989 420.117 li
421.989 428.093 li
cp
0 0 0 0 cmyk
@
414.016 436.064 mo
406.04 436.064 li
406.04 428.09 li
414.016 428.09 li
414.016 436.064 li
cp
0 0 0 1 cmyk
f
414.016 436.064 mo
406.04 436.064 li
406.04 428.09 li
414.016 428.09 li
414.016 436.064 li
cp
0 0 0 0 cmyk
@
414.016 428.093 mo
406.04 428.093 li
406.04 420.117 li
414.016 420.117 li
414.016 428.093 li
cp
0 0 0 1 cmyk
f
414.016 428.093 mo
406.04 428.093 li
406.04 420.117 li
414.016 420.117 li
414.016 428.093 li
cp
0 0 0 0 cmyk
@
414.016 420.121 mo
406.04 420.121 li
406.04 412.145 li
414.016 412.145 li
414.016 420.121 li
cp
0 0 0 1 cmyk
f
414.016 420.121 mo
406.04 420.121 li
406.04 412.145 li
414.016 412.145 li
414.016 420.121 li
cp
0 0 0 0 cmyk
@
414.016 412.149 mo
406.04 412.149 li
406.04 404.174 li
414.016 404.174 li
414.016 412.149 li
cp
0 0 0 1 cmyk
f
414.016 412.149 mo
406.04 412.149 li
406.04 404.174 li
414.016 404.174 li
414.016 412.149 li
cp
0 0 0 0 cmyk
@
477.807 404.178 mo
469.833 404.178 li
469.833 396.201 li
477.807 396.201 li
477.807 404.178 li
cp
0 0 0 1 cmyk
f
477.807 404.178 mo
469.833 404.178 li
469.833 396.201 li
477.807 396.201 li
477.807 404.178 li
cp
0 0 0 0 cmyk
@
0 0 0 1 cmyk
%ADOBeginSubsetFont: OCRAStd Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /OCRAStd def/FontInfo 7 dict dup begin/Notice (Copyright 1988, 2002 Adobe Systems Incorporated. All rights reserved.) def/Weight (Medium) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 32 /space putdup 45 /hyphen putdup 46 /period putdup 65 /A putdup 67 /C putdup 68 /D putdup 69 /E putdup 71 /G putdup 73 /I putdup 75 /K putdup 78 /N putdup 80 /P putdup 83 /S putdup 84 /T putdup 86 /V putdup 89 /Y putdef/FontBBox {-720 -239 1440 823} defendsystemdict begindup /Private13 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0 539 539 778 778] def/OtherBlues [-204 -204] def/BlueScale 0.0396299 def/StdHW [96] def/StdVW [96] def/StemSnapH [96 100] def/StemSnapV [96 100] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings17 dict dup begin/space <1C60D8A8C9B605F82A> |-/hyphen <1C60D8A8C9B605F8D325627708C62AE4DA5DB902E464A1A9FF9ADE87056C2629B4BAAFAF0DF1A9D3E83BCDC2148F6244> |-/period <1C60D8A8C9B605F8D3EA989B5B9C981AA08173393F534B7364B5364F45AA3090B01966582EB91739CFB6F1D1EECC974A37CEBFA03BAB217576490EB9DDF95A81D4B1BDD8410C045829403CA92A3E726E5B530CF1B7D2F3> |-/A <1C60D8A8C9B605F8843C7B328656F4A6273BC4978A8A7458A66F03D5475B0B0239BEE67F8EB4E00791CC802479DAD01919EE6B0236493D2AD627E0EEA2D7C44A3CD39319864ADC4B2C00C84A88E3E9440421BACA4A6719072CCCA1B6ADC8400924F02C1829BB27> |-/C <1C60D8A8C9B605F8AF193098FC30DB5F933D205FD71786E3CC96D73C600CE2376AFB8A066AEC7DCE9C62E963B45A5C2FEF7B1E3DAAB15815D478ABFBCD9668A4D5FEF8B815CA8C9BD8145C447721E2CF83A4AC25E0ACA124A60C6EF4ABCD1FB5A157F230C239F1B33F62F1FA67CF223818E98BAE8CC69B3A8884988716> |-/D <1C60D8A8C9B605F8AF193098FC30DB5FF171C70FC4B1C2BA4F6A527D01AF128EA4291B3D61327D4D01AD5F0723E96F86ABDC6AE63DB02EC9DB3D9F5159F18C6C1497C735FFD67C7A73D6D960032666F3F3812DEF006C99EA332839382CF80DFCDC08196846F02C16363AC80FCBD6DD01BBC4B8E15638A53F952E879659D3217F4A6503AF0AEF008898B8> |-/E <1C60D8A8C9B605F8AF193096CE7CEB79EE55787D79C06F07C246BDA6024CD6DFC524907335B97A90B8DB57803CC638159A70DE7820FCDF8A2AB010C521C3B2EACCDC68E1A46E034C64E91AB60AB5932C629924> |-/G <1C60D8A8C9B605F8AF193096BBAEC44D7BC46615DD46BFD379A7C4B2A1E7C1A74ADD986F1DB134D6FA6ED3A36BF423C9E8E17860E6D8FC5EF171279F6972CEB2D42E7E99D0C80156205C350E30AC9F0426A2F8A2BDD7E22B0D4C6C61D9639F74E3ADB3650D4EB80752A41AA2F7CB6F3BF6DCEAFC049B80C4441D0956ABC0702564979AF509E1288FC898401DC5BD6CB25624F7> |-/I <1C60D8A8C9B605F8AF193098FC30DB5F5C978AA67F50C2FD7FDA5DA21C8CEC4CC6E42D116A0148FABD2F51677CDC860BE5F7EE0AA46B34EE4F63000B7F71247EBB387F81229B6912DE7A9A5E4F76C6E19ADC98B3494D27> |-/K <1C60D8A8C9B605F8843C7B3C567A66DDF04C2C8D47A4E303D4246E8C1CF89A51C95DEC92F9E3DA02C5E5927A2A7AB1B9358297AEBD806C38D047FF8EFDDFFAD6F987DF6494B2E40C223C4E0EE0AE2D7AF0A9203BBCE357BBE4892C5F2E84DD0441E3F3351FD3982CE6ABDAE691EA83C2E12CF4788A21A526676CB754E71B3AEE208D7F76BBA70F> |-/N <1C60D8A8C9B605F8843C7B3C567A66DDF04C2C82F4199D57923543A490A4B1213E396EBCF83554FF0ED0FD041BBE4B70EE53F8394DF97535DF4C4B4A5760E582B91218CEA97B8E37094518617A302ED40D586306233DEAADFA9282578269E353050AA182> |-/P <1C60D8A8C9B605F8843C7B3202A6D846DA62BD224020117075ECC5E3A2F29FADB8166F14BE1A0CDACB910BEBDE3F6335319203F3E8B2E8639DF77ED596BF2AB8CF245589DCB4BBC515AA4904FF0A1C1730D7B97C968981F7C7C145313B991DA5692A3E428128F18744D111> |-/S <1C60D8A8C9B605F8AF193098FC30DB5F933D205F99EC7C0D02E7C86399679AFE3987FDFF13AD1C61FDD327F0367C34FEAF182F5CB38786E58CA136F6B3B8E8C5F43E74114706BF6E935EC351B5E4626602C049570382EC560DC69A8FD22BCF4A190E0C9247B6B8366E0953337A5FAF022470F9224D129BE3D6BFE92826EAEDA03B592F3E2D58511CD0C142E6EE4DF1D0252408F084D04AFEC45B8E2664D6D9AA3CC5> |-/T <1C60D8A8C9B605F8843C7B3CF238467B6C2C9C9B2367A0E58B7FB9454DA852D48026F69E8AB295DFE6B9D7D24D5274DA023FB6F27214EF558F20CFC588478DB9D66DF6F4F55904A0C21119D719726D6E8BD369777A> |-/V <1C60D8A8C9B605F8843C7B3C567A66DDF04C2C82EB5B6BFCCC1E8AF5F9CA6F26103664035D7E8B4C91320F7034C73CE77969E0D17AEC6C2A21C5CA405658DDA9683EBB00A3E994F2A6381A4D2793BC3B24CAE1A41639C55E8AEBB13AD4159C1BCB25AF6002354899C4> |-/Y <1C60D8A8C9B605F8843C7B3C567A66DDF04C2C8D886C00F864E32F3603CAEF5CCA82540F310092288996128F0B0DA552D7CA97600C31A21C7E2C8A0B88422E5B80078F7B180784CC8AD3ADEB62F84B0BC63025D027A5E07382E18A8E424918> |-/.notdef <1C60D8A8C9B605F8AF4B838EBF9A7624DC267E27BBA99D9FA3C99754F92D85F5A4E31DECACC3DF5F756024795D61C867CAA5A62494CEF2C77CAA3EF1214FA7AF2384C78114DA93A6E114E5F411E20B760F7E4518ECA5015976294747C4DFA0675A6C4EEF13> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/MTLBBX+OCRAStd /OCRAStd findfont ct_VMDictPut/MTLBBX+OCRAStd*1 [32{/.notdef}rp /space 12{/.notdef}rp /hyphen /period 18{/.notdef}rp /A /.notdef /C /D /E /.notdef /G /.notdef /I /.notdef /K 2{/.notdef}rp /N /.notdef /P 2{/.notdef}rp /S /T /.notdef /V 2{/.notdef}rp /Y 166{/.notdef}rp]MTLBBX+OCRAStd nfMTLBBX+OCRAStd*1 [23.7029 0 0 -23.7029 0 0 ]msf246.099 391.78 mo(INVADING SPACES...)[17.0659 17.0654 17.0659 17.0654 17.0659 17.0654 17.0659 17.0654 17.0659 17.0659 17.0654 17.0659 17.0654 17.0659 17.0654 17.0664 17.0654 0 ]xshMTLBBX+OCRAStd*1 [71.1086 0 0 -71.1086 0 0 ]msf246.099 357.594 mo(IT-)sh399.69 357.594 mo(SYNDIKAT)[51.1973 51.1968 51.1973 51.1973 51.1973 51.1973 51.1973 0 ]xsh532.553 182.434 mo
525.643 182.434 li
525.643 175.522 li
532.553 175.522 li
532.553 182.434 li
cp
f
1.95 lw
532.553 182.434 mo
525.643 182.434 li
525.643 175.522 li
532.553 175.522 li
532.553 182.434 li
cp
0 0 0 0 cmyk
@
546.372 182.434 mo
539.461 182.434 li
539.461 175.522 li
546.372 175.522 li
546.372 182.434 li
cp
0 0 0 1 cmyk
f
546.372 182.434 mo
539.461 182.434 li
539.461 175.522 li
546.372 175.522 li
546.372 182.434 li
cp
0 0 0 0 cmyk
@
567.1 182.434 mo
560.188 182.434 li
560.188 175.522 li
567.1 175.522 li
567.1 182.434 li
cp
0 0 0 1 cmyk
f
567.1 182.434 mo
560.188 182.434 li
560.188 175.522 li
567.1 175.522 li
567.1 182.434 li
cp
0 0 0 0 cmyk
@
580.92 182.434 mo
574.008 182.434 li
574.008 175.522 li
580.92 175.522 li
580.92 182.434 li
cp
0 0 0 1 cmyk
f
580.92 182.434 mo
574.008 182.434 li
574.008 175.522 li
580.92 175.522 li
580.92 182.434 li
cp
0 0 0 0 cmyk
@
539.465 175.525 mo
532.551 175.525 li
532.551 168.614 li
539.465 168.614 li
539.465 175.525 li
cp
0 0 0 1 cmyk
f
539.465 175.525 mo
532.551 175.525 li
532.551 168.614 li
539.465 168.614 li
539.465 175.525 li
cp
0 0 0 0 cmyk
@
553.282 175.525 mo
546.372 175.525 li
546.372 168.614 li
553.282 168.614 li
553.282 175.525 li
cp
0 0 0 1 cmyk
f
553.282 175.525 mo
546.372 175.525 li
546.372 168.614 li
553.282 168.614 li
553.282 175.525 li
cp
0 0 0 0 cmyk
@
560.19 175.525 mo
553.282 175.525 li
553.282 168.614 li
560.19 168.614 li
560.19 175.525 li
cp
0 0 0 1 cmyk
f
560.19 175.525 mo
553.282 175.525 li
553.282 168.614 li
560.19 168.614 li
560.19 175.525 li
cp
0 0 0 0 cmyk
@
574.01 175.525 mo
567.098 175.525 li
567.098 168.614 li
574.01 168.614 li
574.01 175.525 li
cp
0 0 0 1 cmyk
f
574.01 175.525 mo
567.098 175.525 li
567.098 168.614 li
574.01 168.614 li
574.01 175.525 li
cp
0 0 0 0 cmyk
@
546.372 168.617 mo
539.461 168.617 li
539.461 161.704 li
546.372 161.704 li
546.372 168.617 li
cp
0 0 0 1 cmyk
f
546.372 168.617 mo
539.461 168.617 li
539.461 161.704 li
546.372 161.704 li
546.372 168.617 li
cp
0 0 0 0 cmyk
@
567.1 168.617 mo
560.188 168.617 li
560.188 161.704 li
567.1 161.704 li
567.1 168.617 li
cp
0 0 0 1 cmyk
f
567.1 168.617 mo
560.188 168.617 li
560.188 161.704 li
567.1 161.704 li
567.1 168.617 li
cp
0 0 0 0 cmyk
@
532.553 161.707 mo
525.643 161.707 li
525.643 154.795 li
532.553 154.795 li
532.553 161.707 li
cp
0 0 0 1 cmyk
f
532.553 161.707 mo
525.643 161.707 li
525.643 154.795 li
532.553 154.795 li
532.553 161.707 li
cp
0 0 0 0 cmyk
@
539.465 161.707 mo
532.551 161.707 li
532.551 154.795 li
539.465 154.795 li
539.465 161.707 li
cp
0 0 0 1 cmyk
f
539.465 161.707 mo
532.551 161.707 li
532.551 154.795 li
539.465 154.795 li
539.465 161.707 li
cp
0 0 0 0 cmyk
@
546.372 161.707 mo
539.461 161.707 li
539.461 154.795 li
546.372 154.795 li
546.372 161.707 li
cp
0 0 0 1 cmyk
f
546.372 161.707 mo
539.461 161.707 li
539.461 154.795 li
546.372 154.795 li
546.372 161.707 li
cp
0 0 0 0 cmyk
@
553.282 161.707 mo
546.372 161.707 li
546.372 154.795 li
553.282 154.795 li
553.282 161.707 li
cp
0 0 0 1 cmyk
f
553.282 161.707 mo
546.372 161.707 li
546.372 154.795 li
553.282 154.795 li
553.282 161.707 li
cp
0 0 0 0 cmyk
@
560.19 161.707 mo
553.282 161.707 li
553.282 154.795 li
560.19 154.795 li
560.19 161.707 li
cp
0 0 0 1 cmyk
f
560.19 161.707 mo
553.282 161.707 li
553.282 154.795 li
560.19 154.795 li
560.19 161.707 li
cp
0 0 0 0 cmyk
@
567.1 161.707 mo
560.188 161.707 li
560.188 154.795 li
567.1 154.795 li
567.1 161.707 li
cp
0 0 0 1 cmyk
f
567.1 161.707 mo
560.188 161.707 li
560.188 154.795 li
567.1 154.795 li
567.1 161.707 li
cp
0 0 0 0 cmyk
@
574.01 161.707 mo
567.098 161.707 li
567.098 154.795 li
574.01 154.795 li
574.01 161.707 li
cp
0 0 0 1 cmyk
f
574.01 161.707 mo
567.098 161.707 li
567.098 154.795 li
574.01 154.795 li
574.01 161.707 li
cp
0 0 0 0 cmyk
@
580.92 161.707 mo
574.008 161.707 li
574.008 154.795 li
580.92 154.795 li
580.92 161.707 li
cp
0 0 0 1 cmyk
f
580.92 161.707 mo
574.008 161.707 li
574.008 154.795 li
580.92 154.795 li
580.92 161.707 li
cp
0 0 0 0 cmyk
@
532.553 154.799 mo
525.643 154.799 li
525.643 147.886 li
532.553 147.886 li
532.553 154.799 li
cp
0 0 0 1 cmyk
f
532.553 154.799 mo
525.643 154.799 li
525.643 147.886 li
532.553 147.886 li
532.553 154.799 li
cp
0 0 0 0 cmyk
@
539.465 154.799 mo
532.551 154.799 li
532.551 147.886 li
539.465 147.886 li
539.465 154.799 li
cp
0 0 0 1 cmyk
f
539.465 154.799 mo
532.551 154.799 li
532.551 147.886 li
539.465 147.886 li
539.465 154.799 li
cp
0 0 0 0 cmyk
@
553.282 154.799 mo
546.372 154.799 li
546.372 147.886 li
553.282 147.886 li
553.282 154.799 li
cp
0 0 0 1 cmyk
f
553.282 154.799 mo
546.372 154.799 li
546.372 147.886 li
553.282 147.886 li
553.282 154.799 li
cp
0 0 0 0 cmyk
@
560.19 154.799 mo
553.282 154.799 li
553.282 147.886 li
560.19 147.886 li
560.19 154.799 li
cp
0 0 0 1 cmyk
f
560.19 154.799 mo
553.282 154.799 li
553.282 147.886 li
560.19 147.886 li
560.19 154.799 li
cp
0 0 0 0 cmyk
@
574.01 154.799 mo
567.098 154.799 li
567.098 147.886 li
574.01 147.886 li
574.01 154.799 li
cp
0 0 0 1 cmyk
f
574.01 154.799 mo
567.098 154.799 li
567.098 147.886 li
574.01 147.886 li
574.01 154.799 li
cp
0 0 0 0 cmyk
@
580.92 154.799 mo
574.008 154.799 li
574.008 147.886 li
580.92 147.886 li
580.92 154.799 li
cp
0 0 0 1 cmyk
f
580.92 154.799 mo
574.008 154.799 li
574.008 147.886 li
580.92 147.886 li
580.92 154.799 li
cp
0 0 0 0 cmyk
@
539.465 147.889 mo
532.551 147.889 li
532.551 140.978 li
539.465 140.978 li
539.465 147.889 li
cp
0 0 0 1 cmyk
f
539.465 147.889 mo
532.551 147.889 li
532.551 140.978 li
539.465 140.978 li
539.465 147.889 li
cp
0 0 0 0 cmyk
@
546.372 147.889 mo
539.461 147.889 li
539.461 140.978 li
546.372 140.978 li
546.372 147.889 li
cp
0 0 0 1 cmyk
f
546.372 147.889 mo
539.461 147.889 li
539.461 140.978 li
546.372 140.978 li
546.372 147.889 li
cp
0 0 0 0 cmyk
@
553.282 147.889 mo
546.372 147.889 li
546.372 140.978 li
553.282 140.978 li
553.282 147.889 li
cp
0 0 0 1 cmyk
f
553.282 147.889 mo
546.372 147.889 li
546.372 140.978 li
553.282 140.978 li
553.282 147.889 li
cp
0 0 0 0 cmyk
@
560.19 147.889 mo
553.282 147.889 li
553.282 140.978 li
560.19 140.978 li
560.19 147.889 li
cp
0 0 0 1 cmyk
f
560.19 147.889 mo
553.282 147.889 li
553.282 140.978 li
560.19 140.978 li
560.19 147.889 li
cp
0 0 0 0 cmyk
@
567.1 147.889 mo
560.188 147.889 li
560.188 140.978 li
567.1 140.978 li
567.1 147.889 li
cp
0 0 0 1 cmyk
f
567.1 147.889 mo
560.188 147.889 li
560.188 140.978 li
567.1 140.978 li
567.1 147.889 li
cp
0 0 0 0 cmyk
@
574.01 147.889 mo
567.098 147.889 li
567.098 140.978 li
574.01 140.978 li
574.01 147.889 li
cp
0 0 0 1 cmyk
f
574.01 147.889 mo
567.098 147.889 li
567.098 140.978 li
574.01 140.978 li
574.01 147.889 li
cp
0 0 0 0 cmyk
@
546.372 140.98 mo
539.461 140.98 li
539.461 134.068 li
546.372 134.068 li
546.372 140.98 li
cp
0 0 0 1 cmyk
f
546.372 140.98 mo
539.461 140.98 li
539.461 134.068 li
546.372 134.068 li
546.372 140.98 li
cp
0 0 0 0 cmyk
@
553.282 140.98 mo
546.372 140.98 li
546.372 134.068 li
553.282 134.068 li
553.282 140.98 li
cp
0 0 0 1 cmyk
f
553.282 140.98 mo
546.372 140.98 li
546.372 134.068 li
553.282 134.068 li
553.282 140.98 li
cp
0 0 0 0 cmyk
@
560.19 140.98 mo
553.282 140.98 li
553.282 134.068 li
560.19 134.068 li
560.19 140.98 li
cp
0 0 0 1 cmyk
f
560.19 140.98 mo
553.282 140.98 li
553.282 134.068 li
560.19 134.068 li
560.19 140.98 li
cp
0 0 0 0 cmyk
@
567.1 140.98 mo
560.188 140.98 li
560.188 134.068 li
567.1 134.068 li
567.1 140.98 li
cp
0 0 0 1 cmyk
f
567.1 140.98 mo
560.188 140.98 li
560.188 134.068 li
567.1 134.068 li
567.1 140.98 li
cp
0 0 0 0 cmyk
@
553.282 134.071 mo
546.372 134.071 li
546.372 127.159 li
553.282 127.159 li
553.282 134.071 li
cp
0 0 0 1 cmyk
f
553.282 134.071 mo
546.372 134.071 li
546.372 127.159 li
553.282 127.159 li
553.282 134.071 li
cp
0 0 0 0 cmyk
@
560.19 134.071 mo
553.282 134.071 li
553.282 127.159 li
560.19 127.159 li
560.19 134.071 li
cp
0 0 0 1 cmyk
f
560.19 134.071 mo
553.282 134.071 li
553.282 127.159 li
560.19 127.159 li
560.19 134.071 li
cp
0 0 0 0 cmyk
@
116.154 232.75 mo
111.901 232.75 li
111.901 228.495 li
116.154 228.495 li
116.154 232.75 li
cp
0 0 0 1 cmyk
f
1.2 lw
116.154 232.75 mo
111.901 232.75 li
111.901 228.495 li
116.154 228.495 li
116.154 232.75 li
cp
0 0 0 0 cmyk
@
120.407 232.75 mo
116.154 232.75 li
116.154 228.495 li
120.407 228.495 li
120.407 232.75 li
cp
0 0 0 1 cmyk
f
120.407 232.75 mo
116.154 232.75 li
116.154 228.495 li
120.407 228.495 li
120.407 232.75 li
cp
0 0 0 0 cmyk
@
124.661 228.498 mo
120.407 228.498 li
120.407 224.244 li
124.661 224.244 li
124.661 228.498 li
cp
0 0 0 1 cmyk
f
124.661 228.498 mo
120.407 228.498 li
120.407 224.244 li
124.661 224.244 li
124.661 228.498 li
cp
0 0 0 0 cmyk
@
128.913 228.498 mo
124.659 228.498 li
124.659 224.244 li
128.913 224.244 li
128.913 228.498 li
cp
0 0 0 1 cmyk
f
128.913 228.498 mo
124.659 228.498 li
124.659 224.244 li
128.913 224.244 li
128.913 228.498 li
cp
0 0 0 0 cmyk
@
137.418 228.498 mo
133.165 228.498 li
133.165 224.244 li
137.418 224.244 li
137.418 228.498 li
cp
0 0 0 1 cmyk
f
137.418 228.498 mo
133.165 228.498 li
133.165 224.244 li
137.418 224.244 li
137.418 228.498 li
cp
0 0 0 0 cmyk
@
141.671 228.498 mo
137.417 228.498 li
137.417 224.244 li
141.671 224.244 li
141.671 228.498 li
cp
0 0 0 1 cmyk
f
141.671 228.498 mo
137.417 228.498 li
137.417 224.244 li
141.671 224.244 li
141.671 228.498 li
cp
0 0 0 0 cmyk
@
128.913 224.246 mo
124.659 224.246 li
124.659 219.992 li
128.913 219.992 li
128.913 224.246 li
cp
0 0 0 1 cmyk
f
128.913 224.246 mo
124.659 224.246 li
124.659 219.992 li
128.913 219.992 li
128.913 224.246 li
cp
0 0 0 0 cmyk
@
133.165 224.246 mo
128.911 224.246 li
128.911 219.992 li
133.165 219.992 li
133.165 224.246 li
cp
0 0 0 1 cmyk
f
133.165 224.246 mo
128.911 224.246 li
128.911 219.992 li
133.165 219.992 li
133.165 224.246 li
cp
0 0 0 0 cmyk
@
145.924 224.246 mo
141.67 224.246 li
141.67 219.992 li
145.924 219.992 li
145.924 224.246 li
cp
0 0 0 1 cmyk
f
145.924 224.246 mo
141.67 224.246 li
141.67 219.992 li
145.924 219.992 li
145.924 224.246 li
cp
0 0 0 0 cmyk
@
116.154 219.995 mo
111.901 219.995 li
111.901 215.741 li
116.154 215.741 li
116.154 219.995 li
cp
0 0 0 1 cmyk
f
116.154 219.995 mo
111.901 219.995 li
111.901 215.741 li
116.154 215.741 li
116.154 219.995 li
cp
0 0 0 0 cmyk
@
120.407 219.995 mo
116.154 219.995 li
116.154 215.741 li
120.407 215.741 li
120.407 219.995 li
cp
0 0 0 1 cmyk
f
120.407 219.995 mo
116.154 219.995 li
116.154 215.741 li
120.407 215.741 li
120.407 219.995 li
cp
0 0 0 0 cmyk
@
124.661 219.995 mo
120.407 219.995 li
120.407 215.741 li
124.661 215.741 li
124.661 219.995 li
cp
0 0 0 1 cmyk
f
124.661 219.995 mo
120.407 219.995 li
120.407 215.741 li
124.661 215.741 li
124.661 219.995 li
cp
0 0 0 0 cmyk
@
128.913 219.995 mo
124.659 219.995 li
124.659 215.741 li
128.913 215.741 li
128.913 219.995 li
cp
0 0 0 1 cmyk
f
128.913 219.995 mo
124.659 219.995 li
124.659 215.741 li
128.913 215.741 li
128.913 219.995 li
cp
0 0 0 0 cmyk
@
133.165 219.995 mo
128.911 219.995 li
128.911 215.741 li
133.165 215.741 li
133.165 219.995 li
cp
0 0 0 1 cmyk
f
133.165 219.995 mo
128.911 219.995 li
128.911 215.741 li
133.165 215.741 li
133.165 219.995 li
cp
0 0 0 0 cmyk
@
137.418 219.995 mo
133.165 219.995 li
133.165 215.741 li
137.418 215.741 li
137.418 219.995 li
cp
0 0 0 1 cmyk
f
137.418 219.995 mo
133.165 219.995 li
133.165 215.741 li
137.418 215.741 li
137.418 219.995 li
cp
0 0 0 0 cmyk
@
141.671 219.995 mo
137.417 219.995 li
137.417 215.741 li
141.671 215.741 li
141.671 219.995 li
cp
0 0 0 1 cmyk
f
141.671 219.995 mo
137.417 219.995 li
137.417 215.741 li
141.671 215.741 li
141.671 219.995 li
cp
0 0 0 0 cmyk
@
145.924 219.995 mo
141.67 219.995 li
141.67 215.741 li
145.924 215.741 li
145.924 219.995 li
cp
0 0 0 1 cmyk
f
145.924 219.995 mo
141.67 219.995 li
141.67 215.741 li
145.924 215.741 li
145.924 219.995 li
cp
0 0 0 0 cmyk
@
116.154 215.743 mo
111.901 215.743 li
111.901 211.489 li
116.154 211.489 li
116.154 215.743 li
cp
0 0 0 1 cmyk
f
116.154 215.743 mo
111.901 215.743 li
111.901 211.489 li
116.154 211.489 li
116.154 215.743 li
cp
0 0 0 0 cmyk
@
120.407 215.743 mo
116.154 215.743 li
116.154 211.489 li
120.407 211.489 li
120.407 215.743 li
cp
0 0 0 1 cmyk
f
120.407 215.743 mo
116.154 215.743 li
116.154 211.489 li
120.407 211.489 li
120.407 215.743 li
cp
0 0 0 0 cmyk
@
124.661 215.743 mo
120.407 215.743 li
120.407 211.489 li
124.661 211.489 li
124.661 215.743 li
cp
0 0 0 1 cmyk
f
124.661 215.743 mo
120.407 215.743 li
120.407 211.489 li
124.661 211.489 li
124.661 215.743 li
cp
0 0 0 0 cmyk
@
137.418 215.743 mo
133.165 215.743 li
133.165 211.489 li
137.418 211.489 li
137.418 215.743 li
cp
0 0 0 1 cmyk
f
137.418 215.743 mo
133.165 215.743 li
133.165 211.489 li
137.418 211.489 li
137.418 215.743 li
cp
0 0 0 0 cmyk
@
141.671 215.743 mo
137.417 215.743 li
137.417 211.489 li
141.671 211.489 li
141.671 215.743 li
cp
0 0 0 1 cmyk
f
141.671 215.743 mo
137.417 215.743 li
137.417 211.489 li
141.671 211.489 li
141.671 215.743 li
cp
0 0 0 0 cmyk
@
116.154 211.492 mo
111.901 211.492 li
111.901 207.237 li
116.154 207.237 li
116.154 211.492 li
cp
0 0 0 1 cmyk
f
116.154 211.492 mo
111.901 211.492 li
111.901 207.237 li
116.154 207.237 li
116.154 211.492 li
cp
0 0 0 0 cmyk
@
120.407 211.492 mo
116.154 211.492 li
116.154 207.237 li
120.407 207.237 li
120.407 211.492 li
cp
0 0 0 1 cmyk
f
120.407 211.492 mo
116.154 211.492 li
116.154 207.237 li
120.407 207.237 li
120.407 211.492 li
cp
0 0 0 0 cmyk
@
124.661 211.492 mo
120.407 211.492 li
120.407 207.237 li
124.661 207.237 li
124.661 211.492 li
cp
0 0 0 1 cmyk
f
124.661 211.492 mo
120.407 211.492 li
120.407 207.237 li
124.661 207.237 li
124.661 211.492 li
cp
0 0 0 0 cmyk
@
128.913 211.492 mo
124.659 211.492 li
124.659 207.237 li
128.913 207.237 li
128.913 211.492 li
cp
0 0 0 1 cmyk
f
128.913 211.492 mo
124.659 211.492 li
124.659 207.237 li
128.913 207.237 li
128.913 211.492 li
cp
0 0 0 0 cmyk
@
133.165 211.492 mo
128.911 211.492 li
128.911 207.237 li
133.165 207.237 li
133.165 211.492 li
cp
0 0 0 1 cmyk
f
133.165 211.492 mo
128.911 211.492 li
128.911 207.237 li
133.165 207.237 li
133.165 211.492 li
cp
0 0 0 0 cmyk
@
137.418 211.492 mo
133.165 211.492 li
133.165 207.237 li
137.418 207.237 li
137.418 211.492 li
cp
0 0 0 1 cmyk
f
137.418 211.492 mo
133.165 211.492 li
133.165 207.237 li
137.418 207.237 li
137.418 211.492 li
cp
0 0 0 0 cmyk
@
141.671 211.492 mo
137.417 211.492 li
137.417 207.237 li
141.671 207.237 li
141.671 211.492 li
cp
0 0 0 1 cmyk
f
141.671 211.492 mo
137.417 211.492 li
137.417 207.237 li
141.671 207.237 li
141.671 211.492 li
cp
0 0 0 0 cmyk
@
145.924 211.492 mo
141.67 211.492 li
141.67 207.237 li
145.924 207.237 li
145.924 211.492 li
cp
0 0 0 1 cmyk
f
145.924 211.492 mo
141.67 211.492 li
141.67 207.237 li
145.924 207.237 li
145.924 211.492 li
cp
0 0 0 0 cmyk
@
120.407 207.24 mo
116.154 207.24 li
116.154 202.986 li
120.407 202.986 li
120.407 207.24 li
cp
0 0 0 1 cmyk
f
120.407 207.24 mo
116.154 207.24 li
116.154 202.986 li
120.407 202.986 li
120.407 207.24 li
cp
0 0 0 0 cmyk
@
124.661 207.24 mo
120.407 207.24 li
120.407 202.986 li
124.661 202.986 li
124.661 207.24 li
cp
0 0 0 1 cmyk
f
124.661 207.24 mo
120.407 207.24 li
120.407 202.986 li
124.661 202.986 li
124.661 207.24 li
cp
0 0 0 0 cmyk
@
128.913 207.24 mo
124.659 207.24 li
124.659 202.986 li
128.913 202.986 li
128.913 207.24 li
cp
0 0 0 1 cmyk
f
128.913 207.24 mo
124.659 207.24 li
124.659 202.986 li
128.913 202.986 li
128.913 207.24 li
cp
0 0 0 0 cmyk
@
133.165 207.24 mo
128.911 207.24 li
128.911 202.986 li
133.165 202.986 li
133.165 207.24 li
cp
0 0 0 1 cmyk
f
133.165 207.24 mo
128.911 207.24 li
128.911 202.986 li
133.165 202.986 li
133.165 207.24 li
cp
0 0 0 0 cmyk
@
137.418 207.24 mo
133.165 207.24 li
133.165 202.986 li
137.418 202.986 li
137.418 207.24 li
cp
0 0 0 1 cmyk
f
137.418 207.24 mo
133.165 207.24 li
133.165 202.986 li
137.418 202.986 li
137.418 207.24 li
cp
0 0 0 0 cmyk
@
141.671 207.24 mo
137.417 207.24 li
137.417 202.986 li
141.671 202.986 li
141.671 207.24 li
cp
0 0 0 1 cmyk
f
141.671 207.24 mo
137.417 207.24 li
137.417 202.986 li
141.671 202.986 li
141.671 207.24 li
cp
0 0 0 0 cmyk
@
145.924 207.24 mo
141.67 207.24 li
141.67 202.986 li
145.924 202.986 li
145.924 207.24 li
cp
0 0 0 1 cmyk
f
145.924 207.24 mo
141.67 207.24 li
141.67 202.986 li
145.924 202.986 li
145.924 207.24 li
cp
0 0 0 0 cmyk
@
133.165 202.988 mo
128.911 202.988 li
128.911 198.734 li
133.165 198.734 li
133.165 202.988 li
cp
0 0 0 1 cmyk
f
133.165 202.988 mo
128.911 202.988 li
128.911 198.734 li
133.165 198.734 li
133.165 202.988 li
cp
0 0 0 0 cmyk
@
137.418 202.988 mo
133.165 202.988 li
133.165 198.734 li
137.418 198.734 li
137.418 202.988 li
cp
0 0 0 1 cmyk
f
137.418 202.988 mo
133.165 202.988 li
133.165 198.734 li
137.418 198.734 li
137.418 202.988 li
cp
0 0 0 0 cmyk
@
141.671 202.988 mo
137.417 202.988 li
137.417 198.734 li
141.671 198.734 li
141.671 202.988 li
cp
0 0 0 1 cmyk
f
141.671 202.988 mo
137.417 202.988 li
137.417 198.734 li
141.671 198.734 li
141.671 202.988 li
cp
0 0 0 0 cmyk
@
145.924 202.988 mo
141.67 202.988 li
141.67 198.734 li
145.924 198.734 li
145.924 202.988 li
cp
0 0 0 1 cmyk
f
145.924 202.988 mo
141.67 202.988 li
141.67 198.734 li
145.924 198.734 li
145.924 202.988 li
cp
0 0 0 0 cmyk
@
150.175 228.498 mo
145.923 228.498 li
145.923 224.244 li
150.175 224.244 li
150.175 228.498 li
cp
0 0 0 1 cmyk
f
150.175 228.498 mo
145.923 228.498 li
145.923 224.244 li
150.175 224.244 li
150.175 228.498 li
cp
0 0 0 0 cmyk
@
150.175 224.246 mo
145.923 224.246 li
145.923 219.992 li
150.175 219.992 li
150.175 224.246 li
cp
0 0 0 1 cmyk
f
150.175 224.246 mo
145.923 224.246 li
145.923 219.992 li
150.175 219.992 li
150.175 224.246 li
cp
0 0 0 0 cmyk
@
150.175 219.995 mo
145.923 219.995 li
145.923 215.741 li
150.175 215.741 li
150.175 219.995 li
cp
0 0 0 1 cmyk
f
150.175 219.995 mo
145.923 219.995 li
145.923 215.741 li
150.175 215.741 li
150.175 219.995 li
cp
0 0 0 0 cmyk
@
150.175 211.492 mo
145.923 211.492 li
145.923 207.237 li
150.175 207.237 li
150.175 211.492 li
cp
0 0 0 1 cmyk
f
150.175 211.492 mo
145.923 211.492 li
145.923 207.237 li
150.175 207.237 li
150.175 211.492 li
cp
0 0 0 0 cmyk
@
150.175 207.24 mo
145.923 207.24 li
145.923 202.986 li
150.175 202.986 li
150.175 207.24 li
cp
0 0 0 1 cmyk
f
150.175 207.24 mo
145.923 207.24 li
145.923 202.986 li
150.175 202.986 li
150.175 207.24 li
cp
0 0 0 0 cmyk
@
154.429 228.498 mo
150.175 228.498 li
150.175 224.244 li
154.429 224.244 li
154.429 228.498 li
cp
0 0 0 1 cmyk
f
154.429 228.498 mo
150.175 228.498 li
150.175 224.244 li
154.429 224.244 li
154.429 228.498 li
cp
0 0 0 0 cmyk
@
154.429 219.995 mo
150.175 219.995 li
150.175 215.741 li
154.429 215.741 li
154.429 219.995 li
cp
0 0 0 1 cmyk
f
154.429 219.995 mo
150.175 219.995 li
150.175 215.741 li
154.429 215.741 li
154.429 219.995 li
cp
0 0 0 0 cmyk
@
154.429 215.743 mo
150.175 215.743 li
150.175 211.489 li
154.429 211.489 li
154.429 215.743 li
cp
0 0 0 1 cmyk
f
154.429 215.743 mo
150.175 215.743 li
150.175 211.489 li
154.429 211.489 li
154.429 215.743 li
cp
0 0 0 0 cmyk
@
154.429 211.492 mo
150.175 211.492 li
150.175 207.237 li
154.429 207.237 li
154.429 211.492 li
cp
0 0 0 1 cmyk
f
154.429 211.492 mo
150.175 211.492 li
150.175 207.237 li
154.429 207.237 li
154.429 211.492 li
cp
0 0 0 0 cmyk
@
154.429 207.24 mo
150.175 207.24 li
150.175 202.986 li
154.429 202.986 li
154.429 207.24 li
cp
0 0 0 1 cmyk
f
154.429 207.24 mo
150.175 207.24 li
150.175 202.986 li
154.429 202.986 li
154.429 207.24 li
cp
0 0 0 0 cmyk
@
158.682 232.75 mo
154.427 232.75 li
154.427 228.495 li
158.682 228.495 li
158.682 232.75 li
cp
0 0 0 1 cmyk
f
158.682 232.75 mo
154.427 232.75 li
154.427 228.495 li
158.682 228.495 li
158.682 232.75 li
cp
0 0 0 0 cmyk
@
158.682 219.995 mo
154.427 219.995 li
154.427 215.741 li
158.682 215.741 li
158.682 219.995 li
cp
0 0 0 1 cmyk
f
158.682 219.995 mo
154.427 219.995 li
154.427 215.741 li
158.682 215.741 li
158.682 219.995 li
cp
0 0 0 0 cmyk
@
158.682 215.743 mo
154.427 215.743 li
154.427 211.489 li
158.682 211.489 li
158.682 215.743 li
cp
0 0 0 1 cmyk
f
158.682 215.743 mo
154.427 215.743 li
154.427 211.489 li
158.682 211.489 li
158.682 215.743 li
cp
0 0 0 0 cmyk
@
158.682 211.492 mo
154.427 211.492 li
154.427 207.237 li
158.682 207.237 li
158.682 211.492 li
cp
0 0 0 1 cmyk
f
158.682 211.492 mo
154.427 211.492 li
154.427 207.237 li
158.682 207.237 li
158.682 211.492 li
cp
0 0 0 0 cmyk
@
158.682 207.24 mo
154.427 207.24 li
154.427 202.986 li
158.682 202.986 li
158.682 207.24 li
cp
0 0 0 1 cmyk
f
158.682 207.24 mo
154.427 207.24 li
154.427 202.986 li
158.682 202.986 li
158.682 207.24 li
cp
0 0 0 0 cmyk
@
162.935 232.75 mo
158.681 232.75 li
158.681 228.495 li
162.935 228.495 li
162.935 232.75 li
cp
0 0 0 1 cmyk
f
162.935 232.75 mo
158.681 232.75 li
158.681 228.495 li
162.935 228.495 li
162.935 232.75 li
cp
0 0 0 0 cmyk
@
162.935 219.995 mo
158.681 219.995 li
158.681 215.741 li
162.935 215.741 li
162.935 219.995 li
cp
0 0 0 1 cmyk
f
162.935 219.995 mo
158.681 219.995 li
158.681 215.741 li
162.935 215.741 li
162.935 219.995 li
cp
0 0 0 0 cmyk
@
162.935 215.743 mo
158.681 215.743 li
158.681 211.489 li
162.935 211.489 li
162.935 215.743 li
cp
0 0 0 1 cmyk
f
162.935 215.743 mo
158.681 215.743 li
158.681 211.489 li
162.935 211.489 li
162.935 215.743 li
cp
0 0 0 0 cmyk
@
162.935 211.492 mo
158.681 211.492 li
158.681 207.237 li
162.935 207.237 li
162.935 211.492 li
cp
0 0 0 1 cmyk
f
162.935 211.492 mo
158.681 211.492 li
158.681 207.237 li
162.935 207.237 li
162.935 211.492 li
cp
0 0 0 0 cmyk
@
131.211 562.239 mo
116.493 609.422 li
67.0229 609.485 li
74.5415 614.895 li
80.4634 614.895 li
77.6099 612.842 li
118.902 612.793 li
131.182 573.411 li
143.986 612.782 li
184.879 612.672 li
169.53 623.959 li
175.588 623.959 li
195.546 609.28 li
146.555 609.461 li
131.211 562.239 li
cp
131.071 651.9 mo
98.1997 676.468 li
105.922 652.368 li
102.376 652.368 li
91.687 685.72 li
131.063 656.283 li
171.116 685.596 li
160.091 652.368 li
156.528 652.368 li
164.49 676.366 li
131.071 651.9 li
cp
0 0 0 1 cmyk
f
78.2261 616.96 mo
80.9819 616.96 li
81.438 616.96 81.8091 617.33 81.8091 617.787 cv
81.8091 620.817 li
81.8091 621.274 81.438 621.643 80.9819 621.643 cv
78.2261 621.643 li
77.77 621.643 77.3989 621.274 77.3989 620.817 cv
77.3989 617.787 li
77.3989 617.33 77.77 616.96 78.2261 616.96 cv
cp
f
87.5034 616.96 mo
90.2583 616.96 li
90.7153 616.96 91.0854 617.33 91.0854 617.787 cv
91.0854 620.817 li
91.0854 621.274 90.7153 621.643 90.2583 621.643 cv
87.5034 621.643 li
87.0464 621.643 86.6763 621.274 86.6763 620.817 cv
86.6763 617.787 li
86.6763 617.33 87.0464 616.96 87.5034 616.96 cv
cp
f
92.4321 616.96 mo
95.188 616.96 li
95.644 616.96 96.0142 617.33 96.0142 617.787 cv
96.0142 620.817 li
96.0142 621.274 95.644 621.643 95.188 621.643 cv
92.4321 621.643 li
91.9751 621.643 91.606 621.274 91.606 620.817 cv
91.606 617.787 li
91.606 617.33 91.9751 616.96 92.4321 616.96 cv
cp
f
97.3618 616.96 mo
100.117 616.96 li
100.573 616.96 100.944 617.33 100.944 617.787 cv
100.944 620.817 li
100.944 621.274 100.573 621.643 100.117 621.643 cv
97.3618 621.643 li
96.9048 621.643 96.5347 621.274 96.5347 620.817 cv
96.5347 617.787 li
96.5347 617.33 96.9048 616.96 97.3618 616.96 cv
cp
f
102.291 616.96 mo
105.046 616.96 li
105.502 616.96 105.874 617.33 105.874 617.787 cv
105.874 620.817 li
105.874 621.274 105.502 621.643 105.046 621.643 cv
102.291 621.643 li
101.834 621.643 101.463 621.274 101.463 620.817 cv
101.463 617.787 li
101.463 617.33 101.834 616.96 102.291 616.96 cv
cp
f
108.766 616.96 mo
111.522 616.96 li
111.978 616.96 112.348 617.33 112.348 617.787 cv
112.348 620.817 li
112.348 621.274 111.978 621.643 111.522 621.643 cv
108.766 621.643 li
108.31 621.643 107.939 621.274 107.939 620.817 cv
107.939 617.787 li
107.939 617.33 108.31 616.96 108.766 616.96 cv
cp
f
113.696 616.96 mo
116.451 616.96 li
116.907 616.96 117.278 617.33 117.278 617.787 cv
117.278 620.817 li
117.278 621.274 116.907 621.643 116.451 621.643 cv
113.696 621.643 li
113.239 621.643 112.869 621.274 112.869 620.817 cv
112.869 617.787 li
112.869 617.33 113.239 616.96 113.696 616.96 cv
cp
f
118.625 616.96 mo
121.379 616.96 li
121.836 616.96 122.207 617.33 122.207 617.787 cv
122.207 620.817 li
122.207 621.274 121.836 621.643 121.379 621.643 cv
118.625 621.643 li
118.168 621.643 117.797 621.274 117.797 620.817 cv
117.797 617.787 li
117.797 617.33 118.168 616.96 118.625 616.96 cv
cp
f
123.553 616.96 mo
126.309 616.96 li
126.765 616.96 127.136 617.33 127.136 617.787 cv
127.136 620.817 li
127.136 621.274 126.765 621.643 126.309 621.643 cv
123.553 621.643 li
123.096 621.643 122.727 621.274 122.727 620.817 cv
122.727 617.787 li
122.727 617.33 123.096 616.96 123.553 616.96 cv
cp
f
130.258 616.96 mo
133.014 616.96 li
133.471 616.96 133.84 617.33 133.84 617.787 cv
133.84 620.817 li
133.84 621.274 133.471 621.643 133.014 621.643 cv
130.258 621.643 li
129.802 621.643 129.432 621.274 129.432 620.817 cv
129.432 617.787 li
129.432 617.33 129.802 616.96 130.258 616.96 cv
cp
f
135.188 616.96 mo
137.943 616.96 li
138.4 616.96 138.77 617.33 138.77 617.787 cv
138.77 620.817 li
138.77 621.274 138.4 621.643 137.943 621.643 cv
135.188 621.643 li
134.731 621.643 134.362 621.274 134.362 620.817 cv
134.362 617.787 li
134.362 617.33 134.731 616.96 135.188 616.96 cv
cp
f
140.117 616.96 mo
142.872 616.96 li
143.329 616.96 143.699 617.33 143.699 617.787 cv
143.699 620.817 li
143.699 621.274 143.329 621.643 142.872 621.643 cv
140.117 621.643 li
139.661 621.643 139.291 621.274 139.291 620.817 cv
139.291 617.787 li
139.291 617.33 139.661 616.96 140.117 616.96 cv
cp
f
145.045 616.96 mo
147.801 616.96 li
148.258 616.96 148.628 617.33 148.628 617.787 cv
148.628 620.817 li
148.628 621.274 148.258 621.643 147.801 621.643 cv
145.045 621.643 li
144.589 621.643 144.219 621.274 144.219 620.817 cv
144.219 617.787 li
144.219 617.33 144.589 616.96 145.045 616.96 cv
cp
f
151.66 616.96 mo
154.415 616.96 li
154.872 616.96 155.241 617.33 155.241 617.787 cv
155.241 620.817 li
155.241 621.274 154.872 621.643 154.415 621.643 cv
151.66 621.643 li
151.203 621.643 150.833 621.274 150.833 620.817 cv
150.833 617.787 li
150.833 617.33 151.203 616.96 151.66 616.96 cv
cp
f
156.588 616.96 mo
159.344 616.96 li
159.8 616.96 160.17 617.33 160.17 617.787 cv
160.17 620.817 li
160.17 621.274 159.8 621.643 159.344 621.643 cv
156.588 621.643 li
156.131 621.643 155.762 621.274 155.762 620.817 cv
155.762 617.787 li
155.762 617.33 156.131 616.96 156.588 616.96 cv
cp
f
161.518 616.96 mo
164.274 616.96 li
164.73 616.96 165.1 617.33 165.1 617.787 cv
165.1 620.817 li
165.1 621.274 164.73 621.643 164.274 621.643 cv
161.518 621.643 li
161.061 621.643 160.691 621.274 160.691 620.817 cv
160.691 617.787 li
160.691 617.33 161.061 616.96 161.518 616.96 cv
cp
f
151.779 626.44 mo
154.405 626.44 li
154.834 626.44 155.182 626.788 155.182 627.217 cv
155.182 629.891 li
155.182 630.32 154.834 630.668 154.405 630.668 cv
151.779 630.668 li
151.349 630.668 151.001 630.32 151.001 629.891 cv
151.001 627.217 li
151.001 626.788 151.349 626.44 151.779 626.44 cv
cp
f
156.454 626.44 mo
159.081 626.44 li
159.51 626.44 159.858 626.788 159.858 627.217 cv
159.858 629.891 li
159.858 630.32 159.51 630.668 159.081 630.668 cv
156.454 630.668 li
156.025 630.668 155.676 630.32 155.676 629.891 cv
155.676 627.217 li
155.676 626.788 156.025 626.44 156.454 626.44 cv
cp
f
161.083 626.44 mo
163.709 626.44 li
164.139 626.44 164.487 626.788 164.487 627.217 cv
164.487 629.891 li
164.487 630.32 164.139 630.668 163.709 630.668 cv
161.083 630.668 li
160.654 630.668 160.306 630.32 160.306 629.891 cv
160.306 627.217 li
160.306 626.788 160.654 626.44 161.083 626.44 cv
cp
f
151.936 631.246 mo
154.53 631.246 li
154.958 631.246 155.307 631.594 155.307 632.024 cv
155.307 634.656 li
155.307 635.086 154.958 635.435 154.53 635.435 cv
151.936 635.435 li
151.506 635.435 151.158 635.086 151.158 634.656 cv
151.158 632.024 li
151.158 631.594 151.506 631.246 151.936 631.246 cv
cp
f
156.612 631.246 mo
159.205 631.246 li
159.634 631.246 159.982 631.594 159.982 632.024 cv
159.982 634.656 li
159.982 635.086 159.634 635.435 159.205 635.435 cv
156.612 635.435 li
156.182 635.435 155.833 635.086 155.833 634.656 cv
155.833 632.024 li
155.833 631.594 156.182 631.246 156.612 631.246 cv
cp
f
161.287 631.246 mo
163.913 631.246 li
164.341 631.246 164.69 631.594 164.69 632.024 cv
164.69 634.656 li
164.69 635.086 164.341 635.435 163.913 635.435 cv
161.287 635.435 li
160.857 635.435 160.508 635.086 160.508 634.656 cv
160.508 632.024 li
160.508 631.594 160.857 631.246 161.287 631.246 cv
cp
f
83.1919 626.488 mo
85.6606 626.488 li
86.0688 626.488 86.4009 626.821 86.4009 627.229 cv
86.4009 629.945 li
86.4009 630.354 86.0688 630.684 85.6606 630.684 cv
83.1919 630.684 li
82.7827 630.684 82.4517 630.354 82.4517 629.945 cv
82.4517 627.229 li
82.4517 626.821 82.7827 626.488 83.1919 626.488 cv
cp
f
87.9448 626.488 mo
90.4136 626.488 li
90.8228 626.488 91.1548 626.821 91.1548 627.229 cv
91.1548 629.945 li
91.1548 630.354 90.8228 630.684 90.4136 630.684 cv
87.9448 630.684 li
87.5356 630.684 87.2046 630.354 87.2046 629.945 cv
87.2046 627.229 li
87.2046 626.821 87.5356 626.488 87.9448 626.488 cv
cp
f
92.6978 626.488 mo
95.1665 626.488 li
95.5757 626.488 95.9067 626.821 95.9067 627.229 cv
95.9067 629.945 li
95.9067 630.354 95.5757 630.684 95.1665 630.684 cv
92.6978 630.684 li
92.2896 630.684 91.9575 630.354 91.9575 629.945 cv
91.9575 627.229 li
91.9575 626.821 92.2896 626.488 92.6978 626.488 cv
cp
f
97.4517 626.488 mo
99.9204 626.488 li
100.329 626.488 100.661 626.821 100.661 627.229 cv
100.661 629.945 li
100.661 630.354 100.329 630.684 99.9204 630.684 cv
97.4517 630.684 li
97.0425 630.684 96.7114 630.354 96.7114 629.945 cv
96.7114 627.229 li
96.7114 626.821 97.0425 626.488 97.4517 626.488 cv
cp
f
102.205 626.488 mo
104.672 626.488 li
105.083 626.488 105.414 626.821 105.414 627.229 cv
105.414 629.945 li
105.414 630.354 105.083 630.684 104.672 630.684 cv
102.205 630.684 li
101.795 630.684 101.463 630.354 101.463 629.945 cv
101.463 627.229 li
101.463 626.821 101.795 626.488 102.205 626.488 cv
cp
f
106.958 626.488 mo
109.426 626.488 li
109.835 626.488 110.167 626.821 110.167 627.229 cv
110.167 629.945 li
110.167 630.354 109.835 630.684 109.426 630.684 cv
106.958 630.684 li
106.549 630.684 106.217 630.354 106.217 629.945 cv
106.217 627.229 li
106.217 626.821 106.549 626.488 106.958 626.488 cv
cp
f
111.711 626.488 mo
114.179 626.488 li
114.588 626.488 114.92 626.821 114.92 627.229 cv
114.92 629.945 li
114.92 630.354 114.588 630.684 114.179 630.684 cv
111.711 630.684 li
111.301 630.684 110.971 630.354 110.971 629.945 cv
110.971 627.229 li
110.971 626.821 111.301 626.488 111.711 626.488 cv
cp
f
116.463 626.488 mo
118.932 626.488 li
119.341 626.488 119.673 626.821 119.673 627.229 cv
119.673 629.945 li
119.673 630.354 119.341 630.684 118.932 630.684 cv
116.463 630.684 li
116.055 630.684 115.723 630.354 115.723 629.945 cv
115.723 627.229 li
115.723 626.821 116.055 626.488 116.463 626.488 cv
cp
f
121.217 626.488 mo
123.686 626.488 li
124.095 626.488 124.426 626.821 124.426 627.229 cv
124.426 629.945 li
124.426 630.354 124.095 630.684 123.686 630.684 cv
121.217 630.684 li
120.809 630.684 120.477 630.354 120.477 629.945 cv
120.477 627.229 li
120.477 626.821 120.809 626.488 121.217 626.488 cv
cp
f
125.971 626.488 mo
128.439 626.488 li
128.848 626.488 129.179 626.821 129.179 627.229 cv
129.179 629.945 li
129.179 630.354 128.848 630.684 128.439 630.684 cv
125.971 630.684 li
125.561 630.684 125.23 630.354 125.23 629.945 cv
125.23 627.229 li
125.23 626.821 125.561 626.488 125.971 626.488 cv
cp
f
130.723 626.488 mo
133.192 626.488 li
133.601 626.488 133.933 626.821 133.933 627.229 cv
133.933 629.945 li
133.933 630.354 133.601 630.684 133.192 630.684 cv
130.723 630.684 li
130.315 630.684 129.983 630.354 129.983 629.945 cv
129.983 627.229 li
129.983 626.821 130.315 626.488 130.723 626.488 cv
cp
f
135.477 626.488 mo
137.945 626.488 li
138.354 626.488 138.686 626.821 138.686 627.229 cv
138.686 629.945 li
138.686 630.354 138.354 630.684 137.945 630.684 cv
135.477 630.684 li
135.067 630.684 134.737 630.354 134.737 629.945 cv
134.737 627.229 li
134.737 626.821 135.067 626.488 135.477 626.488 cv
cp
f
85.4771 631.262 mo
87.9448 631.262 li
88.354 631.262 88.6851 631.592 88.6851 632.002 cv
88.6851 634.717 li
88.6851 635.125 88.354 635.458 87.9448 635.458 cv
85.4771 635.458 li
85.0679 635.458 84.7358 635.125 84.7358 634.717 cv
84.7358 632.002 li
84.7358 631.592 85.0679 631.262 85.4771 631.262 cv
cp
f
90.23 631.249 mo
92.6978 631.249 li
93.1069 631.249 93.439 631.58 93.439 631.989 cv
93.439 634.704 li
93.439 635.113 93.1069 635.444 92.6978 635.444 cv
90.23 635.444 li
89.8208 635.444 89.4897 635.113 89.4897 634.704 cv
89.4897 631.989 li
89.4897 631.58 89.8208 631.249 90.23 631.249 cv
cp
f
94.9829 631.249 mo
97.4517 631.249 li
97.8599 631.249 98.1919 631.58 98.1919 631.989 cv
98.1919 634.704 li
98.1919 635.113 97.8599 635.444 97.4517 635.444 cv
94.9829 635.444 li
94.5737 635.444 94.2427 635.113 94.2427 634.704 cv
94.2427 631.989 li
94.2427 631.58 94.5737 631.249 94.9829 631.249 cv
cp
f
99.7358 631.249 mo
102.205 631.249 li
102.614 631.249 102.945 631.58 102.945 631.989 cv
102.945 634.704 li
102.945 635.113 102.614 635.444 102.205 635.444 cv
99.7358 635.444 li
99.3276 635.444 98.9956 635.113 98.9956 634.704 cv
98.9956 631.989 li
98.9956 631.58 99.3276 631.249 99.7358 631.249 cv
cp
f
104.49 631.249 mo
106.958 631.249 li
107.367 631.249 107.698 631.58 107.698 631.989 cv
107.698 634.704 li
107.698 635.113 107.367 635.444 106.958 635.444 cv
104.49 635.444 li
104.081 635.444 103.749 635.113 103.749 634.704 cv
103.749 631.989 li
103.749 631.58 104.081 631.249 104.49 631.249 cv
cp
f
109.243 631.249 mo
111.711 631.249 li
112.12 631.249 112.452 631.58 112.452 631.989 cv
112.452 634.704 li
112.452 635.113 112.12 635.444 111.711 635.444 cv
109.243 635.444 li
108.833 635.444 108.501 635.113 108.501 634.704 cv
108.501 631.989 li
108.501 631.58 108.833 631.249 109.243 631.249 cv
cp
f
113.996 631.249 mo
116.463 631.249 li
116.874 631.249 117.205 631.58 117.205 631.989 cv
117.205 634.704 li
117.205 635.113 116.874 635.444 116.463 635.444 cv
113.996 635.444 li
113.586 635.444 113.255 635.113 113.255 634.704 cv
113.255 631.989 li
113.255 631.58 113.586 631.249 113.996 631.249 cv
cp
f
118.749 631.249 mo
121.217 631.249 li
121.625 631.249 121.958 631.58 121.958 631.989 cv
121.958 634.704 li
121.958 635.113 121.625 635.444 121.217 635.444 cv
118.749 635.444 li
118.339 635.444 118.008 635.113 118.008 634.704 cv
118.008 631.989 li
118.008 631.58 118.339 631.249 118.749 631.249 cv
cp
f
123.501 631.249 mo
125.971 631.249 li
126.379 631.249 126.711 631.58 126.711 631.989 cv
126.711 634.704 li
126.711 635.113 126.379 635.444 125.971 635.444 cv
123.501 635.444 li
123.093 635.444 122.761 635.113 122.761 634.704 cv
122.761 631.989 li
122.761 631.58 123.093 631.249 123.501 631.249 cv
cp
f
128.255 631.249 mo
130.723 631.249 li
131.133 631.249 131.463 631.58 131.463 631.989 cv
131.463 634.704 li
131.463 635.113 131.133 635.444 130.723 635.444 cv
128.255 635.444 li
127.846 635.444 127.514 635.113 127.514 634.704 cv
127.514 631.989 li
127.514 631.58 127.846 631.249 128.255 631.249 cv
cp
f
133.008 631.249 mo
135.477 631.249 li
135.885 631.249 136.217 631.58 136.217 631.989 cv
136.217 634.704 li
136.217 635.113 135.885 635.444 135.477 635.444 cv
133.008 635.444 li
132.599 635.444 132.268 635.113 132.268 634.704 cv
132.268 631.989 li
132.268 631.58 132.599 631.249 133.008 631.249 cv
cp
f
137.761 631.249 mo
140.23 631.249 li
140.639 631.249 140.971 631.58 140.971 631.989 cv
140.971 634.704 li
140.971 635.113 140.639 635.444 140.23 635.444 cv
137.761 635.444 li
137.352 635.444 137.021 635.113 137.021 634.704 cv
137.021 631.989 li
137.021 631.58 137.352 631.249 137.761 631.249 cv
cp
f
86.5786 636.036 mo
89.0474 636.036 li
89.4556 636.036 89.7876 636.367 89.7876 636.776 cv
89.7876 639.491 li
89.7876 639.9 89.4556 640.233 89.0474 640.233 cv
86.5786 640.233 li
86.1694 640.233 85.8384 639.9 85.8384 639.491 cv
85.8384 636.776 li
85.8384 636.367 86.1694 636.036 86.5786 636.036 cv
cp
f
91.3325 636.024 mo
93.8003 636.024 li
94.2095 636.024 94.5415 636.356 94.5415 636.765 cv
94.5415 639.479 li
94.5415 639.888 94.2095 640.221 93.8003 640.221 cv
91.3325 640.221 li
90.9224 640.221 90.5913 639.888 90.5913 639.479 cv
90.5913 636.765 li
90.5913 636.356 90.9224 636.024 91.3325 636.024 cv
cp
f
96.0845 636.024 mo
98.5532 636.024 li
98.9624 636.024 99.2935 636.356 99.2935 636.765 cv
99.2935 639.479 li
99.2935 639.888 98.9624 640.221 98.5532 640.221 cv
96.0845 640.221 li
95.6763 640.221 95.3442 639.888 95.3442 639.479 cv
95.3442 636.765 li
95.3442 636.356 95.6763 636.024 96.0845 636.024 cv
cp
f
100.838 636.024 mo
103.307 636.024 li
103.715 636.024 104.047 636.356 104.047 636.765 cv
104.047 639.479 li
104.047 639.888 103.715 640.221 103.307 640.221 cv
100.838 640.221 li
100.429 640.221 100.098 639.888 100.098 639.479 cv
100.098 636.765 li
100.098 636.356 100.429 636.024 100.838 636.024 cv
cp
f
105.592 636.024 mo
108.06 636.024 li
108.469 636.024 108.8 636.356 108.8 636.765 cv
108.8 639.479 li
108.8 639.888 108.469 640.221 108.06 640.221 cv
105.592 640.221 li
105.182 640.221 104.85 639.888 104.85 639.479 cv
104.85 636.765 li
104.85 636.356 105.182 636.024 105.592 636.024 cv
cp
f
110.344 636.024 mo
112.813 636.024 li
113.222 636.024 113.553 636.356 113.553 636.765 cv
113.553 639.479 li
113.553 639.888 113.222 640.221 112.813 640.221 cv
110.344 640.221 li
109.936 640.221 109.604 639.888 109.604 639.479 cv
109.604 636.765 li
109.604 636.356 109.936 636.024 110.344 636.024 cv
cp
f
115.098 636.024 mo
117.566 636.024 li
117.975 636.024 118.307 636.356 118.307 636.765 cv
118.307 639.479 li
118.307 639.888 117.975 640.221 117.566 640.221 cv
115.098 640.221 li
114.688 640.221 114.358 639.888 114.358 639.479 cv
114.358 636.765 li
114.358 636.356 114.688 636.024 115.098 636.024 cv
cp
f
119.851 636.024 mo
122.32 636.024 li
122.728 636.024 123.06 636.356 123.06 636.765 cv
123.06 639.479 li
123.06 639.888 122.728 640.221 122.32 640.221 cv
119.851 640.221 li
119.442 640.221 119.11 639.888 119.11 639.479 cv
119.11 636.765 li
119.11 636.356 119.442 636.024 119.851 636.024 cv
cp
f
124.604 636.024 mo
127.073 636.024 li
127.482 636.024 127.813 636.356 127.813 636.765 cv
127.813 639.479 li
127.813 639.888 127.482 640.221 127.073 640.221 cv
124.604 640.221 li
124.196 640.221 123.864 639.888 123.864 639.479 cv
123.864 636.765 li
123.864 636.356 124.196 636.024 124.604 636.024 cv
cp
f
129.358 636.024 mo
131.826 636.024 li
132.235 636.024 132.566 636.356 132.566 636.765 cv
132.566 639.479 li
132.566 639.888 132.235 640.221 131.826 640.221 cv
129.358 640.221 li
128.948 640.221 128.617 639.888 128.617 639.479 cv
128.617 636.765 li
128.617 636.356 128.948 636.024 129.358 636.024 cv
cp
f
134.111 636.024 mo
136.579 636.024 li
136.988 636.024 137.32 636.356 137.32 636.765 cv
137.32 639.479 li
137.32 639.888 136.988 640.221 136.579 640.221 cv
134.111 640.221 li
133.702 640.221 133.37 639.888 133.37 639.479 cv
133.37 636.765 li
133.37 636.356 133.702 636.024 134.111 636.024 cv
cp
f
89.0591 640.809 mo
91.5269 640.809 li
91.936 640.809 92.2681 641.141 92.2681 641.549 cv
92.2681 644.265 li
92.2681 644.674 91.936 645.004 91.5269 645.004 cv
89.0591 645.004 li
88.6489 645.004 88.3188 644.674 88.3188 644.265 cv
88.3188 641.549 li
88.3188 641.141 88.6489 640.809 89.0591 640.809 cv
cp
f
93.812 640.809 mo
96.2808 640.809 li
96.689 640.809 97.021 641.141 97.021 641.549 cv
97.021 644.265 li
97.021 644.674 96.689 645.004 96.2808 645.004 cv
93.812 645.004 li
93.4028 645.004 93.0708 644.674 93.0708 644.265 cv
93.0708 641.549 li
93.0708 641.141 93.4028 640.809 93.812 640.809 cv
cp
f
98.5649 640.809 mo
101.034 640.809 li
101.443 640.809 101.774 641.141 101.774 641.549 cv
101.774 644.265 li
101.774 644.674 101.443 645.004 101.034 645.004 cv
98.5649 645.004 li
98.1567 645.004 97.8247 644.674 97.8247 644.265 cv
97.8247 641.549 li
97.8247 641.141 98.1567 640.809 98.5649 640.809 cv
cp
f
103.319 640.809 mo
105.787 640.809 li
106.196 640.809 106.527 641.141 106.527 641.549 cv
106.527 644.265 li
106.527 644.674 106.196 645.004 105.787 645.004 cv
103.319 645.004 li
102.909 645.004 102.578 644.674 102.578 644.265 cv
102.578 641.549 li
102.578 641.141 102.909 640.809 103.319 640.809 cv
cp
f
108.071 640.809 mo
110.54 640.809 li
110.949 640.809 111.281 641.141 111.281 641.549 cv
111.281 644.265 li
111.281 644.674 110.949 645.004 110.54 645.004 cv
108.071 645.004 li
107.663 645.004 107.331 644.674 107.331 644.265 cv
107.331 641.549 li
107.331 641.141 107.663 640.809 108.071 640.809 cv
cp
f
112.825 640.809 mo
115.292 640.809 li
115.702 640.809 116.034 641.141 116.034 641.549 cv
116.034 644.265 li
116.034 644.674 115.702 645.004 115.292 645.004 cv
112.825 645.004 li
112.416 645.004 112.084 644.674 112.084 644.265 cv
112.084 641.549 li
112.084 641.141 112.416 640.809 112.825 640.809 cv
cp
f
117.578 640.809 mo
120.046 640.809 li
120.455 640.809 120.787 641.141 120.787 641.549 cv
120.787 644.265 li
120.787 644.674 120.455 645.004 120.046 645.004 cv
117.578 645.004 li
117.168 645.004 116.837 644.674 116.837 644.265 cv
116.837 641.549 li
116.837 641.141 117.168 640.809 117.578 640.809 cv
cp
f
122.331 640.809 mo
124.799 640.809 li
125.208 640.809 125.54 641.141 125.54 641.549 cv
125.54 644.265 li
125.54 644.674 125.208 645.004 124.799 645.004 cv
122.331 645.004 li
121.922 645.004 121.59 644.674 121.59 644.265 cv
121.59 641.549 li
121.59 641.141 121.922 640.809 122.331 640.809 cv
cp
f
127.084 640.809 mo
129.552 640.809 li
129.961 640.809 130.292 641.141 130.292 641.549 cv
130.292 644.265 li
130.292 644.674 129.961 645.004 129.552 645.004 cv
127.084 645.004 li
126.675 645.004 126.343 644.674 126.343 644.265 cv
126.343 641.549 li
126.343 641.141 126.675 640.809 127.084 640.809 cv
cp
f
131.837 640.809 mo
134.305 640.809 li
134.714 640.809 135.046 641.141 135.046 641.549 cv
135.046 644.265 li
135.046 644.674 134.714 645.004 134.305 645.004 cv
131.837 645.004 li
131.428 645.004 131.097 644.674 131.097 644.265 cv
131.097 641.549 li
131.097 641.141 131.428 640.809 131.837 640.809 cv
cp
f
168.465 626.44 mo
171.09 626.44 li
171.52 626.44 171.869 626.788 171.869 627.217 cv
171.869 630.069 li
171.869 630.5 171.52 630.848 171.09 630.848 cv
168.465 630.848 li
168.036 630.848 167.687 630.5 167.687 630.069 cv
167.687 627.217 li
167.687 626.788 168.036 626.44 168.465 626.44 cv
cp
f
173.086 626.417 mo
175.712 626.417 li
176.141 626.417 176.491 626.764 176.491 627.194 cv
176.491 630.047 li
176.491 630.477 176.141 630.825 175.712 630.825 cv
173.086 630.825 li
172.657 630.825 172.309 630.477 172.309 630.047 cv
172.309 627.194 li
172.309 626.764 172.657 626.417 173.086 626.417 cv
cp
f
177.708 626.417 mo
180.334 626.417 li
180.764 626.417 181.113 626.764 181.113 627.194 cv
181.113 630.047 li
181.113 630.477 180.764 630.825 180.334 630.825 cv
177.708 630.825 li
177.279 630.825 176.93 630.477 176.93 630.047 cv
176.93 627.194 li
176.93 626.764 177.279 626.417 177.708 626.417 cv
cp
f
168.465 631.155 mo
171.09 631.155 li
171.52 631.155 171.869 631.502 171.869 631.932 cv
171.869 634.785 li
171.869 635.213 171.52 635.563 171.09 635.563 cv
168.465 635.563 li
168.036 635.563 167.687 635.213 167.687 634.785 cv
167.687 631.932 li
167.687 631.502 168.036 631.155 168.465 631.155 cv
cp
f
173.094 631.139 mo
175.719 631.139 li
176.15 631.139 176.499 631.487 176.499 631.917 cv
176.499 634.77 li
176.499 635.2 176.15 635.547 175.719 635.547 cv
173.094 635.547 li
172.665 635.547 172.316 635.2 172.316 634.77 cv
172.316 631.917 li
172.316 631.487 172.665 631.139 173.094 631.139 cv
cp
f
177.723 631.139 mo
180.349 631.139 li
180.78 631.139 181.127 631.487 181.127 631.917 cv
181.127 634.77 li
181.127 635.2 180.78 635.547 180.349 635.547 cv
177.723 635.547 li
177.294 635.547 176.946 635.2 176.946 634.77 cv
176.946 631.917 li
176.946 631.487 177.294 631.139 177.723 631.139 cv
cp
f
168.465 635.869 mo
171.09 635.869 li
171.52 635.869 171.869 636.217 171.869 636.648 cv
171.869 639.5 li
171.869 639.929 171.52 640.278 171.09 640.278 cv
168.465 640.278 li
168.036 640.278 167.687 639.929 167.687 639.5 cv
167.687 636.648 li
167.687 636.217 168.036 635.869 168.465 635.869 cv
cp
f
173.088 635.862 mo
175.714 635.862 li
176.144 635.862 176.493 636.209 176.493 636.639 cv
176.493 639.493 li
176.493 639.922 176.144 640.27 175.714 640.27 cv
173.088 640.27 li
172.659 640.27 172.311 639.922 172.311 639.493 cv
172.311 636.639 li
172.311 636.209 172.659 635.862 173.088 635.862 cv
cp
f
177.712 635.862 mo
180.338 635.862 li
180.768 635.862 181.116 636.209 181.116 636.639 cv
181.116 639.493 li
181.116 639.922 180.768 640.27 180.338 640.27 cv
177.712 640.27 li
177.284 640.27 176.935 639.922 176.935 639.493 cv
176.935 636.639 li
176.935 636.209 177.284 635.862 177.712 635.862 cv
cp
f
168.46 640.584 mo
171.086 640.584 li
171.516 640.584 171.864 640.932 171.864 641.362 cv
171.864 644.215 li
171.864 644.645 171.516 644.993 171.086 644.993 cv
168.46 644.993 li
168.031 644.993 167.683 644.645 167.683 644.215 cv
167.683 641.362 li
167.683 640.932 168.031 640.584 168.46 640.584 cv
cp
f
173.084 640.584 mo
175.71 640.584 li
176.14 640.584 176.488 640.932 176.488 641.362 cv
176.488 644.215 li
176.488 644.645 176.14 644.993 175.71 644.993 cv
173.084 644.993 li
172.655 644.993 172.307 644.645 172.307 644.215 cv
172.307 641.362 li
172.307 640.932 172.655 640.584 173.084 640.584 cv
cp
f
177.708 640.584 mo
180.334 640.584 li
180.764 640.584 181.113 640.932 181.113 641.362 cv
181.113 644.215 li
181.113 644.645 180.764 644.993 180.334 644.993 cv
177.708 644.993 li
177.279 644.993 176.93 644.645 176.93 644.215 cv
176.93 641.362 li
176.93 640.932 177.279 640.584 177.708 640.584 cv
cp
f
182.485 626.44 mo
185.057 626.44 li
185.478 626.44 185.819 626.78 185.819 627.2 cv
185.819 630.03 li
185.819 630.45 185.478 630.79 185.057 630.79 cv
182.485 630.79 li
182.064 630.79 181.723 630.45 181.723 630.03 cv
181.723 627.2 li
181.723 626.78 182.064 626.44 182.485 626.44 cv
cp
f
156.592 640.223 mo
159.217 640.223 li
159.647 640.223 159.996 640.573 159.996 641.001 cv
159.996 643.855 li
159.996 644.284 159.647 644.633 159.217 644.633 cv
156.592 644.633 li
156.162 644.633 155.813 644.284 155.813 643.855 cv
155.813 641.001 li
155.813 640.573 156.162 640.223 156.592 640.223 cv
cp
f
156.592 645.34 mo
159.217 645.34 li
159.647 645.34 159.996 645.689 159.996 646.12 cv
159.996 648.971 li
159.996 649.401 159.647 649.75 159.217 649.75 cv
156.592 649.75 li
156.162 649.75 155.813 649.401 155.813 648.971 cv
155.813 646.12 li
155.813 645.689 156.162 645.34 156.592 645.34 cv
cp
f
161.268 645.34 mo
163.893 645.34 li
164.323 645.34 164.671 645.689 164.671 646.12 cv
164.671 648.971 li
164.671 649.401 164.323 649.75 163.893 649.75 cv
161.268 649.75 li
160.837 649.75 160.49 649.401 160.49 648.971 cv
160.49 646.12 li
160.49 645.689 160.837 645.34 161.268 645.34 cv
cp
f
151.916 645.34 mo
154.542 645.34 li
154.97 645.34 155.319 645.689 155.319 646.12 cv
155.319 648.971 li
155.319 649.401 154.97 649.75 154.542 649.75 cv
151.916 649.75 li
151.485 649.75 151.137 649.401 151.137 648.971 cv
151.137 646.12 li
151.137 645.689 151.485 645.34 151.916 645.34 cv
cp
f
78.2905 626.465 mo
80.9165 626.465 li
81.3462 626.465 81.6948 626.815 81.6948 627.244 cv
81.6948 629.891 li
81.6948 630.32 81.3462 630.668 80.9165 630.668 cv
78.2905 630.668 li
77.8618 630.668 77.5132 630.32 77.5132 629.891 cv
77.5132 627.244 li
77.5132 626.815 77.8618 626.465 78.2905 626.465 cv
cp
f
78.27 631.246 mo
83.0894 631.246 li
83.52 631.246 83.8677 631.594 83.8677 632.024 cv
83.8677 634.656 li
83.8677 635.086 83.52 635.435 83.0894 635.435 cv
78.27 635.435 li
77.8394 635.435 77.4917 635.086 77.4917 634.656 cv
77.4917 632.024 li
77.4917 631.594 77.8394 631.246 78.27 631.246 cv
cp
f
78.27 636.036 mo
84.2466 636.036 li
84.6763 636.036 85.0249 636.383 85.0249 636.813 cv
85.0249 639.446 li
85.0249 639.876 84.6763 640.223 84.2466 640.223 cv
78.27 640.223 li
77.8394 640.223 77.4917 639.876 77.4917 639.446 cv
77.4917 636.813 li
77.4917 636.383 77.8394 636.036 78.27 636.036 cv
cp
f
78.27 640.808 mo
86.6372 640.808 li
87.0669 640.808 87.4155 641.157 87.4155 641.586 cv
87.4155 644.218 li
87.4155 644.647 87.0669 644.997 86.6372 644.997 cv
78.27 644.997 li
77.8394 644.997 77.4917 644.647 77.4917 644.218 cv
77.4917 641.586 li
77.4917 641.157 77.8394 640.808 78.27 640.808 cv
cp
f
78.27 645.571 mo
83.144 645.571 li
83.5737 645.571 83.9224 645.918 83.9224 646.348 cv
83.9224 648.971 li
83.9224 649.401 83.5737 649.75 83.144 649.75 cv
78.27 649.75 li
77.8394 649.75 77.4917 649.401 77.4917 648.971 cv
77.4917 646.348 li
77.4917 645.918 77.8394 645.571 78.27 645.571 cv
cp
f
90.5063 645.571 mo
95.3374 645.571 li
95.7671 645.571 96.1147 645.918 96.1147 646.348 cv
96.1147 648.971 li
96.1147 649.401 95.7671 649.75 95.3374 649.75 cv
90.5063 649.75 li
90.0776 649.75 89.729 649.401 89.729 648.971 cv
89.729 646.348 li
89.729 645.918 90.0776 645.571 90.5063 645.571 cv
cp
f
130.415 645.571 mo
135.316 645.571 li
135.746 645.571 136.093 645.918 136.093 646.348 cv
136.093 648.971 li
136.093 649.401 135.746 649.75 135.316 649.75 cv
130.415 649.75 li
129.986 649.75 129.637 649.401 129.637 648.971 cv
129.637 646.348 li
129.637 645.918 129.986 645.571 130.415 645.571 cv
cp
f
142.264 645.571 mo
146.978 645.571 li
147.407 645.571 147.756 645.918 147.756 646.348 cv
147.756 648.971 li
147.756 649.401 147.407 649.75 146.978 649.75 cv
142.264 649.75 li
141.834 649.75 141.486 649.401 141.486 648.971 cv
141.486 646.348 li
141.486 645.918 141.834 645.571 142.264 645.571 cv
cp
f
142.524 631.246 mo
147.002 631.246 li
147.432 631.246 147.78 631.594 147.78 632.024 cv
147.78 634.667 li
147.78 635.095 147.432 635.444 147.002 635.444 cv
142.524 635.444 li
142.093 635.444 141.746 635.095 141.746 634.667 cv
141.746 632.024 li
141.746 631.594 142.093 631.246 142.524 631.246 cv
cp
f
138.827 636.036 mo
147.002 636.036 li
147.432 636.036 147.78 636.383 147.78 636.813 cv
147.78 639.443 li
147.78 639.872 147.432 640.221 147.002 640.221 cv
138.827 640.221 li
138.398 640.221 138.049 639.872 138.049 639.443 cv
138.049 636.813 li
138.049 636.383 138.398 636.036 138.827 636.036 cv
cp
f
136.596 640.849 mo
147.002 640.849 li
147.432 640.849 147.78 641.196 147.78 641.627 cv
147.78 644.227 li
147.78 644.658 147.432 645.004 147.002 645.004 cv
136.596 645.004 li
136.167 645.004 135.818 644.658 135.818 644.227 cv
135.818 641.627 li
135.818 641.196 136.167 640.849 136.596 640.849 cv
cp
f
140.242 626.442 mo
147.002 626.442 li
147.432 626.442 147.78 626.792 147.78 627.22 cv
147.78 629.883 li
147.78 630.313 147.432 630.661 147.002 630.661 cv
140.242 630.661 li
139.813 630.661 139.464 630.313 139.464 629.883 cv
139.464 627.22 li
139.464 626.792 139.813 626.442 140.242 626.442 cv
cp
f
168.46 645.571 mo
175.681 645.571 li
176.11 645.571 176.458 645.918 176.458 646.348 cv
176.458 648.971 li
176.458 649.401 176.11 649.75 175.681 649.75 cv
168.46 649.75 li
168.031 649.75 167.683 649.401 167.683 648.971 cv
167.683 646.348 li
167.683 645.918 168.031 645.571 168.46 645.571 cv
cp
f
182.547 631.105 mo
185.036 631.105 li
185.465 631.105 185.813 631.454 185.813 631.883 cv
185.813 639.465 li
185.813 639.895 185.465 640.245 185.036 640.245 cv
182.547 640.245 li
182.118 640.245 181.77 639.895 181.77 639.465 cv
181.77 631.883 li
181.77 631.454 182.118 631.105 182.547 631.105 cv
cp
f
97.6714 645.571 mo
128.127 645.571 li
128.557 645.571 128.905 645.918 128.905 646.348 cv
128.905 648.971 li
128.905 649.401 128.557 649.75 128.127 649.75 cv
97.6714 649.75 li
97.2417 649.75 96.8931 649.401 96.8931 648.971 cv
96.8931 646.348 li
96.8931 645.918 97.2417 645.571 97.6714 645.571 cv
cp
f
182.604 640.565 mo
185.042 640.565 li
185.47 640.565 185.819 640.914 185.819 641.342 cv
185.819 648.971 li
185.819 649.401 185.47 649.75 185.042 649.75 cv
182.604 649.75 li
182.174 649.75 181.825 649.401 181.825 648.971 cv
181.825 641.342 li
181.825 640.914 182.174 640.565 182.604 640.565 cv
cp
f
177.699 645.571 mo
180.313 645.571 li
180.742 645.571 181.09 645.918 181.09 646.348 cv
181.09 648.971 li
181.09 649.401 180.742 649.75 180.313 649.75 cv
177.699 649.75 li
177.27 649.75 176.92 649.401 176.92 648.971 cv
176.92 646.348 li
176.92 645.918 177.27 645.571 177.699 645.571 cv
cp
f
416.658 748.615 mo
524.682 748.615 612.25 836.184 612.25 944.206 cv
612.25 1052.23 524.682 1139.8 416.658 1139.8 cv
308.636 1139.8 221.068 1052.23 221.068 944.206 cv
221.068 836.184 308.636 748.615 416.658 748.615 cv
cp
.855469 .847656 .785156 1 cmyk
f
521.079 982.291 mo
524.668 983.476 528.192 984.735 531.668 986.083 cv
526.85 996.629 520.624 1006.4 513.227 1015.16 cv
511.172 1014.16 509.11 1013.18 507.014 1012.27 cv
512.834 1002.99 517.532 992.917 521.079 982.291 cv
cp
312.223 982.291 mo
315.771 992.918 320.488 1002.98 326.312 1012.27 cv
324.216 1013.18 322.151 1014.16 320.097 1015.16 cv
312.698 1006.4 306.476 996.63 301.654 986.083 cv
305.127 984.736 308.638 983.474 312.223 982.291 cv
cp
528.842 936.566 mo
542.999 936.566 li
542.653 952.076 539.497 966.904 534.024 980.563 cv
530.362 979.142 526.649 977.815 522.874 976.57 cv
526.559 963.832 528.584 950.376 528.842 936.566 cv
cp
501.583 936.566 mo
522.762 936.566 li
522.5 949.899 520.487 962.717 516.997 974.73 cv
510.915 972.9 504.651 971.291 498.172 969.884 cv
500.245 959.173 501.411 947.999 501.583 936.566 cv
cp
310.563 936.566 mo
331.742 936.566 li
331.913 948.001 333.063 959.171 335.13 969.884 cv
328.652 971.29 322.408 972.9 316.328 974.73 cv
312.84 962.717 310.824 949.899 310.563 936.566 cv
cp
290.324 936.566 mo
304.481 936.566 li
304.739 950.377 306.766 963.832 310.449 976.569 cv
306.674 977.816 302.961 979.142 299.299 980.563 cv
293.827 966.903 290.669 952.076 290.324 936.566 cv
cp
419.511 910.899 mo
417.662 911.505 415.649 911.629 413.789 911.191 cv
413.789 922.073 li
414.171 922.034 414.547 922.001 414.934 921.983 cv
416.493 921.901 418.015 921.952 419.511 922.118 cv
419.511 910.899 li
419.511 910.899 li
cp
492.182 898.807 mo
494.153 908.998 495.303 919.757 495.481 930.869 cv
462.276 930.869 li
462.186 921.415 461.739 912.142 460.928 903.182 cv
471.973 902.161 482.342 900.71 492.182 898.807 cv
cp
341.142 898.807 mo
350.982 900.711 361.352 902.162 372.396 903.182 cv
371.59 912.141 371.159 921.417 371.071 930.869 cv
337.844 930.869 li
338.019 919.756 339.17 908.998 341.142 898.807 cv
cp
516.997 892.726 mo
520.481 904.731 522.5 917.544 522.762 930.868 cv
501.583 930.868 li
501.411 919.443 500.241 908.276 498.172 897.573 cv
504.649 896.167 510.917 894.555 516.997 892.726 cv
cp
316.328 892.726 mo
322.407 894.556 328.654 896.167 335.13 897.573 cv
333.064 908.278 331.913 919.441 331.742 930.868 cv
310.563 930.868 li
310.824 917.542 312.844 904.732 316.328 892.726 cv
cp
534.026 886.871 mo
539.499 900.532 542.655 915.356 542.999 930.868 cv
528.842 930.868 li
528.584 917.056 526.561 903.603 522.875 890.865 cv
526.651 889.619 530.362 888.291 534.026 886.871 cv
cp
299.299 886.871 mo
302.961 888.291 306.674 889.619 310.449 890.865 cv
306.766 903.603 304.739 917.057 304.481 930.868 cv
290.324 930.868 li
290.669 915.356 293.827 900.532 299.299 886.871 cv
cp
481.344 864.032 mo
485.334 872.885 488.59 882.601 490.971 892.951 cv
481.327 894.813 471.159 896.212 460.323 897.213 cv
459.233 887.253 457.692 877.76 455.747 868.877 cv
464.784 867.723 473.286 866.118 481.344 864.032 cv
cp
351.979 864.032 mo
360.04 866.118 368.519 867.723 377.556 868.877 cv
375.614 877.758 374.065 887.256 372.979 897.213 cv
362.15 896.213 351.988 894.812 342.354 892.951 cv
344.732 882.601 347.987 872.885 351.979 864.032 cv
cp
501.202 857.591 mo
506.913 866.542 511.661 876.42 515.223 887.005 cv
509.329 888.777 503.245 890.329 496.959 891.694 cv
494.594 881.346 491.35 871.51 487.292 862.371 cv
492.061 860.958 496.688 859.369 501.202 857.591 cv
cp
332.122 857.591 mo
336.632 859.367 341.245 860.958 346.011 862.371 cv
341.953 871.511 338.725 881.368 336.363 891.716 cv
330.074 890.349 324 888.778 318.101 887.005 cv
321.666 876.42 326.408 866.542 332.122 857.591 cv
cp
513.227 852.296 mo
520.62 861.05 526.852 870.81 531.668 881.351 cv
528.196 882.698 524.684 883.96 521.102 885.143 cv
517.555 874.524 512.829 864.464 507.012 855.191 cv
509.108 854.271 511.172 853.302 513.227 852.296 cv
cp
320.098 852.274 mo
322.152 853.274 324.217 854.25 326.313 855.168 cv
320.489 864.448 315.772 874.514 312.224 885.142 cv
308.641 883.958 305.128 882.697 301.655 881.35 cv
306.477 870.803 312.699 861.033 320.098 852.274 cv
cp
479.84 824.319 mo
490.719 830.626 500.579 838.509 509.098 847.652 cv
507.307 848.503 505.495 849.311 503.668 850.098 cv
501.338 846.736 498.852 843.5 496.219 840.383 cv
491.145 834.368 485.657 829.005 479.84 824.319 cv
cp
353.549 824.274 mo
347.711 828.972 342.198 834.345 337.104 840.383 cv
334.474 843.501 332.009 846.759 329.678 850.121 cv
327.843 849.331 326.024 848.51 324.226 847.652 cv
332.766 838.488 342.641 830.587 353.549 824.274 cv
cp
428.262 812.99 mo
448.641 817.667 466.493 834.478 478.674 858.511 cv
471.022 860.436 462.956 861.949 454.375 863.021 cv
452.967 857.334 451.401 851.922 449.643 846.889 cv
443.799 830.148 436.442 818.584 428.262 812.99 cv
cp
405.063 812.99 mo
396.876 818.585 389.504 830.148 383.658 846.889 cv
381.9 851.924 380.332 857.333 378.925 863.021 cv
370.354 861.949 362.298 860.435 354.648 858.511 cv
366.831 834.478 384.685 817.667 405.063 812.99 cv
cp
391.779 811.059 mo
378.427 817.164 366.228 828.21 356.175 843.591 cv
353.429 847.792 350.899 852.246 348.592 856.895 cv
344.121 855.598 339.785 854.143 335.557 852.52 cv
349.902 832.288 369.477 817.465 391.779 811.059 cv
cp
441.499 811.038 mo
463.817 817.432 483.413 832.257 497.768 852.499 cv
493.534 854.125 489.19 855.596 484.711 856.895 cv
482.401 852.243 479.875 847.794 477.127 843.591 cv
467.061 828.192 454.864 817.137 441.499 811.038 cv
cp
416.661 801.435 mo
412.7 801.435 408.768 801.68 404.883 802.153 cv
337.549 808.133 284.559 864.855 284.559 933.717 cv
284.559 972.709 301.547 1007.81 328.511 1032.01 cv
328.751 1029.66 329.023 1027.31 329.318 1024.97 cv
327.569 1023.29 325.877 1021.55 324.226 1019.78 cv
326.024 1018.93 327.843 1018.13 329.678 1017.34 cv
329.867 1017.61 330.069 1017.87 330.261 1018.14 cv
330.701 1015.13 331.16 1012.13 331.674 1009.13 cv
326.167 1000.37 321.593 990.745 318.122 980.453 cv
324.016 978.681 330.081 977.105 336.362 975.741 cv
336.638 976.941 336.917 978.14 337.215 979.331 cv
338.259 974.145 339.008 968.819 340.267 963.669 cv
338.834 954.964 337.989 945.9 337.843 936.566 cv
371.049 936.566 li
371.068 939.355 371.123 942.134 371.205 944.89 cv
373.281 944.427 375.242 943.669 377.128 942.736 cv
377.079 940.689 377.055 938.632 377.038 936.566 cv
386.507 936.566 li
387.632 935.704 388.768 934.836 389.871 933.986 cv
391.549 933.029 393.187 931.952 394.829 930.868 cv
377.039 930.868 li
377.128 921.576 377.569 912.466 378.363 903.675 cv
387.416 904.372 396.966 904.792 407.015 904.955 cv
406.43 903.034 406.513 900.908 407.171 898.964 cv
397.269 898.805 387.879 898.39 378.97 897.708 cv
380.058 887.804 381.597 878.36 383.546 869.574 cv
390.381 870.278 397.543 870.737 405.062 870.964 cv
402.071 870.339 399.378 868.343 398.689 865.175 cv
398.653 865.016 398.63 864.862 398.601 864.705 cv
393.899 864.468 389.346 864.136 384.937 863.695 cv
386.253 858.472 387.715 853.504 389.333 848.865 cv
396.098 829.493 404.871 817.581 413.788 815.458 cv
413.788 847.518 li
414.532 847.435 415.274 847.41 416.01 847.428 cv
417.177 847.369 418.341 847.34 419.509 847.383 cv
419.509 815.458 li
428.436 817.566 437.219 829.477 443.989 848.865 cv
445.608 853.505 447.069 858.471 448.385 863.696 cv
445.059 864.028 441.649 864.309 438.155 864.525 cv
438.1 865.175 437.991 865.826 437.84 866.477 cv
437.604 868 437.135 869.363 436.473 870.605 cv
441.04 870.354 445.475 870.017 449.778 869.574 cv
451.729 878.363 453.266 887.801 454.354 897.708 cv
445.372 898.396 435.92 898.808 425.928 898.964 cv
426.233 899.84 426.374 900.764 426.331 901.724 cv
426.424 902.884 426.27 903.977 425.928 904.977 cv
436.127 904.821 445.784 904.381 454.959 903.675 cv
455.754 912.466 456.196 921.576 456.284 930.868 cv
439.659 930.868 li
442.27 932.701 444.784 934.646 447.243 936.566 cv
456.284 936.566 li
456.266 938.783 456.227 940.991 456.17 943.185 cv
458.065 944.223 460.045 945.075 462.096 945.788 cv
462.196 942.73 462.252 939.663 462.276 936.566 cv
495.481 936.566 li
495.379 942.916 494.954 949.139 494.247 955.212 cv
494.342 955.359 494.446 955.504 494.538 955.661 cv
496.333 962.209 497.362 969.126 497.926 975.965 cv
503.86 977.279 509.618 978.773 515.202 980.453 cv
511.889 990.283 507.547 999.5 502.368 1007.94 cv
502.764 1011.08 503.18 1014.25 503.602 1017.43 cv
503.622 1017.4 503.649 1017.37 503.668 1017.34 cv
505.495 1018.12 507.309 1018.93 509.098 1019.78 cv
507.61 1021.38 506.069 1022.93 504.499 1024.45 cv
504.786 1026.83 505.061 1029.2 505.284 1031.58 cv
531.958 1007.4 548.743 972.475 548.743 933.716 cv
548.743 864.854 495.776 808.133 428.44 802.152 cv
424.555 801.679 420.625 801.435 416.661 801.435 cv
416.661 801.435 li
cp
0 0 0 0 cmyk
f
418.974 1012.08 mo
418.974 1012.08 445.165 990.477 445.165 969.521 cv
445.165 948.563 435.536 933.01 435.536 933.01 cv
424.348 926.528 li
410.023 926.528 li
410.023 926.528 406.61 928.634 396.148 934.737 cv
392.619 947.54 380.701 965.201 387.192 983.561 cv
393.685 1001.93 418.974 1012.08 418.974 1012.08 cv
418.974 1012.08 li
cp
.855469 .847656 .785156 1 cmyk
f
414.512 930.405 mo
413.305 930.425 412.107 930.567 410.944 930.95 cv
408.233 931.686 405.77 932.981 403.312 934.275 cv
402.878 933.716 402.419 933.196 402.03 932.611 cv
402.361 932.293 402.705 931.973 403.063 931.674 cv
402.38 931.588 401.469 931.645 400.936 932.007 cv
400.842 932.069 400.751 932.165 400.684 932.248 cv
400.654 932.289 400.613 932.356 400.591 932.399 cv
400.558 932.468 400.515 932.564 400.495 932.643 cv
400.456 932.83 400.461 933.052 400.528 933.307 cv
403.143 935.788 406.675 937.136 409.942 938.629 cv
411.807 939.548 413.78 940.241 415.574 941.292 cv
412.814 943.106 411.884 946.333 410.381 949.035 cv
409.198 951.917 407.394 954.555 406.627 957.591 cv
408.479 956.004 409.531 953.789 411.102 951.966 cv
411.647 951.074 412.574 950.544 413.51 950.093 cv
414.302 950.879 415.086 951.649 415.794 952.513 cv
415.241 958.527 412.52 964.074 411.602 970.021 cv
411.257 974.211 411.161 978.408 410.944 982.6 cv
410.476 985.259 411.018 987.992 410.508 990.646 cv
410.394 995.419 410.522 1000.2 410.445 1004.98 cv
410.563 1005.15 410.797 1005.5 410.913 1005.67 cv
410.784 1005.73 410.541 1005.86 410.413 1005.92 cv
406.807 1001.66 404.054 996.796 401.343 991.974 cv
397.154 985.013 394.568 977.193 393.241 969.266 cv
392.992 966.369 392.472 963.459 392.96 960.555 cv
393.121 957.102 393.457 953.592 394.742 950.335 cv
395.518 948.162 396.652 946.024 396.995 943.743 cv
395.991 942.071 395.688 940.032 396.307 938.177 cv
396.875 936.519 397.587 934.917 398.12 933.247 cv
394.878 935.307 391.326 936.864 388.173 939.054 cv
386.814 939.949 385.913 941.318 384.824 942.471 cv
382.911 944.223 380.375 945.072 378.008 946.071 cv
373.936 947.859 369.446 948.413 365.117 949.335 cv
360.001 950.343 354.792 950.796 349.726 952.058 cv
348.083 952.488 346.45 953.542 345.911 955.173 cv
345.078 957.34 344.902 959.681 344.19 961.884 cv
342.512 967.505 341.207 973.229 340.063 978.971 cv
339.721 980.712 338.742 982.386 339.062 984.205 cv
339.312 985.007 339.876 985.645 340.405 986.292 cv
340.27 986.721 340.157 987.158 340.031 987.588 cv
339.106 988.228 337.902 988.547 337.151 989.375 cv
337.1 989.473 337.054 989.587 337.026 989.676 cv
337.017 989.711 337.002 989.766 336.994 989.797 cv
336.992 989.822 336.996 989.866 336.994 989.888 cv
336.994 989.921 336.992 989.98 336.994 990.009 cv
336.996 990.034 336.992 990.079 336.994 990.1 cv
336.999 990.118 337.024 990.145 337.026 990.162 cv
337.033 990.185 337.052 990.232 337.059 990.252 cv
337.302 990.898 338.188 991.349 338.81 991.614 cv
338.783 993.04 337.37 993.954 337.244 995.364 cv
336.709 999.427 335.74 1003.41 334.932 1007.43 cv
333.988 1012.38 333.135 1017.35 332.647 1022.37 cv
332.286 1028.93 330.722 1035.37 330.455 1041.93 cv
330.441 1044 329.912 1046.08 330.362 1048.13 cv
330.691 1050.36 331.983 1052.28 333.146 1054.18 cv
335.099 1057.22 337.432 1060.02 339.716 1062.83 cv
341.261 1064.5 342.542 1066.44 344.407 1067.82 cv
347.024 1069.9 349.462 1072.21 352.259 1074.08 cv
353.945 1075.19 355.67 1076.3 357.139 1077.68 cv
357.782 1078.6 357.498 1079.83 357.765 1080.89 cv
355.701 1096.85 353.145 1116.08 351.101 1132.04 cv
350.979 1132.9 373.356 1138.39 409.887 1143.02 cv
439.143 1145.25 428.266 1142.84 475.26 1133.99 cv
474.086 1117.95 473.018 1101.92 471.881 1085.88 cv
471.563 1084.26 471.967 1082.57 471.381 1081.01 cv
476.6 1077.65 482.143 1074.82 487.331 1071.42 cv
489.383 1070.12 491.401 1068.76 493.467 1067.49 cv
496.542 1065.72 498.981 1063.14 501.752 1060.99 cv
502.27 1057.95 502.545 1054.88 503.131 1051.85 cv
503.131 1042.69 li
502.686 1041.17 503.034 1039.57 502.692 1038.03 cv
502.387 1033.13 502.04 1028.21 501.379 1023.34 cv
500.147 1016.92 500.377 1010.36 499.163 1003.95 cv
498.805 1001.69 497.51 999.74 496.844 997.572 cv
497.584 997.271 498.315 996.949 499.069 996.663 cv
498.874 996.083 498.756 995.439 498.344 994.969 cv
498.278 994.894 498.184 994.795 498.094 994.727 cv
497.364 994.078 496.459 993.326 496.657 992.249 cv
496.987 990.6 498.385 989.436 499.25 988.045 cv
498.336 987.084 497.051 986.633 495.84 986.14 cv
495.864 984.575 495.967 983.002 495.688 981.453 cv
494.897 974.836 493.78 968.253 493.186 961.615 cv
493.04 958.073 490.711 954.541 487.18 953.388 cv
479.239 953.115 471.379 951.525 463.688 949.669 cv
458.483 948.359 452.993 946.729 449.325 942.684 cv
447.223 939.96 444.129 938.263 441.442 936.154 cv
438.438 934.006 435.549 931.376 431.776 930.618 cv
432.95 933.129 435.961 934.308 437 936.879 cv
437.256 938.364 436.176 939.747 436.502 941.264 cv
436.319 943.118 438.813 943.411 439.129 945.042 cv
440.2 948.407 439.59 951.96 439.752 955.417 cv
439.221 964.942 437.793 974.435 435.374 983.69 cv
433.793 989.21 432.026 994.778 428.901 999.687 cv
427.877 1001.34 426.522 1002.79 424.985 1004.01 cv
424.948 999.671 425.038 995.346 424.956 991.008 cv
424.415 987.888 424.997 984.691 424.456 981.574 cv
424.473 977.077 423.453 972.656 422.703 968.235 cv
422.167 964.898 421.199 961.673 420.451 958.379 cv
420.005 956.554 419.417 954.727 419.357 952.843 cv
419.398 951.78 420.486 951.193 421.234 950.576 cv
423.76 952.931 425.209 956.117 427.428 958.709 cv
426.686 955.719 425.292 952.924 424.02 950.123 cv
422.509 946.896 420.316 944.052 418.138 941.23 cv
420.292 940.64 422.292 939.67 424.334 938.783 cv
427.227 937.171 430.518 935.907 432.62 933.277 cv
432.094 932.335 431.78 931.119 430.68 930.647 cv
431.028 931.533 431.401 932.402 431.776 933.277 cv
431.116 933.559 430.366 934.209 429.618 933.792 cv
426.325 932.051 422.779 930.125 418.89 930.435 cv
417.441 930.504 415.97 930.38 414.512 930.405 cv
414.512 930.405 li
cp
412.979 925.233 mo
410.178 925.872 407.81 927.515 405.533 929.133 cv
405.725 929.225 405.931 929.316 406.128 929.407 cv
410.745 927.082 416.194 925.861 421.363 926.896 cv
424.438 927.54 427.233 928.991 430.215 929.919 cv
429.971 929.632 429.729 929.366 429.499 929.073 cv
427.327 927.269 424.684 926.097 421.99 925.232 cv
412.979 925.233 li
412.979 925.233 li
cp
0 0 0 0 cmyk
f
416.456 895.259 mo
418.398 895.259 420.046 895.907 421.408 897.2 cv
422.767 898.492 423.449 900.059 423.453 901.903 cv
423.449 903.747 422.767 905.328 421.408 906.649 cv
420.046 907.941 418.398 908.588 416.456 908.588 cv
414.517 908.588 412.866 907.941 411.503 906.649 cv
410.143 905.328 409.464 903.747 409.464 901.904 cv
409.464 900.059 410.143 898.493 411.503 897.2 cv
412.863 895.907 414.516 895.259 416.456 895.259 cv
416.933 889.235 mo
415.151 889.235 li
415.097 886.184 415.238 883.899 415.586 882.386 cv
415.962 880.873 416.904 878.796 418.41 876.153 cv
419.945 873.489 420.943 871.355 421.408 869.76 cv
421.898 868.137 422.146 866.144 422.146 863.776 cv
422.146 860.119 421.394 857.422 419.89 855.688 cv
418.38 853.958 416.6 853.089 414.542 853.089 cv
412.98 853.089 411.664 853.488 410.592 854.286 cv
409.781 854.891 409.374 855.524 409.374 856.184 cv
409.374 856.625 409.65 857.312 410.2 858.248 cv
411.445 860.367 412.067 862.167 412.067 863.651 cv
412.067 865.001 411.575 866.128 410.591 867.038 cv
409.636 867.944 408.433 868.398 406.984 868.398 cv
405.362 868.398 404.003 867.861 402.901 866.791 cv
401.801 865.688 401.25 864.246 401.25 862.458 cv
401.25 859.212 402.729 856.366 405.68 853.917 cv
408.636 851.468 412.762 850.244 418.062 850.244 cv
423.68 850.244 427.952 851.522 430.877 854.081 cv
433.829 856.613 435.305 859.678 435.305 863.284 cv
435.305 865.896 434.553 868.317 433.049 870.545 cv
431.542 872.746 428.631 875.193 424.317 877.889 cv
421.419 879.705 419.509 881.329 418.583 882.758 cv
417.685 884.162 417.138 886.322 416.933 889.235 cv
f
435.688 1076.69 mo
430.59 1076.82 425.518 1077.5 420.63 1078.77 cv
417.181 1081.87 413.637 1078.22 409.987 1078.15 cv
386.603 1073.05 366.461 1083.73 347.063 1092.15 cv
332.609 1097.85 313.666 1096.94 300.955 1088.17 cv
307.242 1096.07 315.66 1100.92 324.347 1104.22 cv
340.498 1110.67 359.724 1106.27 373.089 1096.93 cv
384.557 1090.48 394.411 1077.81 409.521 1082.61 cv
394.144 1089.76 380.093 1099.78 367.386 1112.65 cv
375.338 1119.24 li
384.603 1106.81 396.938 1096.68 409.4 1088.79 cv
412.103 1087.33 414.971 1085.51 417.966 1085.13 cv
433.278 1092.62 446.938 1105.45 459.284 1118.77 cv
461.917 1116.64 464.694 1114.33 466.854 1111.86 cv
454.043 1099.47 440.042 1089.75 424.958 1082.72 cv
427.463 1082 430.311 1081.88 433.26 1081.93 cv
441.393 1081.42 446.944 1087.18 453.233 1091.19 cv
468.756 1102.98 489.491 1110.74 509.37 1103.31 cv
518.28 1100.12 526.915 1094.46 533.227 1086.59 cv
520.944 1095.34 502.42 1096.82 488.083 1091.51 cv
472.645 1085.3 li
461.891 1079.58 448.709 1076.37 435.688 1076.69 cv
435.688 1076.69 li
cp
308.907 1033.23 mo
318.906 1046.7 321.627 1066.7 340.049 1073.17 cv
343.104 1074.79 346.982 1074.59 349.785 1076.37 cv
346.268 1076.91 343.222 1075.56 339.903 1075.11 cv
316.401 1069.85 287.573 1076.55 269.933 1056.45 cv
276.628 1069.58 290.367 1080.14 303.676 1084.33 cv
324.144 1091.29 345.6 1083.52 364.901 1078.77 cv
367.651 1078.05 370.981 1078.28 373.557 1077.36 cv
362.832 1075.18 352.656 1071.72 344.202 1064.3 cv
332.415 1053.2 321.684 1041.73 308.907 1033.23 cv
308.907 1033.23 li
cp
524.663 1031.45 mo
511.348 1040.54 500.688 1052.41 488.702 1063.95 cv
480.559 1071.31 470.62 1074.37 460.397 1076.69 cv
460.397 1076.84 li
464.52 1077.36 li
485.903 1080.82 508.366 1091.16 530.684 1082.72 cv
543.672 1078.15 557.938 1067.26 563.635 1054.25 cv
548.297 1072.92 523.258 1069.41 501.387 1072.85 cv
495.504 1073.45 490.075 1075.56 484.135 1075.43 cv
488.303 1073.43 493.405 1072.98 497.442 1070.33 cv
513.749 1062.19 514.792 1044.12 524.663 1031.45 cv
524.663 1031.45 li
cp
282.477 993.756 mo
290.578 1009.95 286.751 1031.06 297.563 1046.12 cv
300.534 1051.09 305.457 1055.45 309.698 1059.29 cv
309.493 1059.5 li
305.653 1057.71 302.104 1055.14 298.702 1052.12 cv
280.228 1036.94 252.66 1034.88 241.656 1009.95 cv
244.644 1028.25 258.891 1044.91 274.846 1054.72 cv
289.456 1064.93 308.846 1063.43 325.396 1068.9 cv
310.103 1056.55 307.564 1038.09 300.954 1021.75 cv
296.511 1011.75 289.84 1002.58 282.477 993.756 cv
282.477 993.756 li
cp
550.567 991.647 mo
545.92 996.749 542.624 1002.38 538.635 1007.75 cv
526.118 1026.73 527.17 1051.67 508.409 1067.79 cv
519.487 1064 531.674 1063.03 543.084 1059.97 cv
565.129 1052.95 588.538 1030.85 591.446 1007.28 cv
588.737 1014.25 583.1 1020.7 576.944 1025.62 cv
561.569 1037.16 542.999 1041.14 528.788 1055.34 cv
527.27 1056.34 525.741 1057.83 524.018 1057.92 cv
529.342 1053.29 534.133 1047.56 537.497 1041.66 cv
546.249 1026.82 542.952 1006.95 550.567 991.647 cv
550.567 991.647 li
cp
270.4 956.153 mo
272.193 967.954 267.514 978.381 266.455 989.598 cv
265.534 998.814 266.929 1007.89 270.752 1015.51 cv
271.554 1017.91 273.722 1019.88 274.261 1022.22 cv
270.806 1019.11 268.573 1014.99 265.986 1011.27 cv
255.056 993.088 231.469 981.483 229.878 959.523 cv
229.077 969.293 229.491 979.832 233.181 988.335 cv
241.937 1013.01 268.825 1025.8 288.561 1039.26 cv
286.699 1034.56 283.885 1030.18 282.478 1025.27 cv
277.105 1002.79 280.006 976.893 270.4 956.153 cv
270.4 956.153 li
cp
562.614 953.752 mo
559.631 961.717 li
551.639 985.484 557.987 1015.15 545.012 1036.74 cv
545.012 1037.54 li
553.487 1030.97 562.43 1025.62 571.245 1019.85 cv
592.625 1005.24 607.057 982.627 603.141 956.829 cv
601.627 972.283 589.905 983.703 578.377 994.839 cv
570.946 1002.8 565.985 1011.69 559.633 1020.06 cv
558.846 1020.06 li
563.545 1012.89 566.459 1004.92 566.913 995.951 cv
567.366 981.095 560.946 968.556 562.614 953.752 cv
562.614 953.752 li
cp
234.611 904.702 mo
232.518 909.173 231.639 914.186 230.518 919.051 cv
228.138 931.719 230.473 945.204 233.969 956.83 cv
238.219 971.411 252.529 981.812 259.758 995.161 cv
260.751 995.951 li
259.698 988.706 259.14 980.906 261.189 973.992 cv
264.304 962.92 267.886 952.098 270.284 940.693 cv
271.536 931.728 273.728 921.8 272.682 913.166 cv
271.488 917.817 270.106 922.295 267.71 926.343 cv
257.852 941.282 248.049 959.012 254.846 978.087 cv
254.806 978.138 254.745 978.215 254.699 978.266 cv
254.687 978.278 254.652 978.312 254.641 978.325 cv
254.608 978.353 254.557 978.39 254.522 978.412 cv
254.474 978.44 254.398 978.467 254.347 978.472 cv
254.346 978.472 254.321 978.472 254.317 978.472 cv
254.315 978.472 254.292 978.472 254.287 978.472 cv
254.286 978.469 254.263 978.472 254.261 978.472 cv
254.252 978.469 254.238 978.447 254.231 978.442 cv
254.228 978.441 254.206 978.447 254.201 978.442 cv
251.472 972.139 250.994 964.924 249.086 958.207 cv
244.53 940.282 230.657 925.356 234.611 904.702 cv
234.611 904.702 li
cp
597.79 901.889 mo
600.77 918.151 593.473 931.734 587.614 945.204 cv
583.491 954.56 582.139 965.099 579.483 975.131 cv
578.698 976.04 li
578.375 975.717 li
579.303 971.359 580.831 967.144 580.422 962.187 cv
581.547 941.74 563.676 929.199 559.631 910.969 cv
559.426 917.793 li
560.952 935.643 565.661 952.161 571.038 968.423 cv
574.137 975.979 573.215 985.782 572.499 993.757 cv
578.92 983.686 587.327 974.467 594.282 964.558 cv
604.02 946.659 606.702 921.06 597.79 901.889 cv
597.79 901.889 li
cp
253.939 856.292 mo
253.925 856.299 253.898 856.315 253.88 856.323 cv
253.842 856.34 253.773 856.386 253.734 856.411 cv
253.637 856.476 253.519 856.558 253.414 856.616 cv
244.262 868.294 237.755 881.09 238.151 896.763 cv
236.919 916.054 249.276 929.648 250.664 947.835 cv
253.531 928.856 269.224 915.274 277.71 898.698 cv
280.681 892.067 282.901 884.841 283.792 877.669 cv
282.596 880.724 280.564 883.354 278.238 885.957 cv
267.332 895.908 254.821 906.114 252.447 920.513 cv
252.05 922.562 251.932 924.703 251.335 926.693 cv
251.329 926.696 251.314 926.689 251.307 926.693 cv
251.292 926.699 251.262 926.719 251.249 926.72 cv
251.235 926.726 251.202 926.72 251.19 926.72 cv
251.186 926.723 251.165 926.72 251.161 926.72 cv
251.156 926.72 251.139 926.723 251.131 926.72 cv
251.126 926.72 251.108 926.723 251.102 926.72 cv
251.097 926.72 251.078 926.723 251.073 926.72 cv
251.068 926.72 251.049 926.723 251.044 926.72 cv
251.038 926.72 251.018 926.697 251.015 926.693 cv
251.007 926.686 250.992 926.668 250.985 926.664 cv
250.904 926.593 250.833 926.468 250.779 926.371 cv
250.766 926.345 250.735 926.301 250.721 926.282 cv
250.717 926.277 250.697 926.259 250.69 926.252 cv
250.687 926.248 250.668 926.226 250.661 926.224 cv
252.006 908.387 li
252.466 890.955 244.125 871.624 254.199 856.29 cv
254.107 856.274 254.017 856.27 253.939 856.292 cv
253.939 856.292 li
cp
576.944 853.628 mo
581.567 860.083 582.374 868.189 582.497 876.528 cv
580.385 891.925 579.719 908.232 581.913 923.824 cv
581.913 923.857 581.889 923.91 581.883 923.939 cv
581.875 923.964 581.866 924.007 581.856 924.028 cv
581.834 924.062 581.793 924.118 581.766 924.146 cv
581.735 924.173 581.686 924.211 581.649 924.232 cv
581.577 924.271 581.473 924.288 581.383 924.292 cv
580.122 920.175 580.211 915.412 578.17 911.583 cv
573.188 896.447 554.94 889.355 547.526 875.62 cv
548.567 881.6 550.444 887.273 552.645 892.782 cv
559.581 909.626 576.43 922.355 581.092 940.224 cv
581.624 941.871 581.784 943.87 582.379 945.347 cv
583.631 936.786 585.862 928.542 589.045 920.807 cv
597.584 902.553 595.008 877.184 583.282 861.27 cv
581.225 858.691 579.907 855.361 576.944 853.628 cv
576.944 853.628 li
cp
282.214 832.163 mo
275.453 833.894 269.438 837.976 264.699 843.877 cv
253.782 855.344 254.918 873.01 256.451 888.476 cv
256.77 893.265 255.788 897.741 256.102 902.211 cv
259.31 895.633 264.929 889.814 270.75 884.701 cv
284.87 874.742 299.604 860.804 299.813 843.085 cv
295.244 855.835 281.477 861.204 272.152 869.823 cv
267.361 874.525 263.519 879.987 261.335 885.751 cv
260.983 885.487 li
262.132 880.388 264.452 875.792 265.779 870.817 cv
269.94 857.366 269.089 841.192 282.214 832.163 cv
282.214 832.163 li
cp
548.29 829.761 mo
553.542 833.282 557.454 838.765 559.426 844.345 cv
563.368 857.224 565.27 870.837 570.918 882.914 cv
570.571 883.234 li
568.454 879.861 567.366 875.754 564.079 872.781 cv
554.254 859.88 537.143 856.49 530.807 841.18 cv
532.407 850.325 535.213 858.96 541.622 866.044 cv
552.686 877.982 568.756 885.038 576.329 899.956 cv
576.444 899.837 li
573.616 885.758 578.122 872.17 575.043 858.225 cv
572.358 845.896 561.18 832.401 548.29 829.761 cv
548.29 829.761 li
cp
317.972 814.094 mo
304.709 819.267 289.894 824.184 281.893 838.167 cv
276.269 845.728 276.118 855.559 272.154 863.792 cv
279.499 856.882 287.782 851.588 294.26 843.555 cv
301.485 833.467 308.23 822.648 317.972 814.094 cv
317.972 814.094 li
cp
538.959 843.083 mo
545.301 852.951 551.008 857.003 559.104 861.593 cv
557.5 857.905 li
554.665 846.228 552.262 836.838 542.551 828.133 cv
534.282 820.695 511.299 813.669 511.299 813.669 cv
524.762 825.911 526.608 823.875 538.959 843.083 cv
cp
f
2.83465 lw
416.658 744.363 mo
527.03 744.363 616.502 833.835 616.502 944.206 cv
616.502 1054.58 527.03 1144.05 416.658 1144.05 cv
306.288 1144.05 216.816 1054.58 216.816 944.206 cv
216.816 833.835 306.288 744.363 416.658 744.363 cv
cp
.855469 .847656 .785156 1 cmyk
@
%ADOBeginClientInjection: EndPageContent "AI11"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11"
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/MTLBBX+OCRAStd*1 uf/MTLBBX+OCRAStd uf/OCRAStd ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *PageSize A3
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%Pages: 1
%%BoundingBox: 0 0 842 1191
%%EOF
